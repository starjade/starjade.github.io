<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XWOS – newlib笔记</title>
    <link>/docs/note/newlib/</link>
    <description>Recent content in newlib笔记 on XWOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/note/newlib/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 多线程</title>
      <link>/docs/note/newlib/multi-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/multi-thread/</guid>
      <description>
        
        
        &lt;h2 id=&#34;编译配置&#34;&gt;编译配置&lt;/h2&gt;
&lt;p&gt;编译newlib时，需要增加配置&lt;code&gt;--enable-newlib-multithread&lt;/code&gt;开启多线程的支持，默认是开启的。&lt;/p&gt;
&lt;h2 id=&#34;_reent结构体&#34;&gt;_reent结构体&lt;/h2&gt;
&lt;p&gt;Newlib中的头文件&lt;code&gt;reent.h&lt;/code&gt;中，定义了结构体&lt;code&gt;struct _reent&lt;/code&gt;，用于支持多线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，Newlib定义了一个全局的结构体变量&lt;code&gt;impure_data&lt;/code&gt;，
此结构体定义在&lt;code&gt;newlib/libc/reent/impure.c&lt;/code&gt;，并使用宏&lt;code&gt;_REENT&lt;/code&gt;表示它；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct _reent&lt;/code&gt;定义了一些C标准的变量，例如&lt;code&gt;errno&lt;/code&gt;、&lt;code&gt;stdin&lt;/code&gt;、&lt;code&gt;stdout&lt;/code&gt;、&lt;code&gt;stderr&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;为了支持多线程访问各自的&lt;code&gt;errno&lt;/code&gt;、&lt;code&gt;stdin&lt;/code&gt;、&lt;code&gt;stdout&lt;/code&gt;和&lt;code&gt;stderr&lt;/code&gt;等，需要在
线程对象结构体中增加结构体&lt;code&gt;struct _reent&lt;/code&gt;的成员；&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;struct _reent&lt;/code&gt;体积过大，玄武OS自己将实现&lt;code&gt;struct _reent&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Newlib中除了提供C标准中的函数，还定义带后缀&lt;code&gt;_r&lt;/code&gt;版本的函数，例如&lt;code&gt;_read_r()&lt;/code&gt;，
其中多一个参数&lt;code&gt;struct _reent *&lt;/code&gt;用于区分不同的线程。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 动态内存管理</title>
      <link>/docs/note/newlib/mm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/mm/</guid>
      <description>
        
        
        &lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XWOS不使用Newlib提供的动态内存管理的算法。使用的是内存池算法：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移植方法&#34;&gt;移植方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重写Newlib的函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_malloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_realloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; p, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_calloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t elem_nr, size_t elem_sz);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_memalign_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t alignment, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_valloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_pvalloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_free_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; p);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;源码路径：&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: errno</title>
      <link>/docs/note/newlib/errno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/errno/</guid>
      <description>
        
        
        &lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Newlib中，标准头文件&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;的&lt;code&gt;errno&lt;/code&gt;是一个宏：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;errno.h&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define errno (*__errno())
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt;);

&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt;()
{
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;_REENT&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;_errno;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Newlib的底层代码对errno的处理非常奇怪，会将errno undef掉，然后重新定义成一个&lt;strong&gt;变量&lt;/strong&gt;，
并要求libgloss中提供&lt;strong&gt;变量&lt;/strong&gt;定义：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;newlib/libc/reent/readr.c&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#undef errno
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; errno;

_ssize_t
&lt;span style=&#34;color:#00a000&#34;&gt;_read_r&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;ptr,
     &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fd,
     &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;buf,
     size_t cnt)
{
  _ssize_t ret;

  errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; ((ret &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (_ssize_t)_read (fd, buf, cnt)) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; errno &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
    ptr&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;_errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; errno;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;libgloss/libnosys/read.c&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#undef errno
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; errno;

&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#00a000&#34;&gt;_read&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;   file,
        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;ptr,
        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;   len)
{
  errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ENOSYS;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;libgloss提供与平台相关的启动代码、I/O支持、系统函数等，其中libnosys是一个空实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移植方法&#34;&gt;移植方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XWOS在每个线程对象结构体中定义了一个&lt;code&gt;__errno&lt;/code&gt;变量，并
重新覆盖实现了&lt;code&gt;int * __errno(void)&lt;/code&gt;函数，
返回&lt;strong&gt;当前&lt;/strong&gt;线程对象的&lt;code&gt;__errno&lt;/code&gt;的地址：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt;()
{
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_thd &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; thd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos_cthd_self();
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;thd&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;osthd.newlib.__errno;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;当使用&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;中的&lt;code&gt;errno&lt;/code&gt;宏时，就可获取线程自身的&lt;code&gt;__errno&lt;/code&gt;，不再
依赖libgloss。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
