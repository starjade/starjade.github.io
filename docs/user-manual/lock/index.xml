<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XWOS – 锁</title>
    <link>/docs/user-manual/lock/</link>
    <description>Recent content in 锁 on XWOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/user-manual/lock/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 自旋锁</title>
      <link>/docs/user-manual/lock/spinlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/spinlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;自旋锁是多核系统中为防止多个处理器同时访问临界区而引入的一种锁。
当一个CPU获得自旋锁并访问临界区时，其他CPU只能“&lt;strong&gt;自旋&lt;/strong&gt;”等待锁。
所谓“&lt;strong&gt;自旋&lt;/strong&gt;”，是指不断循环测试锁的是否可用。&lt;/p&gt;
&lt;p&gt;自旋锁内的操作是不可被打断的。因此，自旋锁还伴随其他操作，
例如关闭调度器的抢占，关闭中断底半部，关闭中断等。
在单核(UP)系统中，只有一个CPU，不需要自旋过程，单核系统为了软件接口与多核系统兼容，
也会实现自旋锁，这种自旋锁只需关闭抢占、中断底半部或中断。&lt;/p&gt;
&lt;h2 id=&#34;自旋锁的初始化&#34;&gt;自旋锁的初始化&lt;/h2&gt;
&lt;p&gt;自旋锁是基于原子操作指令实现的，自旋锁结构体的核心数据是一个CPU指令能操作的
基本数据类型（8位、16位、32位、64位），因此不需要提供动态创建和删除方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwos_splk_init&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_splk &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; spl);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;临界区&#34;&gt;临界区&lt;/h2&gt;
&lt;p&gt;自旋锁不同后缀的API安全性不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临界区只对线程上下文是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程、中断、中断底半部上下文都是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_cpuirq(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_cpuirq(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_cpuirqsv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;cpuirq1);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_lock_cpuirqsv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;cpuirq2);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区2 */&lt;/span&gt;
        xwos_splk_unlock_cpuirqrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;loc2, cpuirq2);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_unlock_cpuirqrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;loc1, cpuirq1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程上下文、特定的外设中断是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_irqs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock, irq_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_irqs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock, irq_array, num);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区内有子临界区，对线程上下文、特定的外设中断是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_irqssv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, irq_array, flag1_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_lock_irqssv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, irq_array, flag2_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区2 */&lt;/span&gt;
        xwos_splk_unlock_irqsrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, irq_array, flag2_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_unlock_irqsrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, irq_array, flag1_array, num);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程上下文、中断底半部是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
{
        xwos_splk_lock_bh(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_bh(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/spinlock.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 顺序锁</title>
      <link>/docs/user-manual/lock/seqlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/seqlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;顺序锁是对自旋锁改良后的锁，顺序锁中包含一个自旋锁，并且带有一个顺序值。
顺序锁将临界区分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何对顺序锁临界区的&lt;strong&gt;写&lt;/strong&gt;操作都是独占的，每次&lt;strong&gt;写&lt;/strong&gt;操作时，会先上锁自旋锁，
然后将顺序值加1，解锁之前也会将顺序值再加1。言外之意，每次写完之后，顺序值都加2，顺序值是&lt;strong&gt;偶数&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非独占读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果多个CPU进行的是&lt;strong&gt;只读&lt;/strong&gt;操作，它们可以同时进入&lt;strong&gt;非独占读临界区&lt;/strong&gt;。
CPU进入非独占读临界区无需获得自旋锁，但需要先测试顺序值是否为&lt;strong&gt;偶数&lt;/strong&gt;，并记录此时的顺序值。
当退出读临界区时，需要再次读取顺序值，并与之前记录的值进行比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果相等，表示读的结果有效；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果不相等，则表示读的过程中别的CPU进行了写操作，此次的读操作无效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独占读&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果希望读临界区不会被写操作无效，可以使用独占读的方式，
独占读会排斥其他CPU上的独占写和独占读操作，但不会排斥非独占读，
其他CPU依然可以进入非独占读临界区。&lt;/p&gt;
&lt;h2 id=&#34;顺序锁的初始化&#34;&gt;顺序锁的初始化&lt;/h2&gt;
&lt;p&gt;顺序锁基于自旋锁，因此同自旋锁一样，不需要提供动态创建、删除以及销毁等方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自旋锁的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sqlk_init&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_sqlk &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; sql);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;临界区&#34;&gt;临界区&lt;/h2&gt;
&lt;h3 id=&#34;访问写临界区&#34;&gt;访问写临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
        xwos_sqlk_wr_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 写临界区：临界区只对线程上下文是安全的 */&lt;/span&gt;
        xwos_sqlk_wr_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与&lt;strong&gt;spinlock&lt;/strong&gt;类似，&lt;strong&gt;sqlk_wr&lt;/strong&gt;还提供各种版本的API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭/打开CPU中断：临界区对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复CPU中断：临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_cpuirqrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开外设中断：临界区对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复外设中断：临界区内有子临界区，对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_irqsrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开中断底半部：临界区对线程上下文、中断底半部是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问独占读临界区&#34;&gt;访问独占读临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
        xwos_sqlk_rdex_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 独占读临界区 */&lt;/span&gt;
        xwos_sqlk_rdex_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与&lt;strong&gt;spinlock&lt;/strong&gt;类似，&lt;strong&gt;sqlk_rdex&lt;/strong&gt;还提供各种版本的API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭/打开CPU中断：临界区对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复CPU中断：临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_cpuirqrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开外设中断：临界区对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复外设中断：临界区内有子临界区，对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_irqsrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开中断底半部：临界区对线程上下文、中断底半部是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问非独占读临界区&#34;&gt;访问非独占读临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        seq &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos_sqlk_rd_begin(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock); &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 进入临界区前先获取顺序值 */&lt;/span&gt;
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;do&lt;/span&gt; {
                &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 非独占读临界区 */&lt;/span&gt;
        } &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; (xwos_sqlk_rd_retry(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span style=&#34;&#34;&gt;，&lt;/span&gt; seq)); &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 测试顺序值是否发生了变化 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/seqlock.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 互斥锁</title>
      <link>/docs/user-manual/lock/mutex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/mutex/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;互斥锁只能在线程上下文中使用，只能保证临界区对线程是安全的。
任何操作系统，都不可在&lt;strong&gt;非&lt;/strong&gt;线程上下文中使用互斥锁。
与自旋锁及其派生锁不同，等待互斥锁的线程会被阻塞，并让出CPU。&lt;/p&gt;
&lt;p&gt;互斥锁存在优先级反转问题：&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 810px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/docs/user-manual/lock/mutex/priority-inversion_hu06d113db6caaf8381d16863409fb983c_97009_800x800_fill_catmullrom_smart1_3.png&#34; width=&#34;800&#34; height=&#34;800&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0 text-center&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
XWOS互斥锁的优先级反转问题
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: xwos.tech / CC-BY&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;p&gt;XWOS内核采取优先级天花板和优先级继承的混会策略解决此问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程和互斥锁都拥有优先级，它们在创建时需要指定一个&lt;strong&gt;静态优先级&lt;/strong&gt;，
当线程持有互斥锁时，线程可以获取互斥锁的优先级作为&lt;strong&gt;动态优先级&lt;/strong&gt;，
当互斥锁被线程等待时，互斥锁可以获取线程的优先级作为&lt;strong&gt;动态优先级&lt;/strong&gt;，
最终的优先级由&lt;strong&gt;静态优先级&lt;/strong&gt;和&lt;strong&gt;动态优先级&lt;/strong&gt;比较，取较大的一个；&lt;/li&gt;
&lt;li&gt;假设线程A优先级低，线程B的优先级中，线程C的优先级高。
线程A已经获得锁的情况下，线程C等待锁，会临时提高锁的优先级，
锁的优先级再传递给线程A，此时线程A不会被线程B抢占。&lt;/li&gt;
&lt;li&gt;优先级可以无限继承：假设线程A的优先级最低，线程T1、T2、…… 、Tn
的优先级依次递增，系统中有互斥锁L、M1、M2、…、Mn。
假设A持有L，T1持有M1去等待L，T2持有M2去等待M1，T3持有M3去等待M2，以此类推，
Tn持有Mn去等待Mn-1。由此形成优先级传递链：&lt;code&gt;Tn-&amp;gt;Mn-1-&amp;gt;Tn-1-&amp;gt;&amp;amp;#x2026;-&amp;gt;M3-&amp;gt;T3-&amp;gt;M2-&amp;gt;T2-&amp;gt;M1-&amp;gt;T1-&amp;gt;L-&amp;gt;A&lt;/code&gt;，
Tn的优先级将会依次传递到Mn-1、Tn-1、…… 、M3、T3、M2、T2、M1、T1、L、A。&lt;/li&gt;
&lt;li&gt;如何寻找互斥锁与线程的&lt;strong&gt;动态优先级&lt;/strong&gt;，是寻找最大值的问题，因此可以采用与
时间树类似的方法，使用红黑树解决此问题：
&lt;ul&gt;
&lt;li&gt;使用一个&lt;strong&gt;rightmost&lt;/strong&gt;指针指向最大值，需要时可直接从&lt;strong&gt;rightmost&lt;/strong&gt;快速获取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rightmost&lt;/strong&gt;从红黑树中删除时，按照二叉树的性质，下一任&lt;strong&gt;rightmost&lt;/strong&gt;是前任
的左孩子（即前驱）。如果前任的左孩子为叶子，下一任&lt;strong&gt;rightmost&lt;/strong&gt;一定是前任
的父节点。&lt;/li&gt;
&lt;li&gt;红黑树中不允许存在关键字相等的节点，因此拥有相同优先级的节点相互连接成链表。&lt;/li&gt;
&lt;li&gt;互斥锁解锁时，从等待队列中选择最高优先级的线程获取互斥锁，若最高优先级的线程
不止一个，按照先进先出的方法选取线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;互斥锁的创建初始化与删除销毁&#34;&gt;互斥锁的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;互斥锁支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_mtx_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_mtx_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_mtx_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_mtx_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/mtx.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
