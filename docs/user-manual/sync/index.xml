<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XWOS – 同步</title>
    <link>/docs/user-manual/sync/</link>
    <description>Recent content in 同步 on XWOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/user-manual/sync/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 信号量</title>
      <link>/docs/user-manual/sync/sem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/sem/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;信号量通常用于不同代码上下文间的同步，使用PV原语进行操作，
属于操作系统比较底层的同步机制。XWOS内核的信号量有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道信号量(PLSEM)：对所有阻塞在其等待队列中的线程按照先进先出(FIFO)的策略调度，
即当信号量可用时，最先进入等待队列中的线程将优先获得信号量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时信号量(RTSEM)：对所有阻塞在其等待队列中的线程按照优先级进行调度，即高优先级
的线程总是最先获得信号量，同优先级的线程按先进先出(FIFO)的策略调度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作系统抽象层(OSAL)的API只封装了一种信号量，当系统配置文件中同时
配置了管道信号量与实时信号量时，优先使用实时信号量。&lt;/p&gt;
&lt;h2 id=&#34;信号量的创建初始化与删除销毁&#34;&gt;信号量的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;信号量支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_sem_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_sem_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_sem_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_sem_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的p操作&#34;&gt;信号量的P操作&lt;/h2&gt;
&lt;p&gt;P操作是指发布信号量，使得信号量的计数器加1，同时会唤醒信号量等待队列中的一个线程。
被唤醒的线程会进行V操作，取走信号量中的一个信号，使得信号量的计数器减1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_post()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的v操作&#34;&gt;信号量的V操作&lt;/h2&gt;
&lt;p&gt;V操作是指取走信号量中的一个信号，使得信号量的计数器减1，XWOS提供四种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_trywait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只是测试一下信号量，如果失败，就返回&lt;code&gt;-ENODATA&lt;/code&gt;，不会阻塞调用的线程；&lt;/li&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_wait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞，并有时间限制；&lt;/li&gt;
&lt;li&gt;超时的参数用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;超时后阻塞状态解除，并以&lt;code&gt;-ETIMEDOUT&lt;/code&gt;返回；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态不可被中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的中断操作&#34;&gt;信号量的中断操作&lt;/h2&gt;
&lt;p&gt;中断操作是指XWOS在处理内核事件时中断线程的**“阻塞”**或**“睡眠”**，
强制使其进入**就绪**状态。&lt;code&gt;xwos_sem_wait()&lt;/code&gt;和&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;
会返回&lt;code&gt;-EINTR&lt;/code&gt;，但&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;不能被中断。
相关的内核事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统休眠；&lt;/li&gt;
&lt;li&gt;线程准备从一个CPU迁移到另一个CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的冻结与解冻操作&#34;&gt;信号量的冻结与解冻操作&lt;/h2&gt;
&lt;p&gt;冻结信号量是指不允许信号量被发布（P操作），但可以被测试（V操作）。
使用API&lt;code&gt;xwos_sem_wait()&lt;/code&gt;、&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;与&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;
测试已冻结信号量的线程都将被阻塞。
解冻后，信号量的计数器重新从0开始计数，并可以重新开始进行发布（P）操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结：&lt;code&gt;xwos_sem_freeze()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解冻：&lt;code&gt;xwos_sem_thaw()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑选择器&#34;&gt;绑定与解绑选择器&lt;/h2&gt;
&lt;p&gt;可以将信号量绑定到一个特定的&lt;strong&gt;信号选择器&lt;/strong&gt;上。当对信号量进行V操作时，
可向信号选择器发送一个&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_sem_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_sem_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/sem.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 条件量</title>
      <link>/docs/user-manual/sync/cond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/cond/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;条件量常用于多个线程间同步数据。XWOS提供的条件量与大部分系统/语言提供的条件量功能类似，
例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX的&lt;code&gt;pthread_cond_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++的&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Java的&lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python的&lt;code&gt;threading.Condition&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XWOS的条件量还可以用于中断与线程间同步数据。主要包括两个动作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程A等待条件量的**“条件”**成立而阻塞；&lt;/li&gt;
&lt;li&gt;另一个线程B或中断使**“条件”**成立。为了防止两个上下文竞争**“条件”**，
条件量需要和一个**锁**一起使用，锁用于保护**“条件”**不被同时访问。&lt;/li&gt;
&lt;li&gt;XWOS的条件量支持很多种类型的锁：
&lt;ul&gt;
&lt;li&gt;互斥锁：只可用于线程间同步**“条件”**&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;li&gt;顺序锁&lt;/li&gt;
&lt;li&gt;自定义的加锁与解锁函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;条件量的创建初始化与删除销毁&#34;&gt;条件量的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;条件量支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态初始化与销毁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_cond_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_cond_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态创建与删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_cond_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_cond_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;等待条件量&#34;&gt;等待条件量&lt;/h2&gt;
&lt;p&gt;XWOS提供2个API等待条件量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_wait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_cond &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; condid,
                      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;union&lt;/span&gt; xwlk_ulock lock, xwsq_t lktype,
                      &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkdata, xwsq_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkst);

xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_timedwait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_cond &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; condid,
                           &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;union&lt;/span&gt; xwlk_ulock lock, xwsq_t lktype,
                           &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkdata, xwtm_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; xwtm, xwsq_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkst);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;线程会阻塞等待条件量的单播或广播事件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;还会设定一个超时时间，超时后线程被唤醒，并返回错误码-ETIMEDOUT；&lt;/li&gt;
&lt;li&gt;超时的参数&lt;code&gt;xwtm_t * xwtm&lt;/code&gt;用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;所有锁统一使用&lt;code&gt;union xwlk_ulock&lt;/code&gt;指代，此联合中包含所有锁的定义，
实际只是一个指针，具体意义由&lt;code&gt;xwsq_t lktype&lt;/code&gt;决定：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_MTX&lt;/code&gt; 互斥锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表互斥锁（访问方式：&lt;code&gt;lock.osal.mtx&lt;/code&gt;），&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_MTX_UNINTR&lt;/code&gt; 不可中断的互斥锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表互斥锁（访问方式：&lt;code&gt;lock.osal.mtx&lt;/code&gt;），&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SPLK&lt;/code&gt; 自旋锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表自旋锁的指针（访问方式：&lt;code&gt;lock.osal.splk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SQLK_WR&lt;/code&gt; 顺序写锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表顺序锁的指针（访问方式：&lt;code&gt;lock.osal.sqlk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SQLK_RDEX&lt;/code&gt; 顺序读锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表顺序锁的指针（访问方式：&lt;code&gt;lock.osal.sqlk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_CALLBACK&lt;/code&gt; 自定义的加锁与解锁函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表指向&lt;code&gt;struct xwlk_cblk&lt;/code&gt;的指针（访问方式：&lt;code&gt;lock.cb&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;传递给&lt;code&gt;struct xwlk_cblk&lt;/code&gt;中的&lt;code&gt;lock&lt;/code&gt;与&lt;code&gt;unlock&lt;/code&gt;函数的参数；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lkst&lt;/code&gt;指向输出缓冲区，此缓冲区可返回锁的状态：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_LKST_LOCKED&lt;/code&gt;函数返回时，已经上锁；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LKST_UNLOCKED&lt;/code&gt;函数返回时，未上锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;!!!特别注意!!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当使用了带中断管理的上锁函数时，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;或&lt;code&gt;xwos_cond_wait()&lt;/code&gt;返回时需要由用户恢复中断开关，
条件量不会管理中断开关，但可在关闭中断时使用条件量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XWOS的条件量与&lt;code&gt;pthread_cond_t&lt;/code&gt;不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;或&lt;code&gt;xwos_cond_wait()&lt;/code&gt;返回值为&lt;code&gt;XWOK&lt;/code&gt;时
才会对锁进行上锁，如果返回小于0的错误码，不会上锁，是否上锁的状态由&lt;code&gt;lkst&lt;/code&gt;指向的缓冲区返回；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_wait()&lt;/code&gt;无论如何都会等待互斥锁被上锁时才返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;单播条件量&#34;&gt;单播条件量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;单播&lt;/strong&gt;是指唤醒条件量队列中的第一个线程，条件量队列是一个先进先出（FIFO）队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_unicast()&lt;/code&gt;；
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若条件量绑定了信号选择器，单播&lt;strong&gt;不&lt;/strong&gt;会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;广播条件量&#34;&gt;广播条件量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;广播&lt;/strong&gt;是指唤醒条件量队列中的所有线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_broadcast()&lt;/code&gt;；
&lt;ul&gt;
&lt;li&gt;此API可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若条件量绑定了信号选择器，广播会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;条件量的冻结与解冻操作&#34;&gt;条件量的冻结与解冻操作&lt;/h2&gt;
&lt;p&gt;条件量可被冻结，冻结后的条件量不允许单播与广播，但可以被等待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结：&lt;code&gt;xwos_cond_freeze()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解冻：&lt;code&gt;xwos_cond_thaw()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定选择器&#34;&gt;绑定选择器&lt;/h2&gt;
&lt;p&gt;可以将条件量绑定到一个特定的信号选择器上。当广播条件量时，可向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_cond_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_cond_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/cond.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 事件标志</title>
      <link>/docs/user-manual/sync/flg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/flg/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;当系统需要处理很多事件，如果每个事件都绑定一个特定的条件量，
每个条件量又由一个线程进行等待处理，会导致系统需要大量内存来创建条件量和线程，
这种方法在小内存的MCU上显然不可行。条件量属于操作系统比较底层的功能，
用法虽然灵活但很复杂。因此，XWOS基于条件量实现了事件标志的功能。&lt;/p&gt;
&lt;p&gt;事件标志使用位图来管理一组事件，位图中的每个位代表一个事件，
当一个或多个事件状态发生变化时，事件对应的位也会发生变化，并唤醒正在等待的线程。
线程唤醒后，就可从事件位图中获取事件的状态。&lt;/p&gt;
&lt;p&gt;XWOS的事件标志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程可以等待位图中的事件位被置1，也可以等待事件位被清0；&lt;/li&gt;
&lt;li&gt;线程可以等待位图中的事件位同时被置1（事件与事件之间是逻辑&lt;strong&gt;与&lt;/strong&gt;的关系），
也可以等待其中任意一个位被置1（事件与事件之间是逻辑&lt;strong&gt;或&lt;/strong&gt;的关系）；&lt;/li&gt;
&lt;li&gt;线程可以等待位图中的事件位同时被清0（事件与事件之间是逻辑&lt;strong&gt;与&lt;/strong&gt;的关系），
也可以等待其中任意一个位被清0（事件与事件之间是逻辑&lt;strong&gt;或&lt;/strong&gt;的关系）；&lt;/li&gt;
&lt;li&gt;线程可以选择是否&lt;strong&gt;消费&lt;/strong&gt;事件，&lt;strong&gt;“消费”&lt;strong&gt;事件是指，当线程等到事件被
唤醒，可以选择是否&lt;/strong&gt;清除&lt;/strong&gt;事件标志。&lt;strong&gt;清除&lt;/strong&gt;的含义是：
&lt;ul&gt;
&lt;li&gt;当线程等待的是位图中的事件位被置1，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位清0；&lt;/li&gt;
&lt;li&gt;当线程等待的是位图中的事件位被清0，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位置1；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程可以等待事件标志位发生&lt;strong&gt;翻转&lt;/strong&gt;，&lt;strong&gt;翻转&lt;/strong&gt;是指事件标志位由1变为0，或
由0变为1，当线程等待的是标志位发生&lt;strong&gt;翻转&lt;/strong&gt;，不可&lt;strong&gt;清除&lt;/strong&gt;事件标志；&lt;/li&gt;
&lt;li&gt;事件位图中的位数可在创建时指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事件标志的创建初始化与删除销毁&#34;&gt;事件标志的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;事件标志支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_flg_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_flg_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_flg_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_flg_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;等待事件&#34;&gt;等待事件&lt;/h2&gt;
&lt;p&gt;XWOS提供3个API等待触发事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_trywait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只是测试一下事件标志的触发事件，如果失败，就返回&lt;code&gt;-ENODATA&lt;/code&gt;，不会阻塞调用的线程；&lt;/li&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_wait()&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;线程会阻塞等待事件标志的触发事件；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_timedwait()&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用。&lt;/li&gt;
&lt;li&gt;线程会限时阻塞等待事件标志的触发事件；&lt;/li&gt;
&lt;li&gt;超时的参数用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;触发条件&#34;&gt;触发条件&lt;/h3&gt;
&lt;p&gt;当调用等待事件的API时，需要指定一个触发条件（参数：trigger）。
触发条件分为&lt;strong&gt;电平触发&lt;/strong&gt;和&lt;strong&gt;边沿触发&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;电平触发&#34;&gt;电平触发&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;电平触发&lt;/strong&gt;的概念来源于数字电路中，是一种类比，是指事件特定的状态（1或0）
产生唤醒信号，下面的触发条件为电平触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_SET_ALL&lt;/code&gt; 所有事件位被置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_SET_ANY&lt;/code&gt; 任意事件位被置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_CLR_ALL&lt;/code&gt; 所有事件位被清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_CLR_ANY&lt;/code&gt; 任意事件位被清0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;边沿触发&#34;&gt;边沿触发&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;边沿触发&lt;/strong&gt;的概念来源于数字电路中，是一种类比，是指事件状态发生改变
（1变0或0变1）时产生的唤醒信号，下面的触发条件为边沿触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_TGL_ALL&lt;/code&gt; 所有事件位发生翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_TGL_ANY&lt;/code&gt; 任意事件位发生翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清除触发事件&#34;&gt;清除触发事件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当采用&lt;strong&gt;电平触发&lt;/strong&gt;时，需要在触发后清除事件标志位，防止事件重复触发，可以
在调用等待事件的API指定参数action为&lt;code&gt;XWOS_FLG_ACTION_CONSUMPTION&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当采用&lt;strong&gt;边沿触发&lt;/strong&gt;时，不需要清除事件标志位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;产生触发事件&#34;&gt;产生触发事件&lt;/h2&gt;
&lt;p&gt;XWOS提供6个API产生触发事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1m()&lt;/code&gt;: 同时设置多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1i()&lt;/code&gt;: 设置单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0m()&lt;/code&gt;: 同时清除多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0i()&lt;/code&gt;: 清除单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1m()&lt;/code&gt;: 同时翻转多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1i()&lt;/code&gt;: 翻转单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定选择器&#34;&gt;绑定选择器&lt;/h2&gt;
&lt;p&gt;可以将事件标志绑定到一个特定的信号选择器上，当触发事件产生时，
可向信号选择器发送**“选择信号”**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定：&lt;code&gt;xwos_flg_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑：&lt;code&gt;xwos_flg_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/flg.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 线程栅栏</title>
      <link>/docs/user-manual/sync/br/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/br/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;XWOS的线程栅栏是用于协调多个线程并行工作的同步机制。当线程到达线程栅栏时会暂停运行
并等待，直到所有合作的线程都达到线程栅栏，所有线程从线程栅栏开始“同时”执行。&lt;/p&gt;
&lt;h2 id=&#34;线程栅栏的创建初始化与删除销毁&#34;&gt;线程栅栏的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;线程栅栏支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_br_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_br_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_br_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_br_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程栅栏在初始化/创建时，需要指定线程数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程栅栏的工作原理&#34;&gt;线程栅栏的工作原理&lt;/h2&gt;
&lt;p&gt;XWOS提供2个API：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_wait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_br &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; br);

xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_timedwait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_br &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; br, xwtm_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; xwtm);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;每当一个线程到达栅栏，线程就会阻塞等待，线程栅栏中数量就会增加1；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_br_timedwait()&lt;/code&gt;还会设定一个超时时间，超时后线程被唤醒，并返回错误码-ETIMEDOUT；&lt;/li&gt;
&lt;li&gt;超时的参数&lt;code&gt;xwtm_t * xwtm&lt;/code&gt;用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当线程栅栏中线程数量达到线程栅栏初始化/创建时指定线程数量后，所有线程都被唤醒，开始“同时”执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑选择器&#34;&gt;绑定与解绑选择器&lt;/h2&gt;
&lt;p&gt;线程栅栏也时同步对象，也可以将绑定到一个特定的&lt;strong&gt;信号选择器&lt;/strong&gt;上。所有线程从线程栅栏开始“同时”执行时，
可向信号选择器发送一个&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_br_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_br_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/br.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 信号选择器</title>
      <link>/docs/user-manual/sync/sel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/sel/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;信号选择器类似于事件标志，使用位图来管理一组&lt;strong&gt;同步对象&lt;/strong&gt;。使得单一线程可以同时等待
一组不同的&lt;strong&gt;同步对象&lt;/strong&gt;，类似于POSIX中的&lt;code&gt;select()&lt;/code&gt;。
每个&lt;strong&gt;同步对象&lt;/strong&gt;在信号选择器位图中都绑定一个特定的&lt;strong&gt;位&lt;/strong&gt;，
当这些&lt;strong&gt;同步对象&lt;/strong&gt;发送&lt;strong&gt;选择信号&lt;/strong&gt;时，信号选择器位图中特定的&lt;strong&gt;位&lt;/strong&gt;被置1，
同时使得等待信号选择器的线程被唤醒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送信号&lt;/strong&gt;对于不同的&lt;strong&gt;同步对象&lt;/strong&gt;有不同解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量：指发布操作（V操作），API &lt;code&gt;xwos_sem_post()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;条件量：指广播操作，API &lt;code&gt;xwos_cond_broadcast()&lt;/code&gt;，注意，
单播&lt;code&gt;xwos_cond_unicast()&lt;/code&gt;不会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;事件标志：指事件标志位图中任何一位发生改变，对应于API：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1i()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0i()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1i()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程栅栏：指所有线程抵达栅栏处，并同时被唤醒；&lt;/li&gt;
&lt;li&gt;信号选择器：信号选择器本身也时同步对象，当任何绑定在信号选择器中的&lt;strong&gt;同步对象&lt;/strong&gt;向
信号选择器发送了&lt;strong&gt;选择信号&lt;/strong&gt;，信号选择器亦会向其父信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。
信号选择器之间可以依次绑定，形成传递链，将&lt;strong&gt;选择信号&lt;/strong&gt;在传递链上传递。但要注意，
信号选择器不可相互绑定形成循环链，否则会造成无限传递。&lt;/li&gt;
&lt;/ul&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 810px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/docs/user-manual/sync/sel/xwos-sel_hudcf9cb7156ebc4dfb2218a5a4fe7da02_94248_800x600_fill_catmullrom_smart1_3.png&#34; width=&#34;800&#34; height=&#34;600&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0 text-center&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
XWOS信号选择器示意图
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: xwos.tech / CC-BY&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;h2 id=&#34;信号选择器的创建初始化与删除销毁&#34;&gt;信号选择器的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;信号选择器支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_sel_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_sel_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_sel_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_sel_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑&#34;&gt;绑定与解绑&lt;/h2&gt;
&lt;p&gt;XWOS中所有&lt;strong&gt;同步对象&lt;/strong&gt;（包括信号选择器本身）都带有两个相似的API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 绑定 */&lt;/span&gt;
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sem_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_flg_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sel_bind&lt;/span&gt;();

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 解绑 */&lt;/span&gt;
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sem_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_flg_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sel_unbind&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;同步对象&lt;/strong&gt;绑定操作又分为独占绑定与非独占绑定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占绑定：是指&lt;strong&gt;同步对象&lt;/strong&gt;一旦绑定了信号选择器位图中的某一位后，其他&lt;strong&gt;同步对象&lt;/strong&gt;
不可再绑定此位；&lt;/li&gt;
&lt;li&gt;非独占绑定：是指&lt;strong&gt;同步对象&lt;/strong&gt;一旦绑定了信号选择器位图中的某一位后，其他&lt;strong&gt;同步对象&lt;/strong&gt;
还可继续再绑定此位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同步对象&lt;/strong&gt;采用的绑定方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量：独占绑定&lt;/li&gt;
&lt;li&gt;条件量：非独占绑定&lt;/li&gt;
&lt;li&gt;事件标志：非独占绑定&lt;/li&gt;
&lt;li&gt;线程栅栏：非独占绑定&lt;/li&gt;
&lt;li&gt;信号选择器：非独占绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/sel.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
