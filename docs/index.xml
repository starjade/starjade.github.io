<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XWOS – 文档</title>
    <link>/docs/</link>
    <description>Recent content in 文档 on XWOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: GD32V移植说明</title>
      <link>/docs/note/soc/risc-v/gd32v/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/soc/risc-v/gd32v/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;GD32V相关的代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构描述层(ADL)：&lt;code&gt;xwcd/soc/riscv/nuclei/gcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CPU描述层(CDL)：&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SOC描述层(SDL)
&lt;ul&gt;
&lt;li&gt;GD32V：&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动流程&#34;&gt;启动流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;程序入口：&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/soc.S: soc_boot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中断&#34;&gt;中断&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;采用&lt;strong&gt;非向量模式&lt;/strong&gt;，统一的入口：&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/soc.S: soc_isr_entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用RISC-V标准寄存器&lt;code&gt;mscratch&lt;/code&gt;来实现ARM-Cortex-M类似的双栈结构的工作方式&lt;/li&gt;
&lt;li&gt;异常统一的入口&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/soc.S: soc_esr_entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源码：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_soc_irq.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_irq.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_irq.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/soc.S&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调度&#34;&gt;调度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;源码：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_skd.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_skd.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosasmimpl_skd.S&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;栈结构&#34;&gt;栈结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RISC-V要求栈必须按&lt;strong&gt;16字节&lt;/strong&gt;对齐；&lt;/li&gt;
&lt;li&gt;RISC-V只使用&lt;strong&gt;满递减栈&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;RISC-V的ABI文档中将寄存器分为两类：caller-saved和callee-saved。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;caller-saved栈结构&#34;&gt;caller-saved栈结构&lt;/h4&gt;
&lt;p&gt;从线程进入中断时，中断入口程序会自动将caller-saved寄存器保存到栈中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  __caller&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;saved (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;volatile&lt;/span&gt;) context__
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      t6 (x31) &lt;span style=&#34;color:#666&#34;&gt;----------&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      t5 (x30)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      t4 (x29)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      t3 (x28)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      a7 (x17)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      a6 (x16)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      msubm &lt;span style=&#34;color:#666&#34;&gt;--------+&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      mepc          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      mcause        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      mscratch      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a5 (x15)      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; RV32I
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a4 (x14)      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a3 (x13)      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a2 (x12)    RV32E &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a1 (x11)      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       a0 (x10)      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       t2 (x7)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       t1 (x6)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       t0 (x5)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       ra (x1)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  __caller&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;saved (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;volatile&lt;/span&gt;) context__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;callee-saved栈结构&#34;&gt;callee-saved栈结构&lt;/h4&gt;
&lt;p&gt;切换上下文时，需要保存与恢复callee-saved寄存器栈结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  __callee&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;saved (non&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;volatile&lt;/span&gt;) context__
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      s11 (x27)         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      s10 (x26)         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      s9 (x25)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s8 (x24)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s7 (x23)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s6 (x22)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s5 (x21)        RV32I
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s4 (x20)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s3 (x19)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s2 (x18)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       mstatus &lt;span style=&#34;color:#666&#34;&gt;------+&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s1 (x9)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       s0 (x8)     RV32E &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;  __callee&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;saved (non&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;volatile&lt;/span&gt;) context__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;滴答定时器&#34;&gt;滴答定时器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用RISC-V标准中定义的定时器来产生滴答中断。&lt;/li&gt;
&lt;li&gt;源码：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_syshwt.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwcd/soc/riscv/nuclei/gcc/bumblebee/gd32v/xwosimpl_syshwt.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: git-msg规范</title>
      <link>/docs/criterion/git-msg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/criterion/git-msg/</guid>
      <description>
        
        
        &lt;h2 id=&#34;格式&#34;&gt;格式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# [标题] &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): :emoji: &amp;lt;subject&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - type: feat, fix, perf, refactor, style, revert, docs, test,&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;#         chore, milestone, release, revision&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - scope: 可为空&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - subject: 以动词开始的短语，结尾无句号&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 页眉只占一行&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 每行总长度不超过72个字符（中文字符算2个字符）&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# [正文] 描述&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 为什么需要修改？&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 如何定位问题？&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 修改有什么副作用？&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 每行总长度不超过72个字符（中文字符算2个字符）&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# [脚注] &amp;lt;token:&amp;gt; &amp;lt;text&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 问题的ID或链接&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - BREAKING CHANGE（破坏API原型的修改）&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# - 每行总长度不超过72个字符（中文字符算2个字符）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;https://www.conventionalcommits.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;规范&#34;&gt;规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt;信息必须以一个可选的&lt;strong&gt;类别&lt;/strong&gt;作为前缀，&lt;strong&gt;类别&lt;/strong&gt;后面可以跟一个可选的
&lt;strong&gt;范围描述词&lt;/strong&gt;，&lt;strong&gt;范围描述词&lt;/strong&gt;需要放在英文的小括号内，之后可再跟一个可选的
英文的**!**表示有BREAKING CHANGE发生 (需要在最后面增加BREAKING CHANGE脚注)；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类别type&lt;/strong&gt;说明
&lt;ul&gt;
&lt;li&gt;feat: 新功能
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;新增 :sparkles:&lt;/li&gt;
&lt;li&gt;移除 :fire:&lt;/li&gt;
&lt;li&gt;升级依赖 :arrow_up:&lt;/li&gt;
&lt;li&gt;新增待改进的代码 :poop:&lt;/li&gt;
&lt;li&gt;新增.o或.a文件 :package:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fix: 修复BUG
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;修复重大BUG :ambulance:&lt;/li&gt;
&lt;li&gt;修复BUG :bug:&lt;/li&gt;
&lt;li&gt;修复警告 :rotating_light:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;perf: 性能优化
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;性能优化 :zap:&lt;/li&gt;
&lt;li&gt;移除死代码 :coffin:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;refactor: 重构代码
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;重大重构 :hammer:&lt;/li&gt;
&lt;li&gt;新增 :sparkles:&lt;/li&gt;
&lt;li&gt;重构 :recycle:&lt;/li&gt;
&lt;li&gt;移除 :fire:&lt;/li&gt;
&lt;li&gt;破坏性修改 :boom:&lt;/li&gt;
&lt;li&gt;增加log :loud_sound:&lt;/li&gt;
&lt;li&gt;移除log :mute:&lt;/li&gt;
&lt;li&gt;调整路径 :truck:&lt;/li&gt;
&lt;li&gt;依赖的第三方软件更新导致的API更新 :alien:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;style: 格式调整（删除行尾空格等）
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;:art:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revert: 回退提交
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;回退代码 :rewind:&lt;/li&gt;
&lt;li&gt;降级依赖 :arrow_down:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docs: 文档
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;修改.md文档 :book:&lt;/li&gt;
&lt;li&gt;修改源码中的注释 :bulb:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;test: 测试
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;:white_check_mark:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chore: 其他未归类的零碎事务
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;配置相关 :wrench:&lt;/li&gt;
&lt;li&gt;分支合并 :twisted_rightwards_arrows:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;milestone: 更新大版本号
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;:bookmark:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;release: 更新小版本号
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;:bookmark:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revision: 更新修订号
&lt;ul&gt;
&lt;li&gt;emoji:
&lt;ul&gt;
&lt;li&gt;:bookmark:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt;中的&lt;strong&gt;描述&lt;/strong&gt;与类别之间需要增加一个英文的冒号“:”与一个空格“ ”，然后增加
emoji符号，间隔一个空格“ ”，再增加&lt;strong&gt;描述&lt;/strong&gt;，最后不能有标点符号；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt;只能占一行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正文&lt;/strong&gt;与&lt;strong&gt;标题&lt;/strong&gt;间需要空一行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚注&lt;/strong&gt;与&lt;strong&gt;正文&lt;/strong&gt;间需要空一行；&lt;/li&gt;
&lt;li&gt;每一项&lt;strong&gt;脚注&lt;/strong&gt;需要有一个单词作为&lt;strong&gt;标识&lt;/strong&gt;，&lt;strong&gt;标识&lt;/strong&gt;中的空格用“-”代替，
后面跟一个“:”和一个空格“ ”作为间隔，也可以跟一个空格“ ”和“#”作为间隔，
之后再跟&lt;strong&gt;脚注&lt;/strong&gt;内容；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚注&lt;/strong&gt;可以有多行内容，直到遇到新的&lt;strong&gt;脚注标识&lt;/strong&gt;为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字符集&#34;&gt;字符集&lt;/h2&gt;
&lt;p&gt;全部使用&lt;strong&gt;utf-8&lt;/strong&gt;字符集。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#a2f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;LESSHARESET&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;设置字符集&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config i18n.commitencoding utf-8    &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 设置提交日志使用utf-8&lt;/span&gt;
git config i18n.logoutputencoding utf-8 &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 设置输出日志时使用utf-8&lt;/span&gt;
git config core.quotepath &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;         &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 中文路径使用utf-8&lt;/span&gt;
git config gui.encoding utf-8           &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 图形界面使用utf-8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ntfs文件系统的文件权限问题&#34;&gt;NTFS文件系统的文件权限问题&lt;/h2&gt;
&lt;p&gt;NTFS文件系统下，会导致文件的mode变为100644，且chmod无法修改，
可修改git配置忽略文件模式的变更。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config core.filemode &lt;span style=&#34;color:#a2f&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;行尾空格&#34;&gt;行尾空格&lt;/h2&gt;
&lt;p&gt;通常情况下，使用&#39;\n&#39;（LF）作为换行符，自动生成的代码可不遵守这个规则。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: libc</title>
      <link>/docs/user-manual/c-c&#43;&#43;/libc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/c-c&#43;&#43;/libc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwos内核对libc的依赖&#34;&gt;XWOS内核对libc的依赖&lt;/h2&gt;
&lt;p&gt;XWOS使用newlib作为默认的libc，具体依赖的情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string.h&lt;/code&gt;的&lt;code&gt;memset()&lt;/code&gt;、&lt;code&gt;memcpy()&lt;/code&gt;函数，
&lt;code&gt;xwmd/libc/newlibac/string.c&lt;/code&gt;中已提供覆盖newlib的实现；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdlib.h&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当配置了&lt;code&gt;XWMPCFG_SKD_THD_STDC_MM&lt;/code&gt;、&lt;code&gt;XWMPCFG_SKD_SWT_STDC_MM&lt;/code&gt;、
&lt;code&gt;XWMPCFG_SYNC_SEM_STDC_MM&lt;/code&gt;、&lt;code&gt;XWMPCFG_SYNC_COND_STDC_MM&lt;/code&gt;、
&lt;code&gt;XWMPCFG_SYNC_EVT_STDC_MM&lt;/code&gt;或&lt;code&gt;XWMPCFG_LOCK_MTX_STDC_MM&lt;/code&gt;时，
需要使用&lt;code&gt;stdlib.h&lt;/code&gt;的&lt;code&gt;malloc()&lt;/code&gt;和&lt;code&gt;free()&lt;/code&gt;函数动态创建和删除对象：&lt;/li&gt;
&lt;li&gt;低成本的应用中，可能会使用小内存的MCU，不能使用动态内存管理，配置中
也不能将&lt;code&gt;XWMPCFG_SKD_THD_STDC_MM&lt;/code&gt;、&lt;code&gt;XWMPCFG_SKD_SWT_STDC_MM&lt;/code&gt;、
&lt;code&gt;XWMPCFG_SYNC_SEM_STDC_MM&lt;/code&gt;、&lt;code&gt;XWMPCFG_SYNC_COND_STDC_MM&lt;/code&gt;、
&lt;code&gt;XWMPCFG_SYNC_EVT_STDC_MM&lt;/code&gt;和&lt;code&gt;XWMPCFG_LOCK_MTX_STDC_MM&lt;/code&gt;配置为&lt;code&gt;1&lt;/code&gt;，
此时，XWOS内核不再需要&lt;code&gt;stdlib.h&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inttypes.h&lt;/code&gt;、&lt;code&gt;stdint.h&lt;/code&gt;、&lt;code&gt;stddef.h&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;XWOS的&lt;a href=&#34;../../basic-promise#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34;&gt;基本类型&lt;/a&gt;基于标准C的基本类型进行定义：
&lt;code&gt;uint8_t&lt;/code&gt;、&lt;code&gt;int8_t&lt;/code&gt;、&lt;code&gt;uint16_t&lt;/code&gt;、&lt;code&gt;int16_t&lt;/code&gt;、
&lt;code&gt;uint32_t&lt;/code&gt;、&lt;code&gt;int32_t&lt;/code&gt;、&lt;code&gt;uint64_t&lt;/code&gt;、&lt;code&gt;int64_t&lt;/code&gt;、
&lt;code&gt;size_t&lt;/code&gt;、&lt;code&gt;ssize_t&lt;/code&gt;、等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdbool.h&lt;/code&gt;：bool类型；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdatomic.h&lt;/code&gt;：C11标准中原子操作内存屏障的定义，XWOS有自己的原子操作库，不依赖
C11标准中的原子操作函数，但用户也可以在自己的代码中使用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdarg.h&lt;/code&gt;：变参函数；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdio.h&lt;/code&gt;：&lt;code&gt;vsnprintf()&lt;/code&gt;，用于&lt;code&gt;xwos/lib/xwlog.c&lt;/code&gt;中格式化日志，若配置
&lt;code&gt;XWLIBCFG_LOG&lt;/code&gt;为&lt;code&gt;0&lt;/code&gt;，则不需要这个函数；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件操作&#34;&gt;文件操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 头文件&lt;code&gt;stdio.h&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;fopen()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;fclose()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;fread()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;fwrite()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;fseek()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;rename()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数由&lt;code&gt;xwmd/libc/newlibac/fops.c&lt;/code&gt;提供底层支持，&lt;code&gt;xwmd/libc/newlibac/fops.c&lt;/code&gt;
又依赖第三方软件&lt;a href=&#34;http://elm-chan.org/fsw/ff/00index_e.html&#34;&gt;&lt;code&gt;xwem/fs/fatfs&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;FatFs需要BSP中提供对块设备操作的支持，因此不同的电路板对文件操作的支持情况不一致，
可以参考快速开发指南获得说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../../quick-guide/stm32/weact-mini-stm32h750/&#34;&gt;WeActMiniStm32H750&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;FK429M1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;EmbedFireStm32H743&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32H743&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32F103Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32F407Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;MPC5607BCore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;S9KEAZ128Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Stm32F072HiXWOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Stm32F103HiXWOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;GD32F303CCTmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;GD32VF103Tmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;S32K144Evb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;LQRT1052Tmpl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态内存管理&#34;&gt;动态内存管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;stdlib.h&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;malloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;free()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;realloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;calloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;memalign()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;aligned_alloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;valloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;pvalloc()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数由&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;提供底层支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;覆盖了newlib中原有的实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;中的实现是对&lt;a href=&#34;../../mm/mempool&#34;&gt;mempool&lt;/a&gt;的封装，
mempool需要在&lt;code&gt;board_init()&lt;/code&gt;中选择内存设备进行初始化后才可使用；&lt;/li&gt;
&lt;li&gt;用户也可使用newlib提供的内存管理算法，只需将配置&lt;code&gt;XWMDCFG_libc_newlibac_mem&lt;/code&gt;改为&lt;code&gt;0&lt;/code&gt;即可；&lt;/li&gt;
&lt;li&gt;用户也可自己提供动态内存算法，只需改写&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;中的
函数&lt;code&gt;_malloc_r()&lt;/code&gt;、&lt;code&gt;_realloc_r()&lt;/code&gt;、&lt;code&gt;_calloc_r()&lt;/code&gt;、&lt;code&gt;_memalign_r()&lt;/code&gt;、
&lt;code&gt;_valloc_r()&lt;/code&gt;、&lt;code&gt;_pvalloc_r()&lt;/code&gt;、&lt;code&gt;_free_r()&lt;/code&gt;即可。&lt;/li&gt;
&lt;li&gt;由于各电路板硬件配置不一样，动态内存管理的函数支持情况也不一样，可以参考快速开发指南获得说明：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../quick-guide/stm32/weact-mini-stm32h750/&#34;&gt;WeActMiniStm32H750&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;FK429M1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;EmbedFireStm32H743&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32H743&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32F103Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;ATKStm32F407Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;MPC5607BCore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;S9KEAZ128Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Stm32F072HiXWOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Stm32F103HiXWOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;GD32F303CCTmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;GD32VF103Tmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;S32K144Evb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;LQRT1052Tmpl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setjmplongjmp&#34;&gt;setjmp/longjmp&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;setjmp()&lt;/code&gt;和&lt;code&gt;longjmp()&lt;/code&gt;函数对可实现在不同函数间的&lt;code&gt;goto&lt;/code&gt;。
用户应该使用头文件&lt;code&gt;xwos/lib/setjmp.h&lt;/code&gt;中代替标准C的头文件&lt;code&gt;setjmp.h&lt;/code&gt;，
并且也应该使用&lt;code&gt;xwlib_setjmp()&lt;/code&gt;与&lt;code&gt;xwlib_longjmp()&lt;/code&gt;函数对代替&lt;code&gt;setjmp()/longjmp()&lt;/code&gt;函数
&lt;code&gt;setjmp()&lt;/code&gt;和&lt;code&gt;longjmp()&lt;/code&gt;函数对。&lt;/p&gt;
&lt;h2 id=&#34;errno&#34;&gt;errno&lt;/h2&gt;
&lt;p&gt;XWOS重构了&lt;code&gt;errno&lt;/code&gt;的实现，将&lt;code&gt;errno&lt;/code&gt;改为每个线程的私有变量，
线程访问&lt;code&gt;errno&lt;/code&gt;时，只会访问自己的&lt;code&gt;errno&lt;/code&gt;。
用户应该使用&lt;code&gt;xwos/lib/errno.h&lt;/code&gt;替代libc中的&lt;code&gt;errno.h&lt;/code&gt;。
&lt;code&gt;errno&lt;/code&gt;的实现位于&lt;code&gt;xwmd/libc/newlibac/errno.c&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;其他libc的功能&#34;&gt;其他libc的功能&lt;/h2&gt;
&lt;p&gt;其他libc由newlib提供，用户可参考newlib的源码或资料获取帮助，不完全清单如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; libm: 数学库&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ctype: 字符类型&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; wchar: 多字节字符&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; iconv: 字符集转换&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; locale: 区域&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; search: 查找&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; argz: 字符串数组&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; time: 时间，暂时不支持，需要底层提供RTC的驱动&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SOC</title>
      <link>/docs/lua-manual/xwds/soc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwds/soc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;soc对象&#34;&gt;SOC对象&lt;/h2&gt;
&lt;p&gt;XWLUA不提供动态创建硬件的方法，硬件的创建与初始化都是在C语言中完成。因此，
XWLUA虚拟机只提供C语言的API，用于将硬件的对象注册到虚拟机中。&lt;/p&gt;
&lt;h2 id=&#34;c-api参考&#34;&gt;C API参考&lt;/h2&gt;
&lt;h4 id=&#34;xwlua_soc_register&#34;&gt;xwlua_soc_register&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_soc_register(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L,
                        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name,
                        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwds_soc &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; soc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：注册SOC对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) SOC在虚拟机中的变量名&lt;/li&gt;
&lt;li&gt;参数soc：(输入) SOC对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwlua_open_brdlibs&lt;/span&gt;(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L)
{
        xwlua_soc_register(L, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;stm32&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;stm32cube_soc_cb);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwlua_soc_unregister&#34;&gt;xwlua_soc_unregister&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_soc_unregister(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：删除SOC对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) SOC在虚拟机中的变量名&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: STM32移植说明</title>
      <link>/docs/note/soc/arm-m/stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/soc/arm-m/stm32/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;由于ST官方的STM32CubeMX能自动生成初始化芯片的代码，因此
XWOS中STM32的&lt;strong&gt;架构描述层(ADL)&lt;/strong&gt;、&lt;strong&gt;CPU描述层(CDL)&lt;/strong&gt;、&lt;strong&gt;SOC描述层(SDL)&lt;strong&gt;的代码几乎
是一致的，唯一区别是&lt;/strong&gt;链接脚本&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;链接脚本&#34;&gt;链接脚本&lt;/h2&gt;
&lt;p&gt;STM32的链接脚本也是按照可复用的方式设计的，分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDL中的链接脚本：描述各个段如何分布在镜像文件中
&lt;ul&gt;
&lt;li&gt;STM32F0：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m0/stm32/f0.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32G0：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m0p/stm32/g0.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32F1：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m3/stm32/f1.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32L1：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m3/stm32/l1.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32F4：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m4/stm32/f4.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32L4：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m4/stm32/l4.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32F7：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m7/stm32/f7.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32H7：&lt;code&gt;xwcd/soc/arm/v7m/gcc/m7/stm32/h7.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他SOC还在持续增加中&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BDL中的链接脚本：只描述内存区域
&lt;ul&gt;
&lt;li&gt;Stm32F072HiXWOS工程：&lt;code&gt;xwbd/Stm32F072HiXWOS/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stm32F103HiXWOS工程：&lt;code&gt;xwbd/Stm32F103HiXWOS/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32H743工程：&lt;code&gt;xwbd/ATKStm32H743/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EmbedFireStm32H743工程：&lt;code&gt;xwbd/EmbedFireStm32H743/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32F103Core工程：&lt;code&gt;xwbd/ATKStm32F103Core/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32F407Core工程：&lt;code&gt;xwbd/ATKStm32F407Core/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FK429M1工程：&lt;code&gt;xwbd/FK429M1/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WeActMiniStm32H750工程：&lt;code&gt;xwbd/WeActMiniStm32H750/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WeActMiniStm32H750Bootloader工程：&lt;code&gt;xwbd/WeActMiniStm32H750Bootloader/cfg/XuanWuOS.lds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他电路板还在持续增加中&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的电路板工程，只有Board中链接脚本中的Memory区域不同。&lt;/p&gt;
&lt;h3 id=&#34;lds的基本语法&#34;&gt;lds的基本语法&lt;/h3&gt;
&lt;h4 id=&#34;定义存储器区域&#34;&gt;定义存储器区域&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;&#34;&gt;名字&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;属性&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; org &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xxx, len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;, &lt;code&gt;org&lt;/code&gt;, &lt;code&gt;ORIGIN&lt;/code&gt;: 表示定义存储器的起始地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;, &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;: 表示定义存储器长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORIGIN(x)&lt;/code&gt;: 表示取存储器x的起始地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LENGTH(x)&lt;/code&gt;: 表示取存储器x的长度&lt;/li&gt;
&lt;li&gt;属性: &lt;code&gt;r&lt;/code&gt;表示读，&lt;code&gt;w&lt;/code&gt;表示写，&lt;code&gt;a&lt;/code&gt;表示可申请，&lt;code&gt;x&lt;/code&gt;表示可执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ivt_lmr--ivt_vmr&#34;&gt;&lt;code&gt;ivt_lmr&lt;/code&gt; &amp;amp; &lt;code&gt;ivt_vmr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;XWOS的中断向量表区域，其中&lt;strong&gt;LMR&lt;/strong&gt;表示中断向量的加载地址区域，
也即是中断向量在Flash中的存储位置，VMR表示中断向量的运行地址区域，
也即是上电运行时的中断向量的地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;strong&gt;LMR&lt;/strong&gt;与&lt;strong&gt;VMR&lt;/strong&gt;都指向Flash，且起始地址(org)与大小(len)完全一致，表示加载地址
就是运行地址，XWOS在初始化阶段不会对中断向量执行拷贝操作；&lt;/li&gt;
&lt;li&gt;如果&lt;strong&gt;VMR&lt;/strong&gt;指向RAM的某个地址，XWOS会在初始化阶段把Flash中的中断向量表拷贝到
&lt;strong&gt;VMR&lt;/strong&gt;指定的RAM内，并设置ARM的VTOR寄存器；&lt;/li&gt;
&lt;li&gt;需要注意ARM的VTOR寄存器低7位(0~6)必须保持为0，因此VMR的起始地址也必须满足
此规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;image_description_mr&#34;&gt;&lt;code&gt;image_description_mr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;此段中包含镜像文件的一些基本信息，例如起始位置，结尾标志位置等，可用在升级固件功能中。&lt;/p&gt;
&lt;h4 id=&#34;code_mr&#34;&gt;&lt;code&gt;code_mr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;存放代码和常量的地方。&lt;/p&gt;
&lt;h4 id=&#34;xwos_data_mr&#34;&gt;&lt;code&gt;xwos_data_mr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;存放xwos全局数据的地方，这些变量在定义时带有修饰符：&lt;code&gt;__xwos_data&lt;/code&gt;，此段可以
不存在，若不存在，需要在SDL中的链接脚本中将此段的数据放到&lt;code&gt;data_mr&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id=&#34;data_mr&#34;&gt;&lt;code&gt;data_mr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;存放全局变量的地方。当连接器ld安排完全局变量后，剩余的部分会交给XWOS
的&lt;strong&gt;默认的内核内存分配器&lt;/strong&gt;进行管理，用于为动态创建内核对象的API提供动态内存申请的接口。&lt;/p&gt;
&lt;h4 id=&#34;xwos_stk_mr&#34;&gt;&lt;code&gt;xwos_stk_mr&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;XWOS内核的栈内存，XWOS内核处理中断时会使用此内存作为函数的栈。&lt;/p&gt;
&lt;h2 id=&#34;soc的初始化&#34;&gt;SOC的初始化&lt;/h2&gt;
&lt;p&gt;STM32CubeMX生成的初始化代码，分别由&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;与&lt;code&gt;stm32cube_init()&lt;/code&gt;执行，
这两个函数在&lt;a href=&#34;../../../../user-manual/boot-flow&#34;&gt;启动流程&lt;/a&gt;中分别
被&lt;code&gt;board_lowlevel_init&lt;/code&gt;与&lt;code&gt;board_init()&lt;/code&gt;调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../../../quick-guide/stm32/env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx&#34;&gt;STM32CubeMX&lt;/h2&gt;
&lt;p&gt;STM32CubeMX工程是以&lt;strong&gt;玄武模块&lt;/strong&gt;中的&lt;strong&gt;电路板模块&lt;/strong&gt;的方式进行集成的，
详细可参考&lt;a href=&#34;../../../../user-manual/build-system.md&#34;&gt;构建系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;各个工程的STM32CubeMX工程如下（可在STM32CubeMX中打开）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stm32F072HiXWOS工程：&lt;code&gt;xwbd/Stm32F072HiXWOS/bm/stm32cube/cubemx/Stm32F072HiXWOS.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stm32F103HiXWOS工程：&lt;code&gt;xwbd/Stm32F103HiXWOS/bm/stm32cube/cubemx/Stm32F103HiXWOS.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32H743工程：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/ATKStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EmbedFireStm32H743工程：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/EmbedFireStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32F103Core工程：&lt;code&gt;xwbd/ATKStm32F103Core/bm/stm32cube/cubemx/ATKStm32F103Core.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ATKStm32F407Core工程：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/ATKStm32F407Core.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FK429M1工程：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/FK429M1.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WeActMiniStm32H750工程：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/WeActMiniStm32H750.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WeActMiniStm32H750Bootloader工程：&lt;code&gt;xwbd/WeActMiniStm32H750Bootloader/bm/stm32cube/cubemx/WeActMiniStm32H750Bootloader.ioc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断优先级&#34;&gt;中断优先级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为&lt;strong&gt;0&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../../../quick-guide/stm32/env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;中断向量表&#34;&gt;中断向量表&lt;/h3&gt;
&lt;p&gt;STM32CubeMX生成的代码中断向量表是放在&lt;code&gt;startup.s&lt;/code&gt;中，XWOS并不使用这个文件，因此需要
另外增加中断向量表。STM32型号太多，一个一个编辑工作量巨大，但观察STM32寄存器定义的
头文件（例如：&lt;code&gt;stm32h750xx.h&lt;/code&gt;），可以发现&lt;code&gt;IRQn_Type&lt;/code&gt;这个枚举类型，其中列举了
所有的中断号，因此可使用脚本自动生成中断向量表的代码。&lt;/p&gt;
&lt;p&gt;本项目中提供了一个Emacs-Lisp脚本&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el&lt;/code&gt;来完成这项工作，
用法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/电路板名称/bm/stm32cube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;需要注意脚本指定的路径为&lt;code&gt;cubemx&lt;/code&gt;的父目录&lt;code&gt;stm32cube&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;脚本执行完成后，会生成名为&lt;code&gt;IVT&lt;/code&gt;的文件夹；&lt;/li&gt;
&lt;li&gt;此脚本能自动获取芯片型号等信息；&lt;/li&gt;
&lt;li&gt;生成的两个&lt;code&gt;.c&lt;/code&gt;文件需要写入&lt;code&gt;xwmo.mk&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;CUBEMX_CSRCS&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; IVT/isr.c
&lt;span style=&#34;color:#b8860b&#34;&gt;CUBEMX_CSRCS&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; IVT/ivt.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xwac&#34;&gt;xwac&lt;/h3&gt;
&lt;p&gt;文件夹&lt;code&gt;xwac&lt;/code&gt;中存放的都是适配性质的代码，是连接STM32CubeMX HAL库与XWOS的纽带。
文件夹名中的&lt;code&gt;ac&lt;/code&gt;是&lt;code&gt;Adaptation Code&lt;/code&gt;的缩写。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fatfs&lt;/code&gt;：fatfs底层设备驱动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newlib&lt;/code&gt;：为标准C库提供底层的支持
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mem.c&lt;/code&gt;：&lt;code&gt;malloc()&lt;/code&gt;系列函数的内存池&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdio.c&lt;/code&gt;：定义&lt;code&gt;stdin&lt;/code&gt;的输入设备，&lt;code&gt;stdout&lt;/code&gt;、&lt;code&gt;stderr&lt;/code&gt;的输出设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwds&lt;/code&gt;：STM32的设备栈&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwlib&lt;/code&gt;：为XWOS通用库提供底层硬件支持，例如使用硬件CRC模块加速CRC运算、定义Log的输出设备等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos&lt;/code&gt;：XWOS内核的Hook函数&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 位图</title>
      <link>/docs/lua-manual/xwlib/bitmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwlib/bitmap/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwlibbmp&#34;&gt;&lt;strong&gt;包：xwlib.bmp&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwlibbmpnewbits&#34;&gt;xwlib.bmp.new(bits)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个位图数据结构&lt;/li&gt;
&lt;li&gt;参数bits：(number, 输入)位图中包含位的数量&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的位图&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运算符&#34;&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：位图支持部分Lua运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;位与-&#34;&gt;&lt;strong&gt;位与 &amp;amp;&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：两个位图按位进行与运算&lt;/li&gt;
&lt;li&gt;说明：要求两个位图的位数相同。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图2&lt;/span&gt;
mybmp2:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填清0&lt;/span&gt;
mybmp2:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
mybmp3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mybmp1 &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; mybmp2 &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- mybmp1与mybmp2按位进行与运算&lt;/span&gt;
print(mybmp3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000000000&lt;/span&gt;FF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;位或-&#34;&gt;&lt;strong&gt;位或 |&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：两个位图按位进行或运算&lt;/li&gt;
&lt;li&gt;说明：要求两个位图的位数相同。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填清0&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图2&lt;/span&gt;
mybmp2:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填清0&lt;/span&gt;
mybmp2:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
mybmp3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mybmp1 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; mybmp2 &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- mybmp1与mybmp2按位进行与运算&lt;/span&gt;
print(mybmp3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000000000&lt;/span&gt;FF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;位异或-&#34;&gt;&lt;strong&gt;位异或 ~&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：两个位图按位进行异或运算&lt;/li&gt;
&lt;li&gt;说明：要求两个位图的位数相同。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图2&lt;/span&gt;
mybmp2:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填清0&lt;/span&gt;
mybmp2:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
mybmp3 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mybmp1 &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; mybmp2 &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- mybmp1与mybmp2按位进行与运算&lt;/span&gt;
print(mybmp3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFF00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;位取反-&#34;&gt;&lt;strong&gt;位取反 ~&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：位图按位取反&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;mybmp1
print(mybmp1)
print(mybmp2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFFFF
&lt;span style=&#34;color:#666&#34;&gt;0000000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;计算长度&#34;&gt;**计算长度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：计算位图的长度&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
print(&lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;比较相等-&#34;&gt;&lt;strong&gt;比较相等 ==&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;说明：要求两个位图的位数相同。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图2&lt;/span&gt;
mybmp2:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; (mybmp1 &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; mybmp2) &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;then&lt;/span&gt;
  print(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;equal&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类bmp&#34;&gt;&lt;strong&gt;类：bmp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：位图类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bmpfill&#34;&gt;bmp:fill()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将位图全部填1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFFFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpzero&#34;&gt;bmp:zero()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将位图全部清0&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充0&lt;/span&gt;
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;0000000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpassignopd&#34;&gt;bmp:assign(opd)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：赋值位图&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，目的位图对象&lt;/li&gt;
&lt;li&gt;参数opd：(userdata, 输入)源位图对象&lt;/li&gt;
&lt;li&gt;说明：
&lt;ul&gt;
&lt;li&gt;此函数将位图opd中的内容拷贝到位图bmp中，属于深拷贝&lt;/li&gt;
&lt;li&gt;此函数与&lt;code&gt;bmp = opd&lt;/code&gt;不同，&lt;code&gt;bmp = opd&lt;/code&gt;只是将引用bmp指向opd，bmp
原来的对象如果没有被别的引用持有，将会被虚拟机回收掉，属于浅拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图1&lt;/span&gt;
mybmp1:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 全部填充1&lt;/span&gt;
mybmp2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图2&lt;/span&gt;
mybmp2:assign(mybmp1)
print(mybmp1)
print(mybmp2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpweight&#34;&gt;bmp:weight()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：计算位图中1的个数&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;返回值：(number)位图中1的个数&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第10位填充1&lt;/span&gt;
print(mybmp:weight())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpffs&#34;&gt;bmp:ffs()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从位图的最低位开始，查找第一个被置1的位的序号&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;返回值：(number)序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的，返回0表示没有找到1。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第10位填充1&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第11位填充1&lt;/span&gt;
print(mybmp:ffs())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpffz&#34;&gt;bmp:ffz()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从位图的最低位开始，查找第一个被清0的位的序号&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;返回值：(number)序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的，返回0表示没有找到0。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第10位填充1&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第11位填充1&lt;/span&gt;
print(mybmp:ffz())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpfls&#34;&gt;bmp:fls()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从位图的最高位开始，查找第一个被置1的位的序号&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;返回值：(number)序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的，返回0表示没有找到1。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第10位填充1&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第11位填充1&lt;/span&gt;
print(mybmp:fls())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpflz&#34;&gt;bmp:flz()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从位图的最高位开始，查找第一个被清0的位的序号&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;返回值：(number)序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的，返回0表示没有找到0。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第10位填充1&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第11位填充1&lt;/span&gt;
print(mybmp:flz())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmps1ipos1-pos2-&#34;&gt;bmp:s1i(pos1[, pos2, &amp;hellip;])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：依次将位图中给定位置的位设置为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数pos1：(number, 输入)位的序号&lt;/li&gt;
&lt;li&gt;可选参数pos2, &amp;hellip;：(number, 输入)剩余位的序号列表&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填充1&lt;/span&gt;
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;000000000000020&lt;/span&gt;B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmps1mmsk&#34;&gt;bmp:s1m(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将位图中的掩码部分全部设置为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1m(mymsk)
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;000000000000020&lt;/span&gt;B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpc0ipos1-pos2-&#34;&gt;bmp:c0i(pos1[, pos2, &amp;hellip;])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：依次将位图中给定位置的位设置为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)位的序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 填1&lt;/span&gt;
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位清0&lt;/span&gt;
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFDF4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpc0mmsk&#34;&gt;bmp:c0m(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将位图中的掩码部分全部设置为0&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 填1&lt;/span&gt;
mybmp:c0m(mymsk)
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;FFFFFFFFFFFFFDF4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpx1ipos1-pos2-&#34;&gt;bmp:x1i(pos1[, pos2, &amp;hellip;])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：依次将位图中给定位置的位翻转&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)位的序号&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:x1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位翻转&lt;/span&gt;
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;000000000000020&lt;/span&gt;B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpx1mmsk&#34;&gt;bmp:x1m(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将位图中的掩码部分全部翻转&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:x1m(mymsk)
print(mybmp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;000000000000020&lt;/span&gt;B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpt1ipos&#34;&gt;bmp:t1i(pos)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试位图中的某个位是否为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)位的序号&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：1&lt;/li&gt;
&lt;li&gt;false：0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;说明：为了和Lua语言保持一致，序号从1开始的。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 填1&lt;/span&gt;
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位清0&lt;/span&gt;
print(mybmp:t1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))
print(mybmp:t1i(&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpt1mamsk&#34;&gt;bmp:t1ma(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试位图中的掩码部分是否全部为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：全部为1&lt;/li&gt;
&lt;li&gt;false：不是全部为1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2位填1&lt;/span&gt;
print(mybmp:t1ma(mymsk))
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第4, 10位填1&lt;/span&gt;
print(mybmp:t1ma(mymsk))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpt1momsk&#34;&gt;bmp:t1mo(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试位图中的掩码部分是否至少有1位为1&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：至少有1位为1&lt;/li&gt;
&lt;li&gt;false：全部为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2位填1&lt;/span&gt;
print(mybmp:t1mo(mymsk))
mybmp:s1i(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第4, 10位填1&lt;/span&gt;
print(mybmp:t1mo(mymsk))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpt0mamsk&#34;&gt;bmp:t0ma(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试位图中的掩码部分是否全部为0&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：全部为0&lt;/li&gt;
&lt;li&gt;false：不是全部为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 填1&lt;/span&gt;
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2位清0&lt;/span&gt;
print(mybmp:t0ma(mymsk))
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第4, 10位清0&lt;/span&gt;
print(mybmp:t0ma(mymsk))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bmpt0momsk&#34;&gt;bmp:t0mo(msk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试位图中的掩码部分是否至少有1位为0&lt;/li&gt;
&lt;li&gt;参数bmp：(userdata, 输入)类成员函数的this参数，位图对象&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)掩码位图&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：至少有1位为0&lt;/li&gt;
&lt;li&gt;false：全部为1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybmp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图&lt;/span&gt;
mymsk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwlib.bmp.new(&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建一个包含64个位的位图掩码&lt;/span&gt;
mymsk:zero() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 清0&lt;/span&gt;
mymsk:s1i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2, 4, 10位填1&lt;/span&gt;
mybmp:fill() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 填1&lt;/span&gt;
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第1, 2位清0&lt;/span&gt;
print(mybmp:t0mo(mymsk))
mybmp:c0i(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 第4, 10位清0&lt;/span&gt;
print(mybmp:t0mo(mymsk))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 位操作库</title>
      <link>/docs/user-manual/xwlib/xwbop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/xwlib/xwbop/</guid>
      <description>
        
        
        &lt;h2 id=&#34;位操作&#34;&gt;位操作&lt;/h2&gt;
&lt;p&gt;XWOS提供了位操作模板库，&lt;a href=&#34;../../basic-promise#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34;&gt;基本类型&lt;/a&gt;中定义的
各种&lt;strong&gt;非函数指针类型&lt;/strong&gt;都可使用位操作。位操作函数模板包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbop_s1m()&lt;/code&gt;：将数据掩码部分的位全部置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_c0m()&lt;/code&gt;：将数据掩码部分的位全部清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_x1m()&lt;/code&gt;：将数据掩码部分的位全部翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_rbit()&lt;/code&gt;：将数据的位镜面翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_re()&lt;/code&gt;：将数据的大小端翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_ffs()&lt;/code&gt;：在数据中从最低位起查找第一个被置1的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_fls()&lt;/code&gt;：在数据中从最高位起查找第一个被置1的位1的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_ffz()&lt;/code&gt;：在数据中从最低位起查找第一个被清0的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_flz()&lt;/code&gt;：在数据中从最高位起查找第一个被清0的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbop_weight()&lt;/code&gt;：统计数据中1的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有位操作函数的第一个参数均为&lt;a href=&#34;../../basic-promise#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34;&gt;基本类型&lt;/a&gt;，第二个参数
是数据或数据的指针，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwssq_t idx;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 从最低位开始查找&amp;#34;xwu32_t&amp;#34;类型的数据&amp;#34;0&amp;#34;中第一个被置1的位，结果为-1 */&lt;/span&gt;
idx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwbop_ffs(xwu32_t, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 从最低位开始查找&amp;#34;xwu32_t&amp;#34;类型的数据&amp;#34;0xF0&amp;#34;中第一个被置1的位，结果为4 */&lt;/span&gt;
idx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwbop_ffs(xwu32_t, &lt;span style=&#34;color:#666&#34;&gt;0xF0&lt;/span&gt;);

 &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 将&amp;#34;xwu32_t&amp;#34;类型的数据&amp;#34;0xAA&amp;#34;进行镜像翻转，结果为0x55 */&lt;/span&gt;
xwu32_t rdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwbop_rbit(xwu32_t, &lt;span style=&#34;color:#666&#34;&gt;0xAA&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;位图操作&#34;&gt;位图操作&lt;/h2&gt;
&lt;p&gt;XWOS提供了基本类型&lt;code&gt;xwbmp_t&lt;/code&gt;，用于定义位图，位图是&lt;code&gt;xwbmp_t&lt;/code&gt;的数组。
用户可以声明任意位数的位图，XWOS提供了函数集方便用户操作位图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_declare()&lt;/code&gt;：声明位图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_assign()&lt;/code&gt;：赋值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_cmp()&lt;/code&gt;：比较两个位图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_s1all()&lt;/code&gt;：所有位置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_c0all()&lt;/code&gt;：所有位清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_s1i()&lt;/code&gt;：将位图中某位置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_s1m()&lt;/code&gt;：将位图中掩码部分置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_c0i()&lt;/code&gt;：将位图中某位清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_c0m()&lt;/code&gt;：将位图中掩码部分清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_x1i()&lt;/code&gt;：将位图中某位翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_x1m()&lt;/code&gt;：将位图中掩码部分翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t1i()&lt;/code&gt;：测试位图中的某位是否为1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t1ma()&lt;/code&gt;：测试位图中掩码部分是否全部为1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t1ma_then_c0m()&lt;/code&gt;：测试位图中掩码部分是否全部为1，如果是，就将掩码部分全部清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t1mo()&lt;/code&gt;：测试位图中掩码部分是否至少有一位为1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t1mo_then_c0m()&lt;/code&gt;：测试位图中掩码部分是否至少有一位为1，如果是，就将掩码部分全部清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t0ma()&lt;/code&gt;：测试位图中掩码部分是否全部为0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t0ma_then_s1m()&lt;/code&gt;：测试位图中掩码部分是否全部为0，如果是，就将掩码部分全部置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t0mo()&lt;/code&gt;：测试位图中掩码部分是否至少有一位为0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_t0mo_then_s1m()&lt;/code&gt;：测试位图中掩码部分是否至少有一位为0，如果是，就将掩码部分全部置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_not()&lt;/code&gt;：非运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_and()&lt;/code&gt;：与运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_or()&lt;/code&gt;：或运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_xor()&lt;/code&gt;：异或运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_ffs()&lt;/code&gt;：从最低位起查找第一个被置1的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_fls()&lt;/code&gt;：从最高位起查找第一个被置1的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_ffz()&lt;/code&gt;：从最低位起查找第一个被清0的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_flz()&lt;/code&gt;：从最高位起查找第一个被清0的位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpop_weight()&lt;/code&gt;：统计1的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/lib/xwbop.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 信号量</title>
      <link>/docs/lua-manual/xwos/sync/sem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/sync/sem/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwossem&#34;&gt;&lt;strong&gt;包：xwos.sem&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwossemnewval-max&#34;&gt;&lt;code&gt;xwos.sem.new(val, max)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个信号量&lt;/li&gt;
&lt;li&gt;参数val：(number, 输入)信号量的初始值&lt;/li&gt;
&lt;li&gt;参数max：(number, 输入)信号量的最大值&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysem &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.sem.new(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 创建初始值为0，最大值为10的信号量&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;类semsp&#34;&gt;&lt;strong&gt;类：semsp&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;说明：信号量对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semspbindsel&#34;&gt;&lt;code&gt;semsp:bind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：绑定信号量对象到信号选择器&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ECHRNG: 位置超出范围&lt;/li&gt;
&lt;li&gt;-EALREADY: 同步对象已经绑定到事件对象&lt;/li&gt;
&lt;li&gt;-EBUSY: 通道已经被其他同步对象独占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semspunbindsel&#34;&gt;&lt;code&gt;semsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑信号量对象&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semspfreeze&#34;&gt;&lt;code&gt;semsp:freeze()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解冻信号量&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-EALREADY：信号量已被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semspthaw&#34;&gt;&lt;code&gt;semsp:thaw()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解冻信号量&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-EALREADY：信号量未被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semsppost&#34;&gt;&lt;code&gt;semsp:post()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：发布信号量&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENEGATIVE：信号量已被冻结&lt;/li&gt;
&lt;li&gt;-ERANGE：信号量的值已经最大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semspwaitop&#34;&gt;&lt;code&gt;semsp:wait([op])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待并获取信号量&lt;/li&gt;
&lt;li&gt;参数semsp：(userdata, 输入)类成员函数的this参数，信号量对象的强引用指针&lt;/li&gt;
&lt;li&gt;可选参数op：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;t&amp;rdquo;：(string, 输入)尝试等待并获取信号量，若信号量的值小于等于0，立即返回，
不会等待；&lt;/li&gt;
&lt;li&gt;time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-ENODATA：尝试失败，仅当存在可选参数&amp;quot;t&amp;quot;时才会出现此错误值&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 信号量</title>
      <link>/docs/user-manual/sync/sem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/sem/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;信号量通常用于不同代码上下文间的同步，使用PV原语进行操作，
属于操作系统比较底层的同步机制。XWOS内核的信号量有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道信号量(PLSEM)：对所有阻塞在其等待队列中的线程按照先进先出(FIFO)的策略调度，
即当信号量可用时，最先进入等待队列中的线程将优先获得信号量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时信号量(RTSEM)：对所有阻塞在其等待队列中的线程按照优先级进行调度，即高优先级
的线程总是最先获得信号量，同优先级的线程按先进先出(FIFO)的策略调度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作系统抽象层(OSAL)的API只封装了一种信号量，当系统配置文件中同时
配置了管道信号量与实时信号量时，优先使用实时信号量。&lt;/p&gt;
&lt;h2 id=&#34;信号量的创建初始化与删除销毁&#34;&gt;信号量的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;信号量支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_sem_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_sem_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_sem_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_sem_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的p操作&#34;&gt;信号量的P操作&lt;/h2&gt;
&lt;p&gt;P操作是指发布信号量，使得信号量的计数器加1，同时会唤醒信号量等待队列中的一个线程。
被唤醒的线程会进行V操作，取走信号量中的一个信号，使得信号量的计数器减1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_post()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的v操作&#34;&gt;信号量的V操作&lt;/h2&gt;
&lt;p&gt;V操作是指取走信号量中的一个信号，使得信号量的计数器减1，XWOS提供四种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_trywait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只是测试一下信号量，如果失败，就返回&lt;code&gt;-ENODATA&lt;/code&gt;，不会阻塞调用的线程；&lt;/li&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_wait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞，并有时间限制；&lt;/li&gt;
&lt;li&gt;超时的参数用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;超时后阻塞状态解除，并以&lt;code&gt;-ETIMEDOUT&lt;/code&gt;返回；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;调用的线程若无法获取信号量，就会被阻塞；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态不可被中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的中断操作&#34;&gt;信号量的中断操作&lt;/h2&gt;
&lt;p&gt;中断操作是指XWOS在处理内核事件时中断线程的**“阻塞”**或**“睡眠”**，
强制使其进入**就绪**状态。&lt;code&gt;xwos_sem_wait()&lt;/code&gt;和&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;
会返回&lt;code&gt;-EINTR&lt;/code&gt;，但&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;不能被中断。
相关的内核事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统休眠；&lt;/li&gt;
&lt;li&gt;线程准备从一个CPU迁移到另一个CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量的冻结与解冻操作&#34;&gt;信号量的冻结与解冻操作&lt;/h2&gt;
&lt;p&gt;冻结信号量是指不允许信号量被发布（P操作），但可以被测试（V操作）。
使用API&lt;code&gt;xwos_sem_wait()&lt;/code&gt;、&lt;code&gt;xwos_sem_timedwait()&lt;/code&gt;与&lt;code&gt;xwos_sem_wait_unintr()&lt;/code&gt;
测试已冻结信号量的线程都将被阻塞。
解冻后，信号量的计数器重新从0开始计数，并可以重新开始进行发布（P）操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结：&lt;code&gt;xwos_sem_freeze()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解冻：&lt;code&gt;xwos_sem_thaw()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑选择器&#34;&gt;绑定与解绑选择器&lt;/h2&gt;
&lt;p&gt;可以将信号量绑定到一个特定的&lt;strong&gt;信号选择器&lt;/strong&gt;上。当对信号量进行V操作时，
可向信号选择器发送一个&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_sem_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_sem_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/sem.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 多线程</title>
      <link>/docs/note/newlib/multi-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/multi-thread/</guid>
      <description>
        
        
        &lt;h2 id=&#34;编译配置&#34;&gt;编译配置&lt;/h2&gt;
&lt;p&gt;编译newlib时，需要增加配置&lt;code&gt;--enable-newlib-multithread&lt;/code&gt;开启多线程的支持，默认是开启的。&lt;/p&gt;
&lt;h2 id=&#34;_reent结构体&#34;&gt;_reent结构体&lt;/h2&gt;
&lt;p&gt;Newlib中的头文件&lt;code&gt;reent.h&lt;/code&gt;中，定义了结构体&lt;code&gt;struct _reent&lt;/code&gt;，用于支持多线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，Newlib定义了一个全局的结构体变量&lt;code&gt;impure_data&lt;/code&gt;，
此结构体定义在&lt;code&gt;newlib/libc/reent/impure.c&lt;/code&gt;，并使用宏&lt;code&gt;_REENT&lt;/code&gt;表示它；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct _reent&lt;/code&gt;定义了一些C标准的变量，例如&lt;code&gt;errno&lt;/code&gt;、&lt;code&gt;stdin&lt;/code&gt;、&lt;code&gt;stdout&lt;/code&gt;、&lt;code&gt;stderr&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;为了支持多线程访问各自的&lt;code&gt;errno&lt;/code&gt;、&lt;code&gt;stdin&lt;/code&gt;、&lt;code&gt;stdout&lt;/code&gt;和&lt;code&gt;stderr&lt;/code&gt;等，需要在
线程对象结构体中增加结构体&lt;code&gt;struct _reent&lt;/code&gt;的成员；&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;struct _reent&lt;/code&gt;体积过大，玄武OS自己将实现&lt;code&gt;struct _reent&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Newlib中除了提供C标准中的函数，还定义带后缀&lt;code&gt;_r&lt;/code&gt;版本的函数，例如&lt;code&gt;_read_r()&lt;/code&gt;，
其中多一个参数&lt;code&gt;struct _reent *&lt;/code&gt;用于区分不同的线程。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 开发环境</title>
      <link>/docs/quick-guide/gd32/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/gd32/env/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ubuntu-2004&#34;&gt;ubuntu-20.04&lt;/h2&gt;
&lt;h3 id=&#34;基本工具&#34;&gt;基本工具&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;../../../user-manual/build-system#%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;用户手册-构建系统-编译环境设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;pyocd&#34;&gt;pyocd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用途：为gdb提供调试服务&lt;/li&gt;
&lt;li&gt;安装方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt install python3
pip3 install pyocd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ide&#34;&gt;IDE&lt;/h3&gt;
&lt;h4 id=&#34;安装ide&#34;&gt;安装IDE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/iot.embed-cdt/downloads&#34;&gt;Eclipse Embedded&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装插件&#34;&gt;安装插件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单&amp;quot;Help –&amp;gt; Install New Software…&amp;quot;；&lt;/li&gt;
&lt;li&gt;选择&amp;quot;Embedded C/C++ v6.x Updates&amp;quot;，安装工具集：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Eclipse-Install-Plugins.png&#34; alt=&#34;img&#34; title=&#34;安装插件&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建工程&#34;&gt;创建工程&lt;/h2&gt;
&lt;h3 id=&#34;工程模板&#34;&gt;工程模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GD32F103
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/GD32F103RBTmpl.git&#34;&gt;https://gitee.com/xwos/GD32F103RBTmpl.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/GD32F103RBTmpl.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;gd32f303
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/GD32F303CCTmpl.git&#34;&gt;https://gitee.com/xwos/GD32F303CCTmpl.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/GD32F303CCTmpl.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;工程改名&#34;&gt;工程改名&lt;/h3&gt;
&lt;p&gt;若需要对工程改名，以&lt;code&gt;GD32F103RBTmpl&lt;/code&gt;为例，应该在导入工程前修改以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件夹名由&lt;code&gt;GD32F103RBTmpl&lt;/code&gt;改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;文件&lt;code&gt;brd/cfg/XuanWuOS.h&lt;/code&gt;中，将&lt;code&gt;XuanWuOS_CFG_BOARD&lt;/code&gt;的定义改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;隐藏文件&lt;code&gt;.cproject&lt;/code&gt;中，将所有的&lt;code&gt;GD32F103RBTmpl&lt;/code&gt;都替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;隐藏文件&lt;code&gt;.project&lt;/code&gt;中，将所有的&lt;code&gt;GD32F103RBTmpl&lt;/code&gt;都替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;隐藏文件&lt;code&gt;.settings&lt;/code&gt;中，将所有文件中的所有的&lt;code&gt;GD32F103RBTmpl&lt;/code&gt;都替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;导入工程&#34;&gt;导入工程&lt;/h3&gt;
&lt;p&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;工程设置&#34;&gt;工程设置&lt;/h3&gt;
&lt;h4 id=&#34;编译设置&#34;&gt;编译设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;Project –&amp;gt; Properties&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Eclipse-Properties-C_C++_Build-Behavior.png&#34; alt=&#34;img&#34; title=&#34;编译设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Eclipse-Properties-C_C++_Build-Settings.png&#34; alt=&#34;img&#34; title=&#34;编译行为&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;环境变量设置&#34;&gt;环境变量设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单&lt;strong&gt;Project –&amp;gt; Properties –&amp;gt; C/C++ Build –&amp;gt; Environment&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Restore Defaults&lt;/strong&gt;先恢复一次默认设置。&lt;/li&gt;
&lt;li&gt;设置：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;: &lt;code&gt;../${ConfigName}&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;: &lt;code&gt;1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;: &lt;strong&gt;Debug&lt;/strong&gt;配置为&lt;code&gt;1&lt;/code&gt;，&lt;strong&gt;Release&lt;/strong&gt;配置为&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Eclipse-Properties-C_C++_Build-Environment.png&#34; alt=&#34;img&#34; title=&#34;Build-Env配置&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改芯片配置&#34;&gt;修改芯片配置&lt;/h2&gt;
&lt;p&gt;模板中的默认芯片可能与用户的不一样，需要按实际情况进行修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brd/bdl/bdl.mk&lt;/code&gt;：根据芯片密度，修改定义。按照官方手册：
&lt;ul&gt;
&lt;li&gt;GD32F101xx和GD32F103xx的闪存存储器容量16K到128K字节之间的产品称作中密度产品，
需要修改成&lt;code&gt;-DGD32F10X_MD&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;GD32F101xx和GD32F103xx的闪存存储器容量256K到512K字节之间的产品称作高密度产品，
需要修改成&lt;code&gt;-DGD32F10X_HD&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;GD32F101xx和GD32F103xx的闪存存储器容量大于512K节的产品称作超高密度产品，
需要修改成&lt;code&gt;-DGD32F10X_XD&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;GD32F105xx和GD32F107xx微控制器称作互联型产品，
需要修改成&lt;code&gt;-DGD32F10X_CL&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brd/cfg/XuanWuOS.lds&lt;/code&gt;：根据芯片的Flash与RAM情况，调整memory的参数：
&lt;ul&gt;
&lt;li&gt;中断向量表、Image信息块以及代码区加起来不能超过Flash区域；&lt;/li&gt;
&lt;li&gt;数据区、中断栈加起来不能超过RAM区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MEMORY {
        flash_mr (rx): org = 0x08000000, len = 128k /* Flash的首地址与大小 */
        ocram_mr (rwx): org = 0x20000000, len = 20k /* RAM的首地址与大小 */

        /* 中断向量表 */
        /* 将加载地址和运行地址配置为相同表示中断向量表不需要从Flash中拷贝到
           内存 */
        vctbl_lmr (rx): org = 0x08000000, len = 1024 /* 加载地址 */
        vctbl_vmr (rw): org = 0x08000000, len = 1024 /* 运行地址 */

        /* Image信息块 */
        /* XWOS会在bin文件中增加一个数据块，记录Image的基本信息，
           这一块信息放在中断向量表 */
        image_description_mr (rx): org = 0x08000400, len = 1k /* image description */

        /* 代码区 */
        /* 所有的可执行代码 */
        code_mr (rx): org = 0x08000800, len = 126k /* .xwos.vctbl &amp;amp;
                                                      .xwos.init.text &amp;amp;
                                                      .xwos.init.rodata &amp;amp;
                                                      .xwos.exit.text &amp;amp;
                                                      .xwos.exit.rodata &amp;amp;
                                                      .xwos.isr.text &amp;amp;
                                                      .xwos.text &amp;amp;
                                                      .xwos.rodata &amp;amp;
                                                      .text &amp;amp;
                                                      .rodata */

        /* 数据区 */
        /* 全局变量、栈、堆 */
        data_mr (arw): org = 0x20000000, len = 18k /* .data, .bss &amp;amp; .heap */

        /* 中断栈 */
        /* 剩下的内存留给处理器执行中断函数时使用 */
        xwos_stk_mr (rw): org = 0x20004800, len = 2k /* xwos stack */
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译工程&#34;&gt;编译工程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Eclipse-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;h3 id=&#34;设置daplink仿真器的访问权限&#34;&gt;设置DAPLink仿真器的访问权限&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo gedit /etc/udev/rules.d/81-daplink.rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入下面内容后，保存退出。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ATTRS{idProduct}==&amp;quot;f001&amp;quot;, ATTRS{idVendor}==&amp;quot;0d28&amp;quot;, MODE=&amp;quot;666&amp;quot;
ATTRS{idProduct}==&amp;quot;f002&amp;quot;, ATTRS{idVendor}==&amp;quot;0d28&amp;quot;, MODE=&amp;quot;666&amp;quot;
ATTRS{idProduct}==&amp;quot;2722&amp;quot;, ATTRS{idVendor}==&amp;quot;0d28&amp;quot;, MODE=&amp;quot;666&amp;quot;
ATTRS{idProduct}==&amp;quot;0204&amp;quot;, ATTRS{idVendor}==&amp;quot;0d28&amp;quot;, MODE=&amp;quot;666&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启系统或使用下面命令使得配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo udevadm control --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置pyocd使用daplink调试&#34;&gt;设置pyocd，使用DAPLink调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Main选择卡：选择工程，设置ELF文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;pyocd-Main.png&#34; alt=&#34;img&#34; title=&#34;Main&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debugger选择卡
&lt;ul&gt;
&lt;li&gt;需要设置pyocd与arm-none-eabi-gdb两个程序的路径，如果用户
是按照之前的指南安装环境，这两个程序可在系统路径中搜索到；&lt;/li&gt;
&lt;li&gt;需要设定复位的方式，若仿真器与目标板之间由Reset连线，可选择Hardware，否则
选择Software(SYSRESETREQ)；&lt;/li&gt;
&lt;li&gt;需要通过&amp;ndash;pack选项为pyocd指定DFP的路径，DFP可在&lt;a href=&#34;http://www.gd32mcu.com/cn/download&#34;&gt;GD的官网&lt;/a&gt;中下载&lt;strong&gt;keil5 ADD-ON&lt;/strong&gt;包找到，
下载后将其放在工程目录内，例如&lt;code&gt;brd/cfg/dbg/GigaDevice.GD32F10x_DFP.2.0.1.pack&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;通过&amp;ndash;target选项为pyocd指定器件名称，例如：&lt;strong&gt;gd32f303cc&lt;/strong&gt;、&lt;strong&gt;gd32f103rb&lt;/strong&gt;、&lt;strong&gt;gd32F103ve&lt;/strong&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;pyocd-Debugger.png&#34; alt=&#34;img&#34; title=&#34;Debugger&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Startup选择卡：可设置一个启动断点，通常设置为&lt;code&gt;arch_isr_reset&lt;/code&gt;或&lt;code&gt;xwos_main&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;pyocd-Startup.png&#34; alt=&#34;img&#34; title=&#34;Startup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;重启调试&#34;&gt;重启调试&lt;/h3&gt;
&lt;p&gt;调试过程若需要复位系统，可以在右键菜单中选择&lt;strong&gt;Restart&lt;/strong&gt;，操作方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按住复位按键；&lt;/li&gt;
&lt;li&gt;在右键菜单中选择&lt;strong&gt;Restart&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;释放复位按键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加官方firmware-library&#34;&gt;增加官方Firmware Library&lt;/h2&gt;
&lt;p&gt;工程模板中已将官方的&lt;strong&gt;Firmware Library&lt;/strong&gt;以&lt;strong&gt;OEM模块&lt;/strong&gt;的形式集成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;gd32fmwlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译规则：&lt;code&gt;gd32fmwlib/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;OEMCFG_gd32fmwlib&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加用户软件&#34;&gt;增加用户软件&lt;/h2&gt;
&lt;p&gt;工程模板中已经有一个名为&lt;code&gt;app&lt;/code&gt;的OEM模块，用户可在其中增加自己的C代码，也可仿照
此模块建立其他的OEM模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译规则：&lt;code&gt;app/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;OEMCFG_app&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 开发环境</title>
      <link>/docs/quick-guide/gd32v/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/gd32v/env/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ubuntu-2004&#34;&gt;ubuntu-20.04&lt;/h2&gt;
&lt;h3 id=&#34;基本工具&#34;&gt;基本工具&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;../../../user-manual/build-system#%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;用户手册-构建系统-编译环境设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ide&#34;&gt;IDE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nucleisys.com/download.php&#34;&gt;NucleiStudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建工程&#34;&gt;创建工程&lt;/h2&gt;
&lt;h3 id=&#34;工程模板&#34;&gt;工程模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/GD32VF103Tmpl.git&#34;&gt;https://gitee.com/xwos/GD32VF103Tmpl.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/GD32VF103Tmpl.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;工程改名&#34;&gt;工程改名&lt;/h3&gt;
&lt;p&gt;若需要对工程改名，应该在导入工程前修改以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件夹名改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;brd/cfg/XuanWuOS.h&lt;/code&gt;文件中，将&lt;code&gt;XuanWuOS_CFG_BOARD&lt;/code&gt;的定义改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.cproject&lt;/code&gt;文件中，搜索&lt;code&gt;GD32VF103Tmpl&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.project&lt;/code&gt;文件中，搜索&lt;code&gt;GD32VF103Tmpl&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;DebugConfigurations&lt;/code&gt;文件夹中，在所有文件中搜索&lt;code&gt;GD32VF103Tmpl&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.settings&lt;/code&gt;文件夹中，在所有文件中搜索&lt;code&gt;GD32VF103Tmpl&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;导入工程&#34;&gt;导入工程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工程需要放在Eclipse的工作目录内（即Eclipse启动时指定的目录）&lt;/li&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工程设置&#34;&gt;工程设置&lt;/h3&gt;
&lt;h4 id=&#34;编译设置&#34;&gt;编译设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单&lt;strong&gt;Project –&amp;gt; Properties&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;NucleiStudio-Properties-C_C++_Build-Settings.png&#34; alt=&#34;img&#34; title=&#34;编译设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;NucleiStudio-Properties-C_C++_Build-Behavior.png&#34; alt=&#34;img&#34; title=&#34;编译行为&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;环境变量设置&#34;&gt;环境变量设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单&lt;strong&gt;Project –&amp;gt; Properties –&amp;gt; C/C++ Build –&amp;gt; Environment&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Restore Defaults&lt;/strong&gt;先恢复一次默认设置。&lt;/li&gt;
&lt;li&gt;设置：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;: &lt;code&gt;../${ConfigName}&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;: &lt;code&gt;1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;: &lt;strong&gt;Debug&lt;/strong&gt;配置为&lt;code&gt;1&lt;/code&gt;，&lt;strong&gt;Release&lt;/strong&gt;配置为&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;NucleiStudio-Properties-C_C++_Build-Environment.png&#34; alt=&#34;img&#34; title=&#34;Build-Env配置&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改芯片配置&#34;&gt;修改芯片配置&lt;/h2&gt;
&lt;p&gt;模板中的默认芯片可能与用户的不一样，需要按实际情况进行修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brd/bdl/bdl.mk&lt;/code&gt;：根据芯片晶振频率，修改宏定义&lt;code&gt;-DHXTAL_VALUE=8000000&lt;/code&gt;的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brd/cfg/XuanWuOS.lds&lt;/code&gt;：根据芯片的Flash与RAM情况，调整memory的参数：
&lt;ul&gt;
&lt;li&gt;中断向量表、Image信息块以及代码区加起来不能超过Flash区域；&lt;/li&gt;
&lt;li&gt;数据区、中断栈加起来不能超过RAM区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MEMORY {
        flash_mr (rx): org = 0x08000000, len = 128k /* internal FLASH */
        ocram_mr (rwx): org = 0x20000000, len = 32k /* internal SRAM */

        soc_mr (rx): org = 0x08000000, len = 768 /* SOC启动代码 */
        evt_lmr (rx): org = 0x08000300, len = 256 /* 异常向量表的加载地址(LMA) */
        evt_vmr (rx): org = 0x08000300, len = 256 /* 异常向量表的运行地址(VMA) */
        eclic_ivt_lmr (rx): org = 0x08000400, len = 1024 /* 中断向量表的加载地址(LMA) */
        eclic_ivt_vmr (rw): org = 0x08000400, len = 1024 /* 中断向量表的运行地址(VMA) */
        code_mr (rx): org = 0x08000800, len = 126k /* text &amp;amp; rodata */
        data_mr (arw): org = 0x20000000, len = 30k /* .data, .bss &amp;amp; .heap */
        xwos_stk_mr (rw): org = 0x20007800, len = 2k /* xwos stack */
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译工程&#34;&gt;编译工程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;NucleiStudio-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;h3 id=&#34;使用rv-debugger调试&#34;&gt;使用RV-Debugger调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Main选择卡：选择工程，设置ELF文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Debug-Main.png&#34; alt=&#34;img&#34; title=&#34;Main&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debugger选择卡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Debug-Debugger.png&#34; alt=&#34;img&#34; title=&#34;Debugger&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Startup选择卡：可设置一个启动断点，通常设置为&lt;code&gt;xwos_main&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Debug-Startup.png&#34; alt=&#34;img&#34; title=&#34;Startup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;重启调试&#34;&gt;重启调试&lt;/h3&gt;
&lt;p&gt;调试过程若需要复位系统，可以在右键菜单中选择&lt;strong&gt;Restart&lt;/strong&gt;，操作方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.按住复位按键；&lt;/li&gt;
&lt;li&gt;2.在右键菜单中选择&lt;strong&gt;Restart&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;3.释放复位按键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加官方firmware-library&#34;&gt;增加官方Firmware Library&lt;/h2&gt;
&lt;p&gt;工程模板中已将官方的&lt;strong&gt;Firmware Library&lt;/strong&gt;以&lt;strong&gt;OEM模块&lt;/strong&gt;的形式集成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;gd32vfmwlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Makefile：&lt;code&gt;gd32vfmwlib/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;OEMCFG_gd32vfmwlib&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加用户软件&#34;&gt;增加用户软件&lt;/h2&gt;
&lt;p&gt;工程模板中已经有一个名为&lt;code&gt;app&lt;/code&gt;的OEM模块，用户可在其中增加自己的C代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Makefile：&lt;code&gt;app/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;OEMCFG_app&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 开发环境</title>
      <link>/docs/quick-guide/s32k/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/s32k/env/</guid>
      <description>
        
        
        &lt;h2 id=&#34;windows-10-64bit&#34;&gt;Windows-10-64bit&lt;/h2&gt;
&lt;h3 id=&#34;基本工具&#34;&gt;基本工具&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;../../../user-manual/build-system#%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;用户手册-构建系统-编译环境设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ide&#34;&gt;IDE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nxp.com/design/software/development-software/s32-design-studio-ide/s32-design-studio-for-arm:S32DS-ARM&#34;&gt;S32DS for Arm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建工程&#34;&gt;创建工程&lt;/h2&gt;
&lt;h3 id=&#34;工程模板&#34;&gt;工程模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/S32K144Evb.git&#34;&gt;https://gitee.com/xwos/S32K144Evb.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/S32K144Evb.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;工程改名&#34;&gt;工程改名&lt;/h3&gt;
&lt;p&gt;若需要对工程改名，应该在导入工程前修改以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件夹名改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;brd/cfg/XuanWuOS.h&lt;/code&gt;文件中，将&lt;code&gt;XuanWuOS_CFG_BOARD&lt;/code&gt;的定义改成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.cproject&lt;/code&gt;文件中，搜索&lt;code&gt;S32K144Evb&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.project&lt;/code&gt;文件中，搜索&lt;code&gt;S32K144Evb&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;ProcessorExpert.pe&lt;/code&gt;文件中搜索&lt;code&gt;S32K144Evb&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Project_Settings/Debugger&lt;/code&gt;文件夹中，在所有文件中搜索&lt;code&gt;S32K144Evb&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.settings&lt;/code&gt;文件夹中，在所有文件中搜索&lt;code&gt;S32K144Evb&lt;/code&gt;并全部替换成&lt;code&gt;新的工程名&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;导入工程&#34;&gt;导入工程&lt;/h3&gt;
&lt;p&gt;打开菜单&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;导入。
导入后，S32DS会重新生成一次源代码，这会使得部分对SDK的修改被覆盖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Regenerate.png&#34; alt=&#34;img&#34; title=&#34;S32DS重新生成源码&#34;&gt;&lt;/p&gt;
&lt;p&gt;幸好我们使用git管理源码，可使用git命令将这这些文件找回：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; s32k144evb
git checkout SDK/platform/devices/status.h
git checkout SDK/rtos/osif/osif.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改的这两个文件可使得玄武OS与S32K的SDK能更好地一起工作，但每次使用S32DS重新生成
代码时，这两个文件都会被覆盖。一劳永逸的方法是将这两个文件覆盖到S32DS的安装目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;S32DS的安装目录&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\S&lt;/span&gt;32DS&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\s&lt;/span&gt;oftware&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\S&lt;/span&gt;32SDK_S32K1xx_RTM_3.0.0&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\p&lt;/span&gt;latform&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\d&lt;/span&gt;evices&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\s&lt;/span&gt;tatus.h
S32DS的安装目录&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\S&lt;/span&gt;32DS&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\s&lt;/span&gt;oftware&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\S&lt;/span&gt;32SDK_S32K1xx_RTM_3.0.0&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\r&lt;/span&gt;tos&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\o&lt;/span&gt;sif&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\o&lt;/span&gt;sif.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;工程设置&#34;&gt;工程设置&lt;/h3&gt;
&lt;h4 id=&#34;编译设置&#34;&gt;编译设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单&lt;strong&gt;Project –&amp;gt; Properties&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Properties-C_C++_Build-Behavior.png&#34; alt=&#34;img&#34; title=&#34;编译设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Properties-C_C++_Build-Settings.png&#34; alt=&#34;img&#34; title=&#34;编译行为&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;环境变量设置&#34;&gt;环境变量设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜单&lt;strong&gt;Project –&amp;gt; Properties –&amp;gt; C/C++ Build –&amp;gt; Environment&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Restore Defaults&lt;/strong&gt;先恢复一次默认设置。&lt;/li&gt;
&lt;li&gt;设置：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;: &lt;code&gt;../${ConfigName}&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;: &lt;code&gt;1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;: &lt;strong&gt;Debug&lt;/strong&gt;配置为&lt;code&gt;1&lt;/code&gt;，&lt;strong&gt;Release&lt;/strong&gt;配置为&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;和&lt;strong&gt;Release&lt;/strong&gt;两个配置都需要增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Properties-C_C++_Build-Environment.png&#34; alt=&#34;img&#34; title=&#34;Build-Env配置&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;环境变量设置-1&#34;&gt;环境变量设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Properties-C_C++_Build-Environment-PATH.png&#34; alt=&#34;img&#34; title=&#34;Path设置&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译工程&#34;&gt;编译工程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;S32DS-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;h3 id=&#34;设置jlink调试&#34;&gt;设置JLink调试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;Jlink-Main.png&#34; alt=&#34;img&#34; title=&#34;Main&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Jlink-Debugger.png&#34; alt=&#34;img&#34; title=&#34;Debugger&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Jlink-Startup.png&#34; alt=&#34;img&#34; title=&#34;Startup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;重启调试&#34;&gt;重启调试&lt;/h3&gt;
&lt;p&gt;调试过程可能需要复位系统，可以在右键菜单中选择&lt;strong&gt;Restart&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Jlink-Restart.png&#34; alt=&#34;img&#34; title=&#34;重新开始调试&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;增加官方sdk&#34;&gt;增加官方SDK&lt;/h2&gt;
&lt;p&gt;工程模板中已将官方SDK以&lt;strong&gt;OEM模块&lt;/strong&gt;的形式集成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;brd/bm/s32kbsp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Makefile：&lt;code&gt;brd/bm/s32kbsp/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;BMCFG_s32kbsp&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;增加用户软件&#34;&gt;增加用户软件&lt;/h2&gt;
&lt;p&gt;工程模板中已经有一个名为&lt;code&gt;app&lt;/code&gt;的OEM模块，用户可在其中增加自己的C代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块路径：&lt;code&gt;app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Makefile：&lt;code&gt;app/xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译开关：&lt;code&gt;OEMCFG_app&lt;/code&gt;，定义在&lt;code&gt;brd/cfg/oem.h&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;OEM模块也是&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;玄武模块&lt;/a&gt;的一种&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 开发环境</title>
      <link>/docs/quick-guide/stm32/env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/env/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ubuntu-2004&#34;&gt;ubuntu-20.04&lt;/h2&gt;
&lt;h3 id=&#34;基本工具&#34;&gt;基本工具&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;../../../user-manual/build-system#%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;用户手册-构建系统-编译环境设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;stm32cubeide&#34;&gt;STM32CubeIDE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下载&lt;a href=&#34;https://www.st.com/content/st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-ides/stm32cubeide.html&#34;&gt;STM32CubeIDE-DEB&lt;/a&gt;进行安装；&lt;/li&gt;
&lt;li&gt;安装过程中，需要接受许可证，许可证比较长，可以按&lt;strong&gt;q&lt;/strong&gt;键跳过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;jre&#34;&gt;JRE&lt;/h4&gt;
&lt;p&gt;STM323CubeIDE需要java运行环境，在Ubuntu系统中可以直接安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt install openjdk-8-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装openocd插件&#34;&gt;安装OpenOCD插件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单&amp;quot;Help –&amp;gt; Install New Software…&amp;quot;；&lt;/li&gt;
&lt;li&gt;点击&amp;quot;Add…&amp;quot;，增加下面的仓库；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Name: Eclipse Embedded CDT Plug-ins
URL: https://download.eclipse.org/embed-cdt/updates/neon/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;等待刷新，选择安装
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C/C++ OpenOCD Debugging&lt;/strong&gt;插件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C/C++ J-Link Debugging&lt;/strong&gt;插件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stm32cubemx&#34;&gt;STM32CubeMX&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到&lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubemx.html&#34;&gt;STM32CubeMX的网站&lt;/a&gt;，选择下载STM32CubeMX-Lin&lt;/li&gt;
&lt;li&gt;解压后增加执行权限，运行，安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows-10-64bit&#34;&gt;Windows-10-64bit&lt;/h2&gt;
&lt;h3 id=&#34;基本工具-1&#34;&gt;基本工具&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;../../../user-manual/build-system#%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE&#34;&gt;用户手册-构建系统-编译环境设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;stm32cubeide-1&#34;&gt;STM32CubeIDE&lt;/h3&gt;
&lt;h4 id=&#34;安装ide&#34;&gt;安装IDE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;下载&lt;a href=&#34;https://www.st.com/content/st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-ides/stm32cubeide.html&#34;&gt;STM32CubeIDE-Win&lt;/a&gt;
进行安装；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装openocd插件-1&#34;&gt;安装OpenOCD插件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单&amp;quot;Help –&amp;gt; Install New Software…&amp;quot;；&lt;/li&gt;
&lt;li&gt;点击&amp;quot;Add…&amp;quot;，增加下面的仓库；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Name: Eclipse Embedded CDT Plug-ins
URL: https://download.eclipse.org/embed-cdt/updates/neon/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;等待刷新，选择安装
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C/C++ OpenOCD Debugging&lt;/strong&gt;插件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C/C++ J-Link Debugging&lt;/strong&gt;插件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stm32cubemx-1&#34;&gt;STM32CubeMX&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到&lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubemx.html&#34;&gt;STM32CubeMX的网站&lt;/a&gt;，选择下载&lt;strong&gt;STM32CubeMX-Win&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;解压后，运行，安装。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 简单内存分配器</title>
      <link>/docs/user-manual/mm/sma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/mm/sma/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;简单内存分配器只分配大小最适应内存块，不对内存进行回收。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;简单，代码量非常小；&lt;/li&gt;
&lt;li&gt;运行时间稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：内存一旦分配出去不再回收，&lt;code&gt;free()&lt;/code&gt;只是一个&lt;strong&gt;dummy&lt;/strong&gt;函数；&lt;/li&gt;
&lt;li&gt;适用性：简单的RTOS应用场合或不需要回收内存的场合&lt;/li&gt;
&lt;li&gt;上下文的安全性：在任何上下文（中断、中断底半部、线程）都是安全的。&lt;/li&gt;
&lt;li&gt;说明：此内存管理算法只是为了满足玄武OS的API而提供的默认算法，玄武OS在编译时会自动
计算数据区剩余的内存，将它们全部纳入简单内存分配器的管理范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/mm/sma.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 线程</title>
      <link>/docs/lua-manual/xwos/thd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/thd/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwosskd&#34;&gt;&lt;strong&gt;包：xwos.skd&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosskdtt&#34;&gt;&lt;code&gt;xwos.skd.tt()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取当前CPU调度器的系统滴答时间&lt;/li&gt;
&lt;li&gt;返回值：(number)系统时间&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;xwos.skd.tt()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwosskdtc&#34;&gt;&lt;code&gt;xwos.skd.tc()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取当前CPU调度器的系统滴答计数&lt;/li&gt;
&lt;li&gt;返回值：(number)滴答计数&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;xwos.skd.tc()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwosskdts&#34;&gt;&lt;code&gt;xwos.skd.ts()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取当前CPU调度器的系统时间戳&lt;/li&gt;
&lt;li&gt;返回值：(number)系统时间&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;xwos.skd.ts()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;包xwosthd&#34;&gt;&lt;strong&gt;包：xwos.thd&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosthddofilefile&#34;&gt;&lt;code&gt;xwos.thd.dofile(file)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：建立一个新的线程，并在新线程中执行脚本文件&lt;/li&gt;
&lt;li&gt;参数file：(string)文件路径&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;childthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.dofile(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;sd:/hw.lua&amp;#34;&lt;/span&gt;)
childthdsp:stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; childthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.dofile(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;sd:/hw.lua&amp;#34;&lt;/span&gt;)
XWLUA Test Script

Thread strong pointer:	{&lt;span style=&#34;color:#666&#34;&gt;0x20000880&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;63&lt;/span&gt;}
pi &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;3.1415926535898&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2.5060358315688e-94&lt;/span&gt;
exp(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;22026.465794807&lt;/span&gt;
t1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
t1[&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;	&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;
c	c
b	b
a	a

&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; childthdsp:stop()
&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwosthddostringstr&#34;&gt;&lt;code&gt;xwos.thd.dostring(str)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：建立一个新的线程，并在新线程中执行字符串表示的脚本&lt;/li&gt;
&lt;li&gt;参数str：(string)脚本&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;script &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;[[
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;mythdsp = xwos.cthd.sp()
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;print(&amp;#34;Thread strong pointer:&amp;#34;, mythdsp)
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;]]&lt;/span&gt;
strthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.dostring(script)
strthdsp
strthdsp:stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;script &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;[[
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;gt;&amp;gt; mythdsp = xwos.cthd.sp()
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;gt;&amp;gt; print(&amp;#34;Thread strong pointer:&amp;#34;, mythdsp)
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;gt;&amp;gt; ]]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; strthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.dostring(script)
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; Thread strong pointer:	{&lt;span style=&#34;color:#666&#34;&gt;0x20000660&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt;}

&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; strthdsp
{&lt;span style=&#34;color:#666&#34;&gt;0x20000660&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt;}
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; strthdsp:stop()
&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwosthdcallfunc&#34;&gt;&lt;code&gt;xwos.thd.call(func)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：建立一个新的线程，并在新线程中执行函数&lt;/li&gt;
&lt;li&gt;参数func：(function)Lua函数&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;childthd_main&lt;/span&gt; ()
  mythdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.sp()
  print(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Thread strong pointer:&amp;#34;&lt;/span&gt;, mythdsp)
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt;
cthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.call(childthd_main)
cthdsp
cthdsp:stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;示例输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;childthd_main&lt;/span&gt; ()
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;   mythdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.sp()
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;   print(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Thread strong pointer:&amp;#34;&lt;/span&gt;, mythdsp)
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; cthdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.thd.call(childthd_main)
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; Thread strong pointer:	{&lt;span style=&#34;color:#666&#34;&gt;0x20000550&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;}

&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; cthdsp
{&lt;span style=&#34;color:#666&#34;&gt;0x20000550&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;}
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; cthdsp:stop()
&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;包xwoscthd&#34;&gt;&lt;strong&gt;包：xwos.cthd&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwoscthdsp&#34;&gt;&lt;code&gt;xwos.cthd.sp()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：返回当前线程的&lt;strong&gt;线程对象强指针类&lt;/strong&gt;对象&lt;/li&gt;
&lt;li&gt;返回值：(userdata)当前线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mythdsp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.sp()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdsleeptime&#34;&gt;&lt;code&gt;xwos.cthd.sleep(time)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：调用此函数的线程睡眠一段时间&lt;/li&gt;
&lt;li&gt;参数time：(number, 输入)需要睡眠的时间，单位：纳秒&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：睡眠成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：睡眠失败或中断，返回值为Unix错误码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.sleep(&lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 睡眠1s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdsleepfromorigin-inc&#34;&gt;&lt;code&gt;xwos.cthd.sleepFrom(origin, inc)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：调用此函数的线程从一个时间起点睡眠到另一个时间点&lt;/li&gt;
&lt;li&gt;参数origin：(number, 输入)时间起点，单位：纳秒&lt;/li&gt;
&lt;li&gt;参数inc：(number, 输入)期望被唤醒的时间相对于起点的增量，单位：纳秒&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (number)时间起点}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：睡眠成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：睡眠失败或中断，返回值为Unix错误码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间起点：新的时间起点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;origin &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.skd.tt()
cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;repeat&lt;/span&gt;
  rc, origin &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.sleepFrom(origin, &lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 睡眠1s&lt;/span&gt;
  cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;until&lt;/span&gt; (cnt &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 重复3次&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdyield&#34;&gt;&lt;code&gt;xwos.cthd.yield()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：通知调度器重新选择线程&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;xwos.cthd.yield()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdexitrc&#34;&gt;&lt;code&gt;xwos.cthd.exit(rc)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：调用此函数的线程退出&lt;/li&gt;
&lt;li&gt;参数rc：(number, 输入)线程退出时的返回值&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;xwos.cthd.exit(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 线程退出时抛出返回值0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdshldfrz&#34;&gt;&lt;code&gt;xwos.cthd.shldFrz()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：判断当前线程是否可被冻结&lt;/li&gt;
&lt;li&gt;返回值：(boolean)是否可冻结
&lt;ul&gt;
&lt;li&gt;true：可被冻结&lt;/li&gt;
&lt;li&gt;false：不可被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;xwoscthdshldstop&#34;&gt;&lt;code&gt;xwos.cthd.shldStop()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：判断当前线程是否可以退出&lt;/li&gt;
&lt;li&gt;返回值：(boolean)是否可退出
&lt;ul&gt;
&lt;li&gt;true：可退出&lt;/li&gt;
&lt;li&gt;false：不可退出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- Lua 线程循环的写法&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;repeat&lt;/span&gt;
  shldStop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.shldStop()
  threadLoop()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;until&lt;/span&gt; (shldStop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdfrzshldstop&#34;&gt;&lt;code&gt;xwos.cthd.frzShldStop()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：判断当前线程是否可被冻结，如果是，就冻结线程，之后再判断线程是否可以退出&lt;/li&gt;
&lt;li&gt;返回值：{(boolean)是否可退出, (boolean)是否被冻结过}
&lt;ul&gt;
&lt;li&gt;是否可退出
+    true：可退出
+    false：不可退出&lt;/li&gt;
&lt;li&gt;是否被冻结过
+    true：线程被冻结过
+    false：线程没有冻结过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- Lua 线程循环的写法&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;repeat&lt;/span&gt;
  shldStop, froze &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cthd.frzShldStop()
  threadLoop()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;until&lt;/span&gt; (shldStop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwoscthdfrz&#34;&gt;&lt;code&gt;xwos.cthd.frz()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：冻结当前线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类thdsp&#34;&gt;&lt;strong&gt;类：thdsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：线程对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thdspstop&#34;&gt;&lt;code&gt;thdsp:stop()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：终止子线程并等待它的返回值，最后回收子线程资源&lt;/li&gt;
&lt;li&gt;参数thdsp：(userdata, 输入)类成员函数的this参数，子线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：{(number)函数的错误码, (number)子线程的返回值}，当函数的错误码为0时，
子线程的返回值才有效&lt;/li&gt;
&lt;li&gt;说明：&lt;code&gt;thdsp:stop()&lt;/code&gt;等价于&lt;code&gt;thdsp:cancel() + thdsp:join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;rc, childrc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; thdsp:stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;thdspcancel&#34;&gt;&lt;code&gt;thdsp:cancel()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：取消子线程并通知它退出&lt;/li&gt;
&lt;li&gt;返回值：(number)函数的错误码&lt;/li&gt;
&lt;li&gt;说明：&lt;code&gt;thdsp:cancel()&lt;/code&gt;可中断子线程的阻塞态与睡眠态（互斥锁、
信号量等的等待状态），并使得子线程调用&lt;code&gt;xwos.cthd.shldStop()&lt;/code&gt;时获得
返回值&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; thdsp:cancel()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;thdspjoin&#34;&gt;&lt;code&gt;thdsp:join()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待线程结束并获取它的返回值，最后回收线程资源&lt;/li&gt;
&lt;li&gt;参数thdsp：(userdata, 输入)类成员函数的this参数，子线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：{(number)函数的错误码, (number)子线程的返回值}，当函数的错误码为0时，
子线程的返回值才有效&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;rc, childrc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; thdsp:join()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;thdspdetach&#34;&gt;&lt;code&gt;thdsp:detach()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：分离线程&lt;/li&gt;
&lt;li&gt;参数thdsp：(userdata, 输入)类成员函数的this参数，子线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;说明：
&lt;ul&gt;
&lt;li&gt;此函数可将线程设置为&lt;strong&gt;DETACH&lt;/strong&gt;态，处于分离态的线程退出后，系统自动回收资源，
不需要父线程join()或stop()。&lt;/li&gt;
&lt;li&gt;与&lt;strong&gt;DETACH&lt;/strong&gt;相反的状态是&lt;strong&gt;JOINABLE&lt;/strong&gt;，通过
API &lt;code&gt;xwos.thd.dofile(file)&lt;/code&gt;、&lt;code&gt;xwos.thd.dostring(str)&lt;/code&gt;
以及&lt;code&gt;xwos.thd.call(func)&lt;/code&gt;创建的子线程都是&lt;strong&gt;JOINABLE&lt;/strong&gt;态的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thdspmigratecpu&#34;&gt;&lt;code&gt;thdsp:migrate(cpu)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将线程迁移到目标CPU&lt;/li&gt;
&lt;li&gt;参数thdsp：(userdata, 输入)类成员函数的this参数，子线程对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数cpu：(number, 输入)目标CPU的ID&lt;/li&gt;
&lt;li&gt;返回值：(number)函数的错误码&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自旋锁</title>
      <link>/docs/lua-manual/xwos/lock/spinlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/lock/spinlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua自旋锁对象&#34;&gt;XWLUA自旋锁对象&lt;/h2&gt;
&lt;p&gt;XWLUA自旋锁对象是由XWOS内核的自旋锁（XWOS的自旋锁只是一种数据类型，并不
是对象）与XWOS内核对象组成，Lua虚拟机通过引用计数管理XWLUA自旋锁对象。&lt;/p&gt;
&lt;p&gt;在Lua语言中，通过&lt;a href=&#34;../../../xwos#%E5%AF%B9%E8%B1%A1%E5%BC%BA%E6%8C%87%E9%92%88&#34;&gt;对象强指针&lt;/a&gt;来表示Lua自旋锁对象。&lt;/p&gt;
&lt;h2 id=&#34;to-be-closed特性&#34;&gt;to-be-closed特性&lt;/h2&gt;
&lt;p&gt;XWLUA自旋锁对象支持Lua语言的&lt;strong&gt;to-be-closed&lt;/strong&gt;特性，Lua自旋锁能在代码块结束时自动解锁。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysplk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.splk.new()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;test&lt;/span&gt;()
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;local&lt;/span&gt; lock&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;close&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mysplk
  lock:lock()
  &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 临界区&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 自动解锁自旋锁&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwossplk&#34;&gt;&lt;strong&gt;包：xwos.splk&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwossplknew&#34;&gt;&lt;code&gt;xwos.splk.new()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个Lua自旋锁&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的Lua自旋锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysplk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.splk.new()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类splksp&#34;&gt;&lt;strong&gt;类：splksp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：自旋锁对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;splkspunlock&#34;&gt;&lt;code&gt;splksp:unlock()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解锁自旋锁&lt;/li&gt;
&lt;li&gt;参数splksp：(userdata, 输入)类成员函数的this参数，Lua自旋锁对象的强引用指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;splksplockt&#34;&gt;&lt;code&gt;splksp:lock([&amp;quot;t&amp;quot;])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：锁定自旋锁&lt;/li&gt;
&lt;li&gt;参数splksp：(userdata, 输入)类成员函数的this参数，Lua自旋锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;可选参数&amp;quot;t&amp;quot;：(string, 输入)尝试上锁自旋锁，若自旋锁已开启临界区，立即返回，
不会自旋等待。&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-EAGAIN：尝试上锁失败，仅当存在可选参数&amp;quot;t&amp;quot;时才会出现此错误值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自旋锁</title>
      <link>/docs/user-manual/lock/spinlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/spinlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;自旋锁是多核系统中为防止多个处理器同时访问临界区而引入的一种锁。
当一个CPU获得自旋锁并访问临界区时，其他CPU只能“&lt;strong&gt;自旋&lt;/strong&gt;”等待锁。
所谓“&lt;strong&gt;自旋&lt;/strong&gt;”，是指不断循环测试锁的是否可用。&lt;/p&gt;
&lt;p&gt;自旋锁内的操作是不可被打断的。因此，自旋锁还伴随其他操作，
例如关闭调度器的抢占，关闭中断底半部，关闭中断等。
在单核(UP)系统中，只有一个CPU，不需要自旋过程，单核系统为了软件接口与多核系统兼容，
也会实现自旋锁，这种自旋锁只需关闭抢占、中断底半部或中断。&lt;/p&gt;
&lt;h2 id=&#34;自旋锁的初始化&#34;&gt;自旋锁的初始化&lt;/h2&gt;
&lt;p&gt;自旋锁是基于原子操作指令实现的，自旋锁结构体的核心数据是一个CPU指令能操作的
基本数据类型（8位、16位、32位、64位），因此不需要提供动态创建和删除方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwos_splk_init&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_splk &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; spl);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;临界区&#34;&gt;临界区&lt;/h2&gt;
&lt;p&gt;自旋锁不同后缀的API安全性不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临界区只对线程上下文是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程、中断、中断底半部上下文都是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_cpuirq(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_cpuirq(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_cpuirqsv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;cpuirq1);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_lock_cpuirqsv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;cpuirq2);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区2 */&lt;/span&gt;
        xwos_splk_unlock_cpuirqrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;loc2, cpuirq2);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_unlock_cpuirqrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;loc1, cpuirq1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程上下文、特定的外设中断是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_irqs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock, irq_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_irqs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock, irq_array, num);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区内有子临界区，对线程上下文、特定的外设中断是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        xwos_splk_lock_irqssv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, irq_array, flag1_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_lock_irqssv(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, irq_array, flag2_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区2 */&lt;/span&gt;
        xwos_splk_unlock_irqsrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock2, irq_array, flag2_array, num);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区1 */&lt;/span&gt;
        xwos_splk_unlock_irqsrs(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock1, irq_array, flag1_array, num);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;临界区对线程上下文、中断底半部是安全的：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
{
        xwos_splk_lock_bh(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 临界区 */&lt;/span&gt;
        xwos_splk_unlock_bh(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/spinlock.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: C&#43;&#43;</title>
      <link>/docs/user-manual/c-c&#43;&#43;/c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/c-c&#43;&#43;/c&#43;&#43;/</guid>
      <description>
        
        
        &lt;p&gt;XWOS内核是使用纯C语言开发的，不依赖C++的标准库。
用户可在线程中使用C++语言以及C++标准库，C++标准库由编译器提供，不完全功能清单如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; g++, libstdc++, libsupc++
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; new, delete, new[], delete[], placement new, aligned new (C++17)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 容器
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; array&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; vector&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; deque&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; map, multimap, unordered_map, unordered_multimap&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; set, multiset, unordered_set, unordered_multiset&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; list, forward_list&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; stack, queue, priority_queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I/O stream&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; string&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; atomic&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; RTTI&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; exception&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; unwind&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; chrono&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; thread&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; mutex&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; condition_variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; llvm(clang++), libc++, libc++abi
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; new, delete, new[], delete[], placement new, aligned new (C++17)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 容器
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; array&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; vector&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; deque&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; map, multimap, unordered_map, unordered_multimap&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; set, multiset, unordered_set, unordered_multiset&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; list, forward_list&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; stack, queue, priority_queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I/O stream&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; string&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; atomic&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; RTTI&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; exception&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; unwind&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; chrono&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; thread&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; mutex&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; condition_variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: GPIO</title>
      <link>/docs/lua-manual/xwds/gpio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwds/gpio/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwdsgpio&#34;&gt;&lt;strong&gt;包：xwds.gpio&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwdsgpioreqsoc-port-pinmsk&#34;&gt;xwds.gpio.req(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：申请GPIO&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- GPIOA, PIN0 | PIN1&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.req(stm32, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpiorlssoc-port-pinmsk&#34;&gt;xwds.gpio.rls(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：释放GPIO&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- GPIOA, PIN1 | PIN2&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.rls(stm32, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpiosetsoc-port-pinmsk&#34;&gt;xwds.gpio.set(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将GPIO的PIN置为高电平&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- GPIOB, PIN2 | PIN4&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.set(stm32, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpioresetsoc-port-pinmsk&#34;&gt;xwds.gpio.reset(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：将GPIO的PIN置为低电平&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- GPIOC, PIN2 | PIN3&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.reset(stm32, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0x8&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpiotogglesoc-port-pinmsk&#34;&gt;xwds.gpio.toggle(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：翻转GPIO电平&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- GPIOD, PIN0 | PIN1&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.toggle(stm32, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpiooutputsoc-port-pinmsk-out&#34;&gt;xwds.gpio.output(soc, port, pinmsk, out)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：同时输出多个GPIO引脚&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;参数out：(number, 输入)输出值&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 输出GPIOE，掩码0xFFFFFFFF，输出值0x3&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.output(stm32, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xFFFFFFFF&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsgpioinputsoc-port-pinmsk&#34;&gt;xwds.gpio.input(soc, port, pinmsk)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：同时从GPIO端口读取多个引脚的输入值&lt;/li&gt;
&lt;li&gt;参数soc：(userdata, 输入)BSP中注册的&lt;a href=&#34;../soc&#34;&gt;SOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参数port：(number, 输入)GPIO端口&lt;/li&gt;
&lt;li&gt;参数pinmsk：(number, 输入)GPIO引脚的掩码&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (number)输入值}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ERANGE: GPIO PORT错误&lt;/li&gt;
&lt;li&gt;-EBUSY: GPIO PIN已被使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 读取GPIOF，掩码0xFFFFFFFF&lt;/span&gt;
rc, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.gpio.output(stm32, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xFFFFFFFF&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 内存切片分配器</title>
      <link>/docs/user-manual/mm/memslice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/mm/memslice/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;内存切片分配器将内存切割成等量的块，就像“卡片”一样，然后将它们连接在一起形成队列，
每次分配时取一块内存，回收时再把内存切片放回到队列中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;简单，代码量较小；&lt;/li&gt;
&lt;li&gt;支持释放操作；&lt;/li&gt;
&lt;li&gt;申请与释放操作的运行时间是稳定的；&lt;/li&gt;
&lt;li&gt;反复申请与释放不会造成内存碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;内存块大小固定，如果要求的内存过小，会造成内存浪费；
如果要求的内存超过内存块的大小，无法满足需求；&lt;/li&gt;
&lt;li&gt;连续申请的两块内存不能保证是连续的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用性：对时间稳定性要求高的RTOS应用场合。&lt;/li&gt;
&lt;li&gt;上下文的安全性：在任何上下文（中断、中断底半部、线程）都是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/mm/memslice.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 分支与版本号规范</title>
      <link>/docs/criterion/version-branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/criterion/version-branch/</guid>
      <description>
        
        
        &lt;h2 id=&#34;分支&#34;&gt;分支&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;*: 主分支，所有新增的提交都优先合并到主分支；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版本号&lt;/strong&gt;分支: 稳定版本与里程碑版本的分支，用于发布版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;版本号&#34;&gt;版本号&lt;/h2&gt;
&lt;h3 id=&#34;版本号形式majorminorrevision-mmr&#34;&gt;版本号形式：Major.minor.revision (M.m.r)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Major: 大版本号
&lt;ul&gt;
&lt;li&gt;里程碑版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minor: 小版本号
&lt;ul&gt;
&lt;li&gt;稳定版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revision: 修订号
&lt;ul&gt;
&lt;li&gt;稳定版分支的问题的修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;版本变化规则&#34;&gt;版本变化规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Major在以下情况下增加1：
&lt;ul&gt;
&lt;li&gt;里程碑版本发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minor：
&lt;ul&gt;
&lt;li&gt;发布一个新的稳定版本；&lt;/li&gt;
&lt;li&gt;Major+1后，minor回到0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revision：
&lt;ul&gt;
&lt;li&gt;修复了稳定版分支中的问题后，revision增加1；&lt;/li&gt;
&lt;li&gt;minor+1后，revision回到0；&lt;/li&gt;
&lt;li&gt;Major+1后，revision回到0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 动态内存管理</title>
      <link>/docs/note/newlib/mm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/mm/</guid>
      <description>
        
        
        &lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XWOS不使用Newlib提供的动态内存管理的算法。使用的是内存池算法：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移植方法&#34;&gt;移植方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重写Newlib的函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_malloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_realloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; p, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_calloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t elem_nr, size_t elem_sz);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_memalign_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t alignment, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_valloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_pvalloc_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, size_t n);
&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;_free_r&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; r, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; p);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;源码路径：&lt;code&gt;xwmd/libc/newlibac/mem.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 原子操作库</title>
      <link>/docs/user-manual/xwlib/xwaop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/xwlib/xwaop/</guid>
      <description>
        
        
        &lt;h2 id=&#34;原子操作&#34;&gt;原子操作&lt;/h2&gt;
&lt;p&gt;XWOS提供了原子操作模板库，&lt;a href=&#34;../../basic-promise#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34;&gt;基本类型&lt;/a&gt;中定义的
各种&lt;strong&gt;非函数指针类型&lt;/strong&gt;都可使用原子操作。原子操作函数模板包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwaop_load()&lt;/code&gt;：加载
&lt;ul&gt;
&lt;li&gt;可以指定C11中6种内存序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_read()&lt;/code&gt;：读
&lt;ul&gt;
&lt;li&gt;内存序：&lt;code&gt;acquire&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwaop_store()&lt;/code&gt;：存储
&lt;ul&gt;
&lt;li&gt;可以指定C11中6种内存序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_write()&lt;/code&gt;：写
&lt;ul&gt;
&lt;li&gt;内存序：&lt;code&gt;release&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读-改-写
&lt;ul&gt;
&lt;li&gt;基本运算
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwaop_add()&lt;/code&gt;：加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_sub()&lt;/code&gt;：减&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_rsb()&lt;/code&gt;：反向减法&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位运算
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwaop_and()&lt;/code&gt;：与&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_or()&lt;/code&gt;：或&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_xor()&lt;/code&gt;：异或&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位操作
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwaop_s1m()&lt;/code&gt;：将数据掩码部分的位全部置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_c0m()&lt;/code&gt;：将数据掩码部分的位全部清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwaop_x1m()&lt;/code&gt;：将数据掩码部分的位全部翻转&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读-测试-改-写
&lt;ul&gt;
&lt;li&gt;所有名称匹配正则表达式&lt;code&gt;xwaop_t.+_then_.+&lt;/code&gt;的函数
&lt;ul&gt;
&lt;li&gt;分为两种情况
&lt;ul&gt;
&lt;li&gt;测试成功，继续执行“改-写”操作，此时内存序为&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试失败，相当于读操作，此时内存序为&lt;code&gt;consume&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有原子操作函数的第一个参数均为&lt;a href=&#34;../../basic-promise#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34;&gt;基本类型&lt;/a&gt;，第二个参数
是原子数据的指针，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwer_t rc;
xwsq_a refcnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; v;
xwsq_t nv, ov;

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt; * 测试refcnt是否为0：
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt; * + ture: refcnt增加1，nv返回refcnt增加以后的新值，ov返回refcnt增加以前的旧值，
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt; *         内存序：acq_rel，rc为返回值XWOK；
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt; * + false: nv与ov都返回refcnt的值，内存序：consume，rc为返回值-EACCES；
&lt;/span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt; */&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwaop_teq_then_add(xwsq_t, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;refcnt, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;nv, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;ov);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;位图原子操作&#34;&gt;位图原子操作&lt;/h2&gt;
&lt;p&gt;位图（xwbmp_t数组）与可进行原子操作，XWOS提供了基本函数库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_declare()&lt;/code&gt;：声明原子位图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_t1i()&lt;/code&gt;：测试位图中的某位是否被置1&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;consume&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_s1all()&lt;/code&gt;：将位图所有位置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_c0all()&lt;/code&gt;：将位图所有位清0&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读-改-写
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_s1i()&lt;/code&gt;：将位图中某位置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_c1i()&lt;/code&gt;：将位图中某位清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_x1i()&lt;/code&gt;：将位图中某位翻转&lt;/li&gt;
&lt;li&gt;内存序：&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读-测试-改-写
&lt;ul&gt;
&lt;li&gt;所有名字匹配正则表达式&lt;code&gt;xwbmpaop_.+_then_.+&lt;/code&gt;的函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_t0i_then_s1i()&lt;/code&gt;：测试位图中某位是否为0，如果是，就将它置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_t1i_then_c0i()&lt;/code&gt;：测试位图中某位是否为1，如果是，就将它清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_fls_then_c0i()&lt;/code&gt;：从最高位起查找位图中第一个为1的位并将它清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_flz_then_s1i()&lt;/code&gt;：从最高位起查找位图中第一个为0的位并将它置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_ffs_then_c0i()&lt;/code&gt;：从最低位起查找位图中第一个为1的位并将它清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwbmpaop_ffz_then_s1i()&lt;/code&gt;：从最低位起查找位图中第一个为0的位并将它置1&lt;/li&gt;
&lt;li&gt;分为两种情况
&lt;ul&gt;
&lt;li&gt;测试成功，继续执行“改-写”操作，此时内存序为&lt;code&gt;acq_rel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试失败，相当于读操作，此时内存序为&lt;code&gt;consume&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;原子操作：文档未及时更新时，以头文件&lt;code&gt;xwos/lib/xwaop.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;位图原子操作：文档未及时更新时，以头文件&lt;code&gt;xwos/lib/xwbmpaop.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 反客Stm32F429核心板</title>
      <link>/docs/quick-guide/stm32/fk429m1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/fk429m1/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;FK429M1.jpg&#34; alt=&#34;img&#34; title=&#34;FK429M1核心板&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCU: STM32F429BIT6&lt;/li&gt;
&lt;li&gt;SDRAM: 16MiB&lt;/li&gt;
&lt;li&gt;更多介绍: &lt;a href=&#34;https://item.taobao.com/item.htm?spm=a1z09.2.0.0.4c352e8d5rd5Yx&amp;amp;id=550765849476&amp;amp;_u=23vm7h323f95&#34;&gt;淘宝店铺介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电路板目录： &lt;code&gt;xwbd/FK429M1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译集成环境可参考：&lt;a href=&#34;../env&#34;&gt;开发环境搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/FK429M1.git&#34;&gt;https://gitee.com/xwos/FK429M1.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/FK429M1.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;导入工程到stm32cubeide&#34;&gt;导入工程到STM32CubeIDE&lt;/h2&gt;
&lt;p&gt;工程需放在STM32CubeIDE的工作目录内（即STM32CubeIDE启动时指定的目录），&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置编译环境&#34;&gt;设置编译环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单**&amp;ldquo;Project &amp;ndash;&amp;gt; Properties &amp;ndash;&amp;gt; C/C++ Build &amp;ndash;&amp;gt; Environment&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;点击**&amp;ldquo;Restore Defaults&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;修改Debug配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Debug.png&#34; alt=&#34;img&#34; title=&#34;Debug配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Release配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Release.png&#34; alt=&#34;img&#34; title=&#34;Release配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量path设置&#34;&gt;环境变量&lt;strong&gt;PATH&lt;/strong&gt;设置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量
&lt;ul&gt;
&lt;li&gt;将STM32CubeIDE自带的工具链路径从PATH环境变量中删除；&lt;/li&gt;
&lt;li&gt;将XWMCU工具链的路径放置到PATH环境变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH.svg&#34; alt=&#34;img&#34; title=&#34;设置PATH&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx配置工程&#34;&gt;STM32CubeMX配置工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/FK429M1.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为0；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;p&gt;打开菜单&lt;strong&gt;Run &amp;ndash;&amp;gt; Debug Configurations&amp;hellip;&lt;/strong&gt;，根据仿真器类型，选择调试配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FK429M1-openocd-daplink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;DAPLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FK429M1-openocd-jlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;res/figure/STM32CubeIDE-Debug_Configurations.png&#34; alt=&#34;img&#34; title=&#34;调试配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试步骤&#34;&gt;调试步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;准备一张SD卡，格式化为FAT32文件系统；&lt;/li&gt;
&lt;li&gt;将文件夹&lt;code&gt;xwem/vm/lua/test/&lt;/code&gt;内的lua脚本，拷贝到SD卡内；&lt;/li&gt;
&lt;li&gt;将SD卡插入开发板；&lt;/li&gt;
&lt;li&gt;使用MiniUSB线连接电路板上的USB-232接口与PC；&lt;/li&gt;
&lt;li&gt;打开终端工具（windows可选putty、SecretCRT，Linux可选gtkterm、picocom、minicom）,
但先不要在终端工具中打开串口，否则MCU会进入下载模式；&lt;/li&gt;
&lt;li&gt;上电，并在STM32CubeIDE中启动调试，等待MCU运行到初始断点；&lt;/li&gt;
&lt;li&gt;在终端工具中打开串口，参数：1M波特率/8位数据/1位停止位/无奇偶校验；&lt;/li&gt;
&lt;li&gt;开始单步调试或连续运行调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试技巧&#34;&gt;调试技巧&lt;/h3&gt;
&lt;h4 id=&#34;关闭dcache&#34;&gt;关闭DCache&lt;/h4&gt;
&lt;p&gt;ARMv7-m4内核的MCU带有写缓冲区，常常会对定位程序BUG带来困扰，可以在调试时关闭。
将下面的宏开关注释掉或定义改为1后可关闭写缓冲区：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* xwbd/FK429M1/bm/stm32cube/cfg.h */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_DISDEFWBUF         0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行过程&#34;&gt;运行过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../../lua-manual/xwlua-repl.png&#34; alt=&#34;img&#34; title=&#34;XWLUA交互式解释器&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序入口：&lt;code&gt;xwbd/FK429M1/bm/main/main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动流程：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_main()&lt;/code&gt;创建一个主线程&lt;code&gt;main_task()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;依次调用各个&lt;strong&gt;玄武模块&lt;/strong&gt;的&lt;code&gt;xxx_start()&lt;/code&gt;函数完成对各个模块加载；&lt;/li&gt;
&lt;li&gt;开始并行执行各个模块中创建的线程；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;XWOS中有多个示例可帮助用户快速了解API的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程
&lt;ul&gt;
&lt;li&gt;创建线程：&lt;code&gt;xwam/example/thread/create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程睡眠：&lt;code&gt;xwam/example/thread/sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时器：&lt;code&gt;xwam/example/timer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步
&lt;ul&gt;
&lt;li&gt;信号量：&lt;code&gt;xwam/example/sync/sem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件量：&lt;code&gt;xwam/example/sync/cond&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件标志：&lt;code&gt;xwam/example/sync/flg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程栅栏：&lt;code&gt;xwam/example/sync/br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信号选择器：&lt;code&gt;xwam/example/sync/sel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁
&lt;ul&gt;
&lt;li&gt;中断管理：&lt;code&gt;xwam/example/lock/cpuirq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自旋锁：&lt;code&gt;xwam/example/lock/spinlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;顺序锁：&lt;code&gt;xwam/example/lock/seqlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;互斥锁：&lt;code&gt;xwam/example/lock/mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;简单内存分配器：&lt;code&gt;xwam/example/mm/sma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存切片分配器：&lt;code&gt;xwam/example/mm/memslice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伙伴算法分配器：&lt;code&gt;xwam/example/mm/bma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池：只用于比较大的内存区域的管理，例如外接的SDRAM，
FK429M1工程已经为板载的SDRAM建立了内存池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;玄武C库
&lt;ul&gt;
&lt;li&gt;CRC：&lt;code&gt;xwam/example/xwlib/crc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个示例中都有一个启动函数&lt;code&gt;xxx_start()&lt;/code&gt;，可在&lt;code&gt;xwbd/FK429M1/bm/main/main.c&lt;/code&gt;文件中
的主线程&lt;code&gt;main_task()&lt;/code&gt;启动示例，但最好一次只启动一个示例，避免日志冲突。&lt;/p&gt;
&lt;p&gt;实验过程中最好将Lua虚拟机关闭，防止竞争串口导致输出混乱。方法是将
配置文件&lt;code&gt;xwbd/FK429M1/cfg/xwem.h&lt;/code&gt;中的配置&lt;code&gt;XWEMCFG_vm_lua&lt;/code&gt;改为0。&lt;/p&gt;
&lt;h2 id=&#34;系统集成的原理&#34;&gt;系统集成的原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有移植的第三方组件、驱动包、示例代码等都是以&lt;strong&gt;玄武模块&lt;/strong&gt;独立编译成静态库**.a**，
之后再将它们链接成**ELF**文件，再由**ELF**生成**bin**、**hex**和**smot**文件。&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个独立的子工程并进行独立编译，设计上借鉴了安卓系统的&lt;strong&gt;Android.mk&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;中都有一个&lt;code&gt;xwmo.mk&lt;/code&gt;文件，其中定义的&lt;strong&gt;编译参数&lt;/strong&gt;、&lt;strong&gt;头文件路径&lt;/strong&gt;等
&lt;strong&gt;只&lt;/strong&gt;对&lt;strong&gt;当前&lt;/strong&gt;的&lt;strong&gt;玄武模块&lt;/strong&gt;生效；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个封闭的包，外部一般不能直接引用内部头文件，需要封装对外可见的
&lt;strong&gt;类型&lt;/strong&gt;以及&lt;strong&gt;接口函数&lt;/strong&gt;，并统一放在专门的&lt;strong&gt;API头文件&lt;/strong&gt;中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API头文件&lt;/strong&gt;通常以&lt;strong&gt;mif.h&lt;/strong&gt;作为文件名，含义是&lt;strong&gt;模块接口(Module InterFace)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XWOS内已经包含了大量&lt;strong&gt;玄武模块&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd&lt;/code&gt;：外设芯片的驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwam&lt;/code&gt;：示例与应用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd&lt;/code&gt;：中间件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwem&lt;/code&gt;：第三方开源软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;玄武模块&lt;/strong&gt;的具体信息可以参考&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;用户手册-构建系统-玄武模块&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码启动流程&#34;&gt;代码启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;：初始化时钟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm32cube_init()&lt;/code&gt;：初始化内存管理、cache、GPIO、DMA等基础设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;：初始化其他设备、启动其他子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;bsp&#34;&gt;BSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32Cube模块：&lt;code&gt;xwbd/FK429M1/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/FK429M1.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX生成源码目录：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32Cube适配XWOS的源码：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中断向量表：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/IVT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;中断向量表是使用命令自动生成的&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/FK429M1/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端UART
&lt;ul&gt;
&lt;li&gt;设备：USART1&lt;/li&gt;
&lt;li&gt;参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;驱动框架 —— 设备栈：&lt;code&gt;xwmd/ds/uart/dma.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac/xwds/uart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/Core/Src/usart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意：HAL库中的驱动存在BUG，XWOS中所提供的代码已修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SDRAM
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0xD0000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;16MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/Core/Src/fmc.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池
&lt;ul&gt;
&lt;li&gt;头文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbd/FK429M1/bm/stm32cube/mif.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存池对象：&lt;code&gt;sdram_mempool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lua&#34;&gt;Lua&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;5.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/vm/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;已注册的驱动库：&lt;code&gt;xwbd/FK429M1/bm/luamod/ds.c&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SOC: &lt;code&gt;stm32&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; REPL&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行sd卡中的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fatfs&#34;&gt;FATFS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;0.14&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/filesystem/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统：路径以&lt;code&gt;&amp;quot;sd:/&amp;quot;&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;SD卡
&lt;ul&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/cubemx/Core/Src/sdmmc.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libc&#34;&gt;libc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac/newlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准输入、输出/错误：重定向至&lt;strong&gt;USART1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;文件系统：位于SD卡内，从路径&lt;code&gt;sd:/&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;动态内存管理：由SDRAM的内存池提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;电源管理&#34;&gt;电源管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/FK429M1/bm/stm32cube/xwac/xwds/pm.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 条件量</title>
      <link>/docs/lua-manual/xwos/sync/cond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/sync/cond/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwoscond&#34;&gt;&lt;strong&gt;包：xwos.cond&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwoscondnew&#34;&gt;&lt;code&gt;xwos.cond.new()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个条件量&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mycond &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.cond.new()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类condsp&#34;&gt;&lt;strong&gt;类：condsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：条件量对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspbindsel&#34;&gt;&lt;code&gt;condsp:bind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：绑定条件量对象到信号选择器&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ECHRNG: 位置超出范围&lt;/li&gt;
&lt;li&gt;-EALREADY: 同步对象已经绑定到事件对象&lt;/li&gt;
&lt;li&gt;-EBUSY: 通道已经被其他同步对象独占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspunbindsel&#34;&gt;&lt;code&gt;condsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑条件量对象&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspfreeze&#34;&gt;&lt;code&gt;condsp:freeze()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解冻条件量&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-EALREADY：条件量已被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspthaw&#34;&gt;&lt;code&gt;condsp:thaw()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解冻条件量&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-EALREADY：条件量未被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspunicast&#34;&gt;&lt;code&gt;condsp:unicast()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：单播条件量对象，只会唤醒第一个线程&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENEGATIVE：条件量已被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspbroadcast&#34;&gt;&lt;code&gt;condsp:broadcast()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：广播条件量对象，等待队列中的所有线程都会被唤醒&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENEGATIVE：条件量已被冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;condspwaitlock-time&#34;&gt;&lt;code&gt;condsp:wait(lock, time)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待并获取条件量&lt;/li&gt;
&lt;li&gt;参数condsp：(userdata, 输入)类成员函数的this参数，条件量对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数lock：(userdata, 输入)锁对象的强引用指针，可以是
&lt;ul&gt;
&lt;li&gt;spinlock&lt;/li&gt;
&lt;li&gt;seqlock&lt;/li&gt;
&lt;li&gt;mutex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选参数time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 条件量</title>
      <link>/docs/user-manual/sync/cond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/cond/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;条件量常用于多个线程间同步数据。XWOS提供的条件量与大部分系统/语言提供的条件量功能类似，
例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX的&lt;code&gt;pthread_cond_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++的&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Java的&lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python的&lt;code&gt;threading.Condition&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XWOS的条件量还可以用于中断与线程间同步数据。主要包括两个动作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程A等待条件量的**“条件”**成立而阻塞；&lt;/li&gt;
&lt;li&gt;另一个线程B或中断使**“条件”**成立。为了防止两个上下文竞争**“条件”**，
条件量需要和一个**锁**一起使用，锁用于保护**“条件”**不被同时访问。&lt;/li&gt;
&lt;li&gt;XWOS的条件量支持很多种类型的锁：
&lt;ul&gt;
&lt;li&gt;互斥锁：只可用于线程间同步**“条件”**&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;li&gt;顺序锁&lt;/li&gt;
&lt;li&gt;自定义的加锁与解锁函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;条件量的创建初始化与删除销毁&#34;&gt;条件量的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;条件量支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态初始化与销毁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_cond_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_cond_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态创建与删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_cond_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_cond_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;等待条件量&#34;&gt;等待条件量&lt;/h2&gt;
&lt;p&gt;XWOS提供2个API等待条件量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_wait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_cond &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; condid,
                      &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;union&lt;/span&gt; xwlk_ulock lock, xwsq_t lktype,
                      &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkdata, xwsq_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkst);

xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_timedwait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_cond &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; condid,
                           &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;union&lt;/span&gt; xwlk_ulock lock, xwsq_t lktype,
                           &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkdata, xwtm_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; xwtm, xwsq_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; lkst);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;线程会阻塞等待条件量的单播或广播事件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;还会设定一个超时时间，超时后线程被唤醒，并返回错误码-ETIMEDOUT；&lt;/li&gt;
&lt;li&gt;超时的参数&lt;code&gt;xwtm_t * xwtm&lt;/code&gt;用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;所有锁统一使用&lt;code&gt;union xwlk_ulock&lt;/code&gt;指代，此联合中包含所有锁的定义，
实际只是一个指针，具体意义由&lt;code&gt;xwsq_t lktype&lt;/code&gt;决定：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_MTX&lt;/code&gt; 互斥锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表互斥锁（访问方式：&lt;code&gt;lock.osal.mtx&lt;/code&gt;），&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_MTX_UNINTR&lt;/code&gt; 不可中断的互斥锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表互斥锁（访问方式：&lt;code&gt;lock.osal.mtx&lt;/code&gt;），&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SPLK&lt;/code&gt; 自旋锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表自旋锁的指针（访问方式：&lt;code&gt;lock.osal.splk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SQLK_WR&lt;/code&gt; 顺序写锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表顺序锁的指针（访问方式：&lt;code&gt;lock.osal.sqlk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_SQLK_RDEX&lt;/code&gt; 顺序读锁
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表顺序锁的指针（访问方式：&lt;code&gt;lock.osal.sqlk&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;无作用，设置为&lt;code&gt;NULL&lt;/code&gt;即可；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LK_CALLBACK&lt;/code&gt; 自定义的加锁与解锁函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;代表指向&lt;code&gt;struct xwlk_cblk&lt;/code&gt;的指针（访问方式：&lt;code&gt;lock.cb&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockdata&lt;/code&gt;传递给&lt;code&gt;struct xwlk_cblk&lt;/code&gt;中的&lt;code&gt;lock&lt;/code&gt;与&lt;code&gt;unlock&lt;/code&gt;函数的参数；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lkst&lt;/code&gt;指向输出缓冲区，此缓冲区可返回锁的状态：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_LKST_LOCKED&lt;/code&gt;函数返回时，已经上锁；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_LKST_UNLOCKED&lt;/code&gt;函数返回时，未上锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;!!!特别注意!!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当使用了带中断管理的上锁函数时，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_splk_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;或&lt;code&gt;xwos_cond_wait()&lt;/code&gt;返回时需要由用户恢复中断开关，
条件量不会管理中断开关，但可在关闭中断时使用条件量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XWOS的条件量与&lt;code&gt;pthread_cond_t&lt;/code&gt;不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_timedwait()&lt;/code&gt;或&lt;code&gt;xwos_cond_wait()&lt;/code&gt;返回值为&lt;code&gt;XWOK&lt;/code&gt;时
才会对锁进行上锁，如果返回小于0的错误码，不会上锁，是否上锁的状态由&lt;code&gt;lkst&lt;/code&gt;指向的缓冲区返回；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_wait()&lt;/code&gt;无论如何都会等待互斥锁被上锁时才返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;单播条件量&#34;&gt;单播条件量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;单播&lt;/strong&gt;是指唤醒条件量队列中的第一个线程，条件量队列是一个先进先出（FIFO）队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_unicast()&lt;/code&gt;；
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若条件量绑定了信号选择器，单播&lt;strong&gt;不&lt;/strong&gt;会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;广播条件量&#34;&gt;广播条件量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;广播&lt;/strong&gt;是指唤醒条件量队列中的所有线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_cond_broadcast()&lt;/code&gt;；
&lt;ul&gt;
&lt;li&gt;此API可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若条件量绑定了信号选择器，广播会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;条件量的冻结与解冻操作&#34;&gt;条件量的冻结与解冻操作&lt;/h2&gt;
&lt;p&gt;条件量可被冻结，冻结后的条件量不允许单播与广播，但可以被等待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冻结：&lt;code&gt;xwos_cond_freeze()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解冻：&lt;code&gt;xwos_cond_thaw()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定选择器&#34;&gt;绑定选择器&lt;/h2&gt;
&lt;p&gt;可以将条件量绑定到一个特定的信号选择器上。当广播条件量时，可向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_cond_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_cond_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/cond.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 顺序锁</title>
      <link>/docs/lua-manual/xwos/lock/seqlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/lock/seqlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua顺序锁对象&#34;&gt;XWLUA顺序锁对象&lt;/h2&gt;
&lt;p&gt;XWLUA顺序锁对象是由XWOS内核的顺序锁（XWOS的顺序锁只是一种数据类型，并不
是对象）与XWOS内核对象组成，Lua虚拟机通过引用计数管理XWLUA顺序锁对象。&lt;/p&gt;
&lt;p&gt;在Lua语言中，通过&lt;a href=&#34;../../../xwos#%E5%AF%B9%E8%B1%A1%E5%BC%BA%E6%8C%87%E9%92%88&#34;&gt;对象强指针&lt;/a&gt;来表示Lua顺序锁对象。&lt;/p&gt;
&lt;h2 id=&#34;to-be-closed特性&#34;&gt;to-be-closed特性&lt;/h2&gt;
&lt;p&gt;XWLUA顺序锁对象支持Lua语言的&lt;strong&gt;to-be-closed&lt;/strong&gt;特性，Lua顺序锁能在代码块结束时自动解锁。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysqlk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.sqlk.new()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;test&lt;/span&gt;()
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;local&lt;/span&gt; lock&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;close&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mysqlk
  lock:lock(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;wr&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 临界区&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 自动解锁顺序锁&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwossqlk&#34;&gt;&lt;strong&gt;包：xwos.sqlk&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwossqlknew&#34;&gt;&lt;code&gt;xwos.sqlk.new()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个Lua顺序锁&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysqlk &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.sqlk.new()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类sqlksp&#34;&gt;&lt;strong&gt;类：sqlksp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：顺序锁对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sqlksprd_begin&#34;&gt;&lt;code&gt;sqlksp:rd_begin()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：开始读临界区&lt;/li&gt;
&lt;li&gt;参数sqlksp：(userdata, 输入)类成员函数的this参数，Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)锁的顺序值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sqlksprd_retry&#34;&gt;&lt;code&gt;sqlksp:rd_retry()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：测试顺序值是否改变&lt;/li&gt;
&lt;li&gt;参数sqlksp：(userdata, 输入)类成员函数的this参数，Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(boolean)
&lt;ul&gt;
&lt;li&gt;true：顺序值已经改变，读的结果无效&lt;/li&gt;
&lt;li&gt;false：顺序值未改变，读的结果有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sqlkspget_seq&#34;&gt;&lt;code&gt;sqlksp:get_seq()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取顺序锁的顺序值&lt;/li&gt;
&lt;li&gt;参数sqlksp：(userdata, 输入)类成员函数的this参数，Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)锁的顺序值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sqlkspunlock&#34;&gt;&lt;code&gt;sqlksp:unlock()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解锁顺序锁&lt;/li&gt;
&lt;li&gt;参数sqlksp：(userdata, 输入)类成员函数的this参数，Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sqlksplocklktype-t&#34;&gt;&lt;code&gt;sqlksp:lock(lktype, [&amp;quot;t&amp;quot;])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：锁定顺序锁&lt;/li&gt;
&lt;li&gt;参数sqlksp：(userdata, 输入)类成员函数的this参数，Lua顺序锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数lktype：(string, 输入)锁类型，取值
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;wr&amp;rdquo;：写锁&lt;/li&gt;
&lt;li&gt;&amp;ldquo;rdex&amp;rdquo;：独占读锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选参数&amp;quot;t&amp;quot;：(string, 输入)尝试上锁顺序锁，若顺序锁已开启临界区，立即返回，
不会自旋等待。&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-EAGAIN：尝试上锁失败，仅当存在可选参数&amp;quot;t&amp;quot;时才会出现此错误值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 顺序锁</title>
      <link>/docs/user-manual/lock/seqlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/seqlock/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;顺序锁是对自旋锁改良后的锁，顺序锁中包含一个自旋锁，并且带有一个顺序值。
顺序锁将临界区分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何对顺序锁临界区的&lt;strong&gt;写&lt;/strong&gt;操作都是独占的，每次&lt;strong&gt;写&lt;/strong&gt;操作时，会先上锁自旋锁，
然后将顺序值加1，解锁之前也会将顺序值再加1。言外之意，每次写完之后，顺序值都加2，顺序值是&lt;strong&gt;偶数&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非独占读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果多个CPU进行的是&lt;strong&gt;只读&lt;/strong&gt;操作，它们可以同时进入&lt;strong&gt;非独占读临界区&lt;/strong&gt;。
CPU进入非独占读临界区无需获得自旋锁，但需要先测试顺序值是否为&lt;strong&gt;偶数&lt;/strong&gt;，并记录此时的顺序值。
当退出读临界区时，需要再次读取顺序值，并与之前记录的值进行比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果相等，表示读的结果有效；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果不相等，则表示读的过程中别的CPU进行了写操作，此次的读操作无效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独占读&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果希望读临界区不会被写操作无效，可以使用独占读的方式，
独占读会排斥其他CPU上的独占写和独占读操作，但不会排斥非独占读，
其他CPU依然可以进入非独占读临界区。&lt;/p&gt;
&lt;h2 id=&#34;顺序锁的初始化&#34;&gt;顺序锁的初始化&lt;/h2&gt;
&lt;p&gt;顺序锁基于自旋锁，因此同自旋锁一样，不需要提供动态创建、删除以及销毁等方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自旋锁的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sqlk_init&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_sqlk &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; sql);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;临界区&#34;&gt;临界区&lt;/h2&gt;
&lt;h3 id=&#34;访问写临界区&#34;&gt;访问写临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
        xwos_sqlk_wr_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 写临界区：临界区只对线程上下文是安全的 */&lt;/span&gt;
        xwos_sqlk_wr_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与&lt;strong&gt;spinlock&lt;/strong&gt;类似，&lt;strong&gt;sqlk_wr&lt;/strong&gt;还提供各种版本的API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭/打开CPU中断：临界区对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复CPU中断：临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_cpuirqrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开外设中断：临界区对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复外设中断：临界区内有子临界区，对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_irqsrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开中断底半部：临界区对线程上下文、中断底半部是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_lock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_trylock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_wr_unlock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问独占读临界区&#34;&gt;访问独占读临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 自旋等待 */&lt;/span&gt;
        xwos_sqlk_rdex_lock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 独占读临界区 */&lt;/span&gt;
        xwos_sqlk_rdex_unlock(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与&lt;strong&gt;spinlock&lt;/strong&gt;类似，&lt;strong&gt;sqlk_rdex&lt;/strong&gt;还提供各种版本的API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭/打开CPU中断：临界区对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_cpuirq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复CPU中断：临界区里面还有子临界区，对线程、中断、中断底半部上下文都是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_cpuirqsv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_cpuirqrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开外设中断：临界区对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_irqs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存/恢复外设中断：临界区内有子临界区，对线程上下文、特定的外设中断是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_irqssv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_irqsrs()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭/打开中断底半部：临界区对线程上下文、中断底半部是安全的
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_lock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_trylock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_sqlk_rdex_unlock_bh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问非独占读临界区&#34;&gt;访问非独占读临界区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;{
        seq &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos_sqlk_rd_begin(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock); &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 进入临界区前先获取顺序值 */&lt;/span&gt;
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;do&lt;/span&gt; {
                &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 非独占读临界区 */&lt;/span&gt;
        } &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; (xwos_sqlk_rd_retry(&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span style=&#34;&#34;&gt;，&lt;/span&gt; seq)); &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 测试顺序值是否发生了变化 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/seqlock.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: errno</title>
      <link>/docs/note/newlib/errno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/note/newlib/errno/</guid>
      <description>
        
        
        &lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Newlib中，标准头文件&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;的&lt;code&gt;errno&lt;/code&gt;是一个宏：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;errno.h&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define errno (*__errno())
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt;);

&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt;()
{
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;_REENT&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;_errno;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Newlib的底层代码对errno的处理非常奇怪，会将errno undef掉，然后重新定义成一个&lt;strong&gt;变量&lt;/strong&gt;，
并要求libgloss中提供&lt;strong&gt;变量&lt;/strong&gt;定义：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;newlib/libc/reent/readr.c&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#undef errno
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; errno;

_ssize_t
&lt;span style=&#34;color:#00a000&#34;&gt;_read_r&lt;/span&gt; (&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; _reent &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;ptr,
     &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; fd,
     &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;buf,
     size_t cnt)
{
  _ssize_t ret;

  errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; ((ret &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (_ssize_t)_read (fd, buf, cnt)) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; errno &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
    ptr&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;_errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; errno;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* &amp;lt;libgloss/libnosys/read.c&amp;gt; */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#undef errno
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; errno;

&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#00a000&#34;&gt;_read&lt;/span&gt; (&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;   file,
        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;ptr,
        &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt;   len)
{
  errno &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ENOSYS;
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;libgloss提供与平台相关的启动代码、I/O支持、系统函数等，其中libnosys是一个空实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移植方法&#34;&gt;移植方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XWOS在每个线程对象结构体中定义了一个&lt;code&gt;__errno&lt;/code&gt;变量，并
重新覆盖实现了&lt;code&gt;int * __errno(void)&lt;/code&gt;函数，
返回&lt;strong&gt;当前&lt;/strong&gt;线程对象的&lt;code&gt;__errno&lt;/code&gt;的地址：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;__errno&lt;/span&gt;()
{
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_thd &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; thd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos_cthd_self();
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;thd&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;osthd.newlib.__errno;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;当使用&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;中的&lt;code&gt;errno&lt;/code&gt;宏时，就可获取线程自身的&lt;code&gt;__errno&lt;/code&gt;，不再
依赖libgloss。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: UART</title>
      <link>/docs/lua-manual/xwds/uart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwds/uart/</guid>
      <description>
        
        
        &lt;h2 id=&#34;uart对象&#34;&gt;UART对象&lt;/h2&gt;
&lt;p&gt;XWLUA不提供动态创建硬件的方法，硬件的创建与初始化都是在C语言中完成。因此，
XWLUA虚拟机只提供C语言的API，用于将硬件的对象注册到虚拟机中。&lt;/p&gt;
&lt;h2 id=&#34;c-api参考&#34;&gt;C API参考&lt;/h2&gt;
&lt;h4 id=&#34;xwlua_dmauartc_register&#34;&gt;xwlua_dmauartc_register&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_dmauartc_register(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L,
                             &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name,
                             &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwds_dmauartc &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; uart)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：注册UART对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) UART在虚拟机中的变量名&lt;/li&gt;
&lt;li&gt;参数uart：(输入) UART对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwlua_open_brdlibs&lt;/span&gt;(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L)
{
        xwlua_uart_register(L, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;usart1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;stm32cube_usart1_cb);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwlua_dmauartc_unregister&#34;&gt;xwlua_dmauartc_unregister&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_dmauartc_unregister(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：删除UART对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) UART在虚拟机中的变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwdsuart&#34;&gt;&lt;strong&gt;包：xwds.uart&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwdsuartrxuart-size-op&#34;&gt;xwds.uart.rx(uart, size[, op])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：接收数据&lt;/li&gt;
&lt;li&gt;参数uart：(userdata, 输入)BSP中注册的UART控制器&lt;/li&gt;
&lt;li&gt;参数size：(number, 输入)期望接收的字节数&lt;/li&gt;
&lt;li&gt;可选参数op：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;t&amp;rdquo;：(string, 输入)尝试接收，若接收队列为空，立即返回，不会等待；&lt;/li&gt;
&lt;li&gt;time：(number, 输入)若接收队列为空，期望等待的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (number)实际接收的字节数, (string)接收到的数据}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ENODATA：尝试上锁失败，仅当存在可选参数&amp;quot;t&amp;quot;或time为0时才会出现此错误值&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT: 超时&lt;/li&gt;
&lt;li&gt;-EINTR: 等待被中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 从usart1接收数据，最大接收10个字节，期望等待时间2s&lt;/span&gt;
rc, rxsize, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.uart.rx(usart1, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwdsuarttxuart-txd-size-time&#34;&gt;xwds.uart.tx(uart, txd, size[, time])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：发送数据&lt;/li&gt;
&lt;li&gt;参数uart：(userdata, 输入)BSP中注册的UART控制器&lt;/li&gt;
&lt;li&gt;参数txd：(string, 输入)待发送的字节数组&lt;/li&gt;
&lt;li&gt;参数size：(number, 输入)待发送的字节数&lt;/li&gt;
&lt;li&gt;参数time：(number, 输入)期望等待的时间&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (number)实际发送的字节数}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT: 超时&lt;/li&gt;
&lt;li&gt;-EINTR: 等待被中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 打包{88, 87, 79, 83}&lt;/span&gt;
txd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;BBBB&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 发送打包数据，期望等待时间2s&lt;/span&gt;
rc, txsize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.uart.tx(usart1, txd, &lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;txd, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 事件标志</title>
      <link>/docs/lua-manual/xwos/sync/flg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/sync/flg/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwosflg&#34;&gt;&lt;strong&gt;包：xwos.flg&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosflgnewnum&#34;&gt;&lt;code&gt;xwos.flg.new(num)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个事件标志&lt;/li&gt;
&lt;li&gt;参数num：(number, 输入)事件的数量&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;myflg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.flg.new(&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类flgsp&#34;&gt;&lt;strong&gt;类：flgsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：事件标志对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspbmp&#34;&gt;&lt;code&gt;flgsp:bmp()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个位图，位的数量与事件标志中的事件数量相等&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的位图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspnum&#34;&gt;&lt;code&gt;flgsp:num()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取事件标志中事件（位）的数量&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspbindsel&#34;&gt;&lt;code&gt;flgsp:bind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：绑定事件标志对象到信号选择器&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ECHRNG: 位置超出范围&lt;/li&gt;
&lt;li&gt;-EALREADY: 同步对象已经绑定到事件对象&lt;/li&gt;
&lt;li&gt;-EBUSY: 通道已经被其他同步对象独占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspunbindsel&#34;&gt;&lt;code&gt;flgsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑事件标志对象&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspunbindsel-1&#34;&gt;&lt;code&gt;flgsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑事件标志对象&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspread&#34;&gt;&lt;code&gt;flgsp:read()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：发布事件标志&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (userdata)位图}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位图：事件标志位图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgsps1mmsk&#34;&gt;&lt;code&gt;flgsp:s1m(msk)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：同时设置多个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)事件的位图掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgsps1ipos&#34;&gt;&lt;code&gt;flgsp:s1i(pos)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：设置单个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)事件的序号&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspc0mmsk&#34;&gt;&lt;code&gt;flgsp:c0m(msk)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：同时清除多个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)事件的位图掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspc0ipos&#34;&gt;&lt;code&gt;flgsp:c0i(pos)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：清除单个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)事件的序号&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspx1mmsk&#34;&gt;&lt;code&gt;flgsp:x1m(msk)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：同时翻转多个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)事件的位图掩码&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspx1ipos&#34;&gt;&lt;code&gt;flgsp:x1i(pos)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：翻转单个事件标志位&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数pos：(number, 输入)事件的序号&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;&amp;lt;0：错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flgspwaittrigger-consumption-origin-msk-op&#34;&gt;&lt;code&gt;flgsp:wait(trigger, consumption, origin, msk, [op])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待并获取事件标志&lt;/li&gt;
&lt;li&gt;参数flgsp：(userdata, 输入)类成员函数的this参数，事件标志对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数trigger：(string, 输入)事件触发条件
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;sa&amp;rdquo;：所有事件位被置1触发&lt;/li&gt;
&lt;li&gt;&amp;ldquo;so&amp;rdquo;：任意事件位被置1触发&lt;/li&gt;
&lt;li&gt;&amp;ldquo;ca&amp;rdquo;：所有事件位被清0触发&lt;/li&gt;
&lt;li&gt;&amp;ldquo;co&amp;rdquo;：任意事件位被清0触发&lt;/li&gt;
&lt;li&gt;&amp;ldquo;ta&amp;rdquo;：所有事件位发生翻转触发&lt;/li&gt;
&lt;li&gt;&amp;ldquo;to&amp;rdquo;：任意事件位发生翻转触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数consumption：(boolean, 输入)是否消费事件，线程可以选择是否&lt;strong&gt;消费&lt;/strong&gt;事件，
&lt;strong&gt;消费&lt;/strong&gt;事件是指，当线程等到事件被唤醒，可以选择是否&lt;strong&gt;清除&lt;/strong&gt;事件标志。
&lt;strong&gt;清除&lt;/strong&gt;的含义是：
&lt;ul&gt;
&lt;li&gt;当线程等待的是位图中的事件位被置1，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位清0；&lt;/li&gt;
&lt;li&gt;当线程等待的是位图中的事件位被清0，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位置1；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数origin：(userdata)事件的位图掩码
&lt;ul&gt;
&lt;li&gt;当参数trigger取值&amp;quot;sa&amp;quot;，&amp;ldquo;so&amp;rdquo;，&amp;ldquo;ca&amp;rdquo;，&amp;ldquo;co&amp;rdquo;：(输出) 返回触发时事件对象中位图状态&lt;/li&gt;
&lt;li&gt;当参数trigger取值&amp;quot;ta&amp;quot;，&amp;ldquo;to&amp;rdquo;：
&lt;ul&gt;
&lt;li&gt;(输入) 用于比较的初始值&lt;/li&gt;
&lt;li&gt;(输出) 返回触发时事件对象中位图状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)事件的位图掩码，表示只关注掩码部分的事件&lt;/li&gt;
&lt;li&gt;可选参数op：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;t&amp;rdquo;：(string, 输入)尝试等待并获取事件标志，若事件标志的值小于等于0，立即返回，
不会等待；&lt;/li&gt;
&lt;li&gt;time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-ENODATA：尝试失败，仅当存在可选参数&amp;quot;t&amp;quot;时才会出现此错误值&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 事件标志</title>
      <link>/docs/user-manual/sync/flg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/flg/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;当系统需要处理很多事件，如果每个事件都绑定一个特定的条件量，
每个条件量又由一个线程进行等待处理，会导致系统需要大量内存来创建条件量和线程，
这种方法在小内存的MCU上显然不可行。条件量属于操作系统比较底层的功能，
用法虽然灵活但很复杂。因此，XWOS基于条件量实现了事件标志的功能。&lt;/p&gt;
&lt;p&gt;事件标志使用位图来管理一组事件，位图中的每个位代表一个事件，
当一个或多个事件状态发生变化时，事件对应的位也会发生变化，并唤醒正在等待的线程。
线程唤醒后，就可从事件位图中获取事件的状态。&lt;/p&gt;
&lt;p&gt;XWOS的事件标志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程可以等待位图中的事件位被置1，也可以等待事件位被清0；&lt;/li&gt;
&lt;li&gt;线程可以等待位图中的事件位同时被置1（事件与事件之间是逻辑&lt;strong&gt;与&lt;/strong&gt;的关系），
也可以等待其中任意一个位被置1（事件与事件之间是逻辑&lt;strong&gt;或&lt;/strong&gt;的关系）；&lt;/li&gt;
&lt;li&gt;线程可以等待位图中的事件位同时被清0（事件与事件之间是逻辑&lt;strong&gt;与&lt;/strong&gt;的关系），
也可以等待其中任意一个位被清0（事件与事件之间是逻辑&lt;strong&gt;或&lt;/strong&gt;的关系）；&lt;/li&gt;
&lt;li&gt;线程可以选择是否&lt;strong&gt;消费&lt;/strong&gt;事件，&lt;strong&gt;“消费”&lt;strong&gt;事件是指，当线程等到事件被
唤醒，可以选择是否&lt;/strong&gt;清除&lt;/strong&gt;事件标志。&lt;strong&gt;清除&lt;/strong&gt;的含义是：
&lt;ul&gt;
&lt;li&gt;当线程等待的是位图中的事件位被置1，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位清0；&lt;/li&gt;
&lt;li&gt;当线程等待的是位图中的事件位被清0，&lt;strong&gt;清除&lt;/strong&gt;是指将这些位置1；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程可以等待事件标志位发生&lt;strong&gt;翻转&lt;/strong&gt;，&lt;strong&gt;翻转&lt;/strong&gt;是指事件标志位由1变为0，或
由0变为1，当线程等待的是标志位发生&lt;strong&gt;翻转&lt;/strong&gt;，不可&lt;strong&gt;清除&lt;/strong&gt;事件标志；&lt;/li&gt;
&lt;li&gt;事件位图中的位数可在创建时指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事件标志的创建初始化与删除销毁&#34;&gt;事件标志的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;事件标志支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_flg_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_flg_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_flg_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_flg_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;等待事件&#34;&gt;等待事件&lt;/h2&gt;
&lt;p&gt;XWOS提供3个API等待触发事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_trywait()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只是测试一下事件标志的触发事件，如果失败，就返回&lt;code&gt;-ENODATA&lt;/code&gt;，不会阻塞调用的线程；&lt;/li&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_wait()&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;线程会阻塞等待事件标志的触发事件；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_timedwait()&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用。&lt;/li&gt;
&lt;li&gt;线程会限时阻塞等待事件标志的触发事件；&lt;/li&gt;
&lt;li&gt;超时的参数用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;触发条件&#34;&gt;触发条件&lt;/h3&gt;
&lt;p&gt;当调用等待事件的API时，需要指定一个触发条件（参数：trigger）。
触发条件分为&lt;strong&gt;电平触发&lt;/strong&gt;和&lt;strong&gt;边沿触发&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;电平触发&#34;&gt;电平触发&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;电平触发&lt;/strong&gt;的概念来源于数字电路中，是一种类比，是指事件特定的状态（1或0）
产生唤醒信号，下面的触发条件为电平触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_SET_ALL&lt;/code&gt; 所有事件位被置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_SET_ANY&lt;/code&gt; 任意事件位被置1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_CLR_ALL&lt;/code&gt; 所有事件位被清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_CLR_ANY&lt;/code&gt; 任意事件位被清0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;边沿触发&#34;&gt;边沿触发&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;边沿触发&lt;/strong&gt;的概念来源于数字电路中，是一种类比，是指事件状态发生改变
（1变0或0变1）时产生的唤醒信号，下面的触发条件为边沿触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_TGL_ALL&lt;/code&gt; 所有事件位发生翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XWOS_FLG_TRIGGER_TGL_ANY&lt;/code&gt; 任意事件位发生翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清除触发事件&#34;&gt;清除触发事件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当采用&lt;strong&gt;电平触发&lt;/strong&gt;时，需要在触发后清除事件标志位，防止事件重复触发，可以
在调用等待事件的API指定参数action为&lt;code&gt;XWOS_FLG_ACTION_CONSUMPTION&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当采用&lt;strong&gt;边沿触发&lt;/strong&gt;时，不需要清除事件标志位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;产生触发事件&#34;&gt;产生触发事件&lt;/h2&gt;
&lt;p&gt;XWOS提供6个API产生触发事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1m()&lt;/code&gt;: 同时设置多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1i()&lt;/code&gt;: 设置单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0m()&lt;/code&gt;: 同时清除多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0i()&lt;/code&gt;: 清除单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1m()&lt;/code&gt;: 同时翻转多个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1i()&lt;/code&gt;: 翻转单个事件标志位
&lt;ul&gt;
&lt;li&gt;可在中断上下文、中断底半部、线程上下文中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定选择器&#34;&gt;绑定选择器&lt;/h2&gt;
&lt;p&gt;可以将事件标志绑定到一个特定的信号选择器上，当触发事件产生时，
可向信号选择器发送**“选择信号”**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定：&lt;code&gt;xwos_flg_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑：&lt;code&gt;xwos_flg_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/flg.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 互斥锁</title>
      <link>/docs/lua-manual/xwos/lock/mutex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/lock/mutex/</guid>
      <description>
        
        
        &lt;h2 id=&#34;to-be-closed特性&#34;&gt;to-be-closed特性&lt;/h2&gt;
&lt;p&gt;互斥锁对象支持Lua语言的&lt;strong&gt;to-be-closed&lt;/strong&gt;特性，互斥锁能在代码块结束时自动解锁。&lt;/p&gt;
&lt;h2 id=&#34;可重入锁&#34;&gt;可重入锁&lt;/h2&gt;
&lt;p&gt;互斥锁是可重入锁，同一个Lua线程可以反复Lock。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mymtx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.mtx.new()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;test&lt;/span&gt;()
  &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;local&lt;/span&gt; lock&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;close&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mymtx
  lock:lock()
  &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 临界区&lt;/span&gt;
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 自动解锁互斥锁&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwosmtx&#34;&gt;&lt;strong&gt;包：xwos.mtx&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosmtxnew&#34;&gt;&lt;code&gt;xwos.mtx.new()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个互斥锁&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的互斥锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mymtx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.mtx.new()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类mtxsp&#34;&gt;&lt;strong&gt;类：mtxsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：互斥锁对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mtxspunlock&#34;&gt;&lt;code&gt;mtxsp:unlock()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：解锁互斥锁&lt;/li&gt;
&lt;li&gt;参数mtxsp：(userdata, 输入)类成员函数的this参数，互斥锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-EOWNER：线程并没有锁定此互斥锁&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mtxsplockop&#34;&gt;&lt;code&gt;mtxsp:lock([op])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：锁定互斥锁&lt;/li&gt;
&lt;li&gt;参数mtxsp：(userdata, 输入)类成员函数的this参数，互斥锁对象的强引用指针&lt;/li&gt;
&lt;li&gt;可选参数op：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;t&amp;rdquo;：(string, 输入)尝试上锁互斥锁，若互斥锁已开启临界区，立即返回，
不会等待；&lt;/li&gt;
&lt;li&gt;time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-EINVAL：参数错误&lt;/li&gt;
&lt;li&gt;-ENODATA：尝试上锁失败，仅当存在可选参数&amp;quot;t&amp;quot;时才会出现此错误值&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mymtx &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.mtx.new()
mymtx:lock() &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 上锁mymtx，若上锁失败，当前线程会阻塞等待&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mymtx:lock(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 尝试上锁mymtx，若上锁失败，会返回-ENODATA&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mymtx:lock(&lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;) &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 上锁mymtx，若上锁失败，当前线程会阻塞等待，但最多等待1s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 互斥锁</title>
      <link>/docs/user-manual/lock/mutex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/lock/mutex/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;互斥锁只能在线程上下文中使用，只能保证临界区对线程是安全的。
任何操作系统，都不可在&lt;strong&gt;非&lt;/strong&gt;线程上下文中使用互斥锁。
与自旋锁及其派生锁不同，等待互斥锁的线程会被阻塞，并让出CPU。&lt;/p&gt;
&lt;p&gt;互斥锁存在优先级反转问题：&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 810px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/docs/user-manual/lock/mutex/priority-inversion_hu06d113db6caaf8381d16863409fb983c_97009_800x800_fill_catmullrom_smart1_3.png&#34; width=&#34;800&#34; height=&#34;800&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0 text-center&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
XWOS互斥锁的优先级反转问题
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: xwos.tech / CC-BY&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;p&gt;XWOS内核采取优先级天花板和优先级继承的混会策略解决此问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程和互斥锁都拥有优先级，它们在创建时需要指定一个&lt;strong&gt;静态优先级&lt;/strong&gt;，
当线程持有互斥锁时，线程可以获取互斥锁的优先级作为&lt;strong&gt;动态优先级&lt;/strong&gt;，
当互斥锁被线程等待时，互斥锁可以获取线程的优先级作为&lt;strong&gt;动态优先级&lt;/strong&gt;，
最终的优先级由&lt;strong&gt;静态优先级&lt;/strong&gt;和&lt;strong&gt;动态优先级&lt;/strong&gt;比较，取较大的一个；&lt;/li&gt;
&lt;li&gt;假设线程A优先级低，线程B的优先级中，线程C的优先级高。
线程A已经获得锁的情况下，线程C等待锁，会临时提高锁的优先级，
锁的优先级再传递给线程A，此时线程A不会被线程B抢占。&lt;/li&gt;
&lt;li&gt;优先级可以无限继承：假设线程A的优先级最低，线程T1、T2、…… 、Tn
的优先级依次递增，系统中有互斥锁L、M1、M2、…、Mn。
假设A持有L，T1持有M1去等待L，T2持有M2去等待M1，T3持有M3去等待M2，以此类推，
Tn持有Mn去等待Mn-1。由此形成优先级传递链：&lt;code&gt;Tn-&amp;gt;Mn-1-&amp;gt;Tn-1-&amp;gt;&amp;amp;#x2026;-&amp;gt;M3-&amp;gt;T3-&amp;gt;M2-&amp;gt;T2-&amp;gt;M1-&amp;gt;T1-&amp;gt;L-&amp;gt;A&lt;/code&gt;，
Tn的优先级将会依次传递到Mn-1、Tn-1、…… 、M3、T3、M2、T2、M1、T1、L、A。&lt;/li&gt;
&lt;li&gt;如何寻找互斥锁与线程的&lt;strong&gt;动态优先级&lt;/strong&gt;，是寻找最大值的问题，因此可以采用与
时间树类似的方法，使用红黑树解决此问题：
&lt;ul&gt;
&lt;li&gt;使用一个&lt;strong&gt;rightmost&lt;/strong&gt;指针指向最大值，需要时可直接从&lt;strong&gt;rightmost&lt;/strong&gt;快速获取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rightmost&lt;/strong&gt;从红黑树中删除时，按照二叉树的性质，下一任&lt;strong&gt;rightmost&lt;/strong&gt;是前任
的左孩子（即前驱）。如果前任的左孩子为叶子，下一任&lt;strong&gt;rightmost&lt;/strong&gt;一定是前任
的父节点。&lt;/li&gt;
&lt;li&gt;红黑树中不允许存在关键字相等的节点，因此拥有相同优先级的节点相互连接成链表。&lt;/li&gt;
&lt;li&gt;互斥锁解锁时，从等待队列中选择最高优先级的线程获取互斥锁，若最高优先级的线程
不止一个，按照先进先出的方法选取线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;互斥锁的创建初始化与删除销毁&#34;&gt;互斥锁的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;互斥锁支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_mtx_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_mtx_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_mtx_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_mtx_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/lock/mtx.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 伙伴算法分配器</title>
      <link>/docs/user-manual/mm/bma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/mm/bma/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;伙伴算法分配器在分配时，会将内存不断地二等分，直到切割到能满足要求的最小内存大小为止。
释放时会检查与之相邻并等长的内存块（称为伙伴）是否也空闲，
如果是，就和“伙伴”合并成更大的内存块，
然后继续检测合并后的内存块是否也存在可以合并的伙伴，一直向上合并到不能合并为止。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持释放操作；&lt;/li&gt;
&lt;li&gt;支持大小不固定的内存申请操作；&lt;/li&gt;
&lt;li&gt;反复申请与释放不会造成内存碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;代码稍微复杂；&lt;/li&gt;
&lt;li&gt;因为存在合并与切割的循环，申请与释放操作的所需要的时间不是特别稳定；&lt;/li&gt;
&lt;li&gt;内存大小固定为2的指数，如果申请的内存过小，会造成内存浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用性：对内存复用性要求高的应用场合。&lt;/li&gt;
&lt;li&gt;上下文的安全性：在任何上下文（中断、中断底半部、线程）都是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/mm/bma.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 微行电子MiniStm32H750</title>
      <link>/docs/quick-guide/stm32/weactministm32h750/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/weactministm32h750/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;WeActMiniStm32H750.jpg&#34; alt=&#34;img&#34; title=&#34;WeActMiniStm32H750&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCU：STM32H750&lt;/li&gt;
&lt;li&gt;更多介绍：参考&lt;a href=&#34;https://gitee.com/WeAct-TC/MiniSTM32H7xx.git&#34;&gt;电路板主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电路板目录：&lt;code&gt;xwbd/WeActMiniStm32H750&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译集成环境可参考：&lt;a href=&#34;../env&#34;&gt;开发环境搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;
&lt;p&gt;WeActMiniStm32H750开发板使用外置的QSPI Flash存储代码，因此工程分为Bootloader和XWOS。&lt;/p&gt;
&lt;h3 id=&#34;bootloader&#34;&gt;Bootloader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;描述：位于内置Flash，负责初始化QSPI Flash后跳转至QSPI Flash中执行代码；&lt;/li&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/WeActMiniStm32H750Bootloader.git&#34;&gt;https://gitee.com/xwos/WeActMiniStm32H750Bootloader.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/WeActMiniStm32H750Bootloader.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xwos&#34;&gt;XWOS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;描述：XWOS，位于QSPI Flash&lt;/li&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/WeActMiniStm32H750.git&#34;&gt;https://gitee.com/xwos/WeActMiniStm32H750.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/WeActMiniStm32H750.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;导入工程到stm32cubeide&#34;&gt;导入工程到STM32CubeIDE&lt;/h2&gt;
&lt;p&gt;工程需放在STM32CubeIDE的工作目录内（即STM32CubeIDE启动时指定的目录）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置编译环境&#34;&gt;设置编译环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单**&amp;ldquo;Project &amp;ndash;&amp;gt; Properties &amp;ndash;&amp;gt; C/C++ Build &amp;ndash;&amp;gt; Environment&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;点击**&amp;ldquo;Restore Defaults&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;修改Debug配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Debug.png&#34; alt=&#34;img&#34; title=&#34;Debug配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Release配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Release.png&#34; alt=&#34;img&#34; title=&#34;Release配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量path设置&#34;&gt;环境变量&lt;strong&gt;PATH&lt;/strong&gt;设置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量
&lt;ul&gt;
&lt;li&gt;将STM32CubeIDE自带的工具链路径从PATH环境变量中删除；&lt;/li&gt;
&lt;li&gt;将XWMCU工具链的路径放置到PATH环境变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH.svg&#34; alt=&#34;img&#34; title=&#34;设置PATH&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx配置工程&#34;&gt;STM32CubeMX配置工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/WeActMiniStm32H750.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为&lt;strong&gt;0&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;p&gt;打开菜单&lt;strong&gt;Run &amp;ndash;&amp;gt; Debug Configurations&amp;hellip;&lt;/strong&gt;，根据仿真器类型，选择调试配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WeActMiniStm32H750&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;STLink GDB Server&lt;/strong&gt; + &lt;strong&gt;STLink调试器&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Debug_Configurations.png&#34; alt=&#34;img&#34; title=&#34;调试配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置外部QSPI Flash的下载算法
&lt;ul&gt;
&lt;li&gt;算法文件：&lt;code&gt;xwbd/WeActMiniStm32H750/cfg/stldr/WeActMiniStm32H750.stldr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要拷贝到STM32CubeIDE的安装目录： &lt;code&gt;plugins/com.st.stm32cube.ide.mcu.externaltools.cubeprogrammer.&amp;lt;版本号&amp;gt;/tools/bin/ExternalLoader&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;设置&lt;strong&gt;External Loader&lt;/strong&gt;为&lt;strong&gt;W25Q128_STM32H7xx_WeActStudio, 0x90000000, SPI_FLASH, WeActMiniStm32H750.stldr&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Debug-ExternalLoader.svg&#34; alt=&#34;img&#34; title=&#34;设置ExternalLoader&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试步骤&#34;&gt;调试步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;准备一张SD卡，格式化为FAT32文件系统；&lt;/li&gt;
&lt;li&gt;将文件夹&lt;code&gt;xwam/example/lua&lt;/code&gt;内的lua脚本，拷贝到SD卡内；&lt;/li&gt;
&lt;li&gt;将SD卡插入开发板；&lt;/li&gt;
&lt;li&gt;使用USB串口与开发板上的USART1(TX:PB14,RX:PB15)链接；&lt;/li&gt;
&lt;li&gt;打开终端工具（windows可选putty、SecretCRT，Linux可选gtkterm、picocom、minicom），
串口参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;上电，并在STM32CubeIDE中启动调试，等待MCU运行到初始断点；&lt;/li&gt;
&lt;li&gt;开始单步调试或连续运行调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试技巧&#34;&gt;调试技巧&lt;/h3&gt;
&lt;h4 id=&#34;关闭dcache&#34;&gt;关闭DCache&lt;/h4&gt;
&lt;p&gt;ARMv7-m7内核的MCU带有Cache，常常会对定位程序BUG带来困扰。
将下面的宏开关注释掉或定义改为0后可关闭Cache：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* xwbd/WeActMiniStm32H750/bm/stm32cube/cfg.h */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_DCACHE             1
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_ICACHE             1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行过程&#34;&gt;运行过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../../lua-manual/xwlua-repl.png&#34; alt=&#34;img&#34; title=&#34;XWLUA交互式解释器&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序入口：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/main/main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动流程：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_main()&lt;/code&gt;创建一个主线程&lt;code&gt;main_task()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;依次调用各个&lt;strong&gt;玄武模块&lt;/strong&gt;的&lt;code&gt;xxx_start()&lt;/code&gt;函数完成对各个模块加载；&lt;/li&gt;
&lt;li&gt;开始并行执行各个模块中创建的线程；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;XWOS中有很多示例，可帮助用户快速了解API的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程
&lt;ul&gt;
&lt;li&gt;创建线程：&lt;code&gt;xwam/example/thread/create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程睡眠：&lt;code&gt;xwam/example/thread/sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时器：&lt;code&gt;xwam/example/timer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步
&lt;ul&gt;
&lt;li&gt;信号量：&lt;code&gt;xwam/example/sync/semaphore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件量：&lt;code&gt;xwam/example/sync/condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件标志：&lt;code&gt;xwam/example/sync/flg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程栅栏：&lt;code&gt;xwam/example/sync/br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信号选择器：&lt;code&gt;xwam/example/sync/sel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁
&lt;ul&gt;
&lt;li&gt;中断管理：&lt;code&gt;xwam/example/lock/cpuirq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自旋锁：&lt;code&gt;xwam/example/lock/spinlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;顺序锁：&lt;code&gt;xwam/example/lock/seqlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;互斥锁：&lt;code&gt;xwam/example/lock/mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;简单内存分配器：&lt;code&gt;xwam/example/mm/sma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存切片分配器：&lt;code&gt;xwam/example/mm/memslice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伙伴算法分配器：&lt;code&gt;xwam/example/mm/bma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池：只用于比较大的内存区域的管理，WeActMiniStm32H750工程已经为AXI-SRAM建立了内存池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;玄武C库
&lt;ul&gt;
&lt;li&gt;CRC：&lt;code&gt;xwam/example/xwlib/crc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个示例中都有一个启动函数&lt;code&gt;xxx_start()&lt;/code&gt;，可在&lt;code&gt;xwbd/WeActMiniStm32H750/bm/main/main.c&lt;/code&gt;文件中
的主线程&lt;code&gt;main_task()&lt;/code&gt;启动示例，但最好一次只启动一个示例，避免日志冲突。&lt;/p&gt;
&lt;p&gt;实验过程中最好将Lua虚拟机关闭，防止竞争串口导致输出混乱。方法是将
配置文件&lt;code&gt;xwbd/WeActMiniStm32H750/cfg/xwem.h&lt;/code&gt;中的配置&lt;code&gt;XWEMCFG_vm_lua&lt;/code&gt;改为0。&lt;/p&gt;
&lt;h2 id=&#34;系统集成的原理&#34;&gt;系统集成的原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有移植的第三方组件、驱动包、示例代码等都是以&lt;strong&gt;玄武模块&lt;/strong&gt;独立编译成静态库**.a**，
之后再将它们链接成**ELF**文件，再由**ELF**生成**bin**、**hex**和**smot**文件；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个独立的子工程并进行独立编译，设计上借鉴了安卓系统的&lt;strong&gt;Android.mk&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;中都有一个&lt;code&gt;xwmo.mk&lt;/code&gt;文件，其中定义的&lt;strong&gt;编译参数&lt;/strong&gt;、&lt;strong&gt;头文件路径&lt;/strong&gt;等
&lt;strong&gt;只&lt;/strong&gt;对&lt;strong&gt;当前&lt;/strong&gt;的&lt;strong&gt;玄武模块&lt;/strong&gt;生效；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个封闭的包，外部一般不能直接引用内部头文件，需要封装对外可见的
&lt;strong&gt;类型&lt;/strong&gt;以及&lt;strong&gt;接口函数&lt;/strong&gt;，并统一放在专门的&lt;strong&gt;API头文件&lt;/strong&gt;内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API头文件&lt;/strong&gt;通常以&lt;strong&gt;mif.h&lt;/strong&gt;作为文件名，含义是&lt;strong&gt;模块接口(Module InterFace)&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XWOS内已经包含了大量&lt;strong&gt;玄武模块&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd&lt;/code&gt;：外设芯片的驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwam&lt;/code&gt;：示例与应用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd&lt;/code&gt;：中间件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwem&lt;/code&gt;：第三方开源软件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;玄武模块&lt;/strong&gt;的具体信息可以参考&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;用户手册-构建系统-玄武模块&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码启动流程&#34;&gt;代码启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;：初始化时钟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm32cube_init()&lt;/code&gt;：初始化内存管理、cache、GPIO、DMA等基础设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;：初始化其他设备、启动其他子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;bsp&#34;&gt;BSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32Cube模块：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/WeActMiniStm32H750.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX生成源码目录：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配XWOS的源码：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中断向量表：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/IVT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;中断向量表是使用命令自动生成的&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/WeActMiniStm32H750/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端UART
&lt;ul&gt;
&lt;li&gt;设备：USART1&lt;/li&gt;
&lt;li&gt;参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwmd/ds/uart/dma.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/xwds/uart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/Core/Src/usart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意：HAL库中的驱动存在BUG，XWOS中所提供的代码已修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AXI-SRAM
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0x24000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;512KiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内存池
&lt;ul&gt;
&lt;li&gt;头文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbd/WeActMiniStm32H750/bdl/axisram.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存池对象：&lt;code&gt;axisram_mempool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QSPI Flash
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0x90000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;8MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/WeActMiniStm32H750Bootloader/bm/stm32cube/cubemx/Core/Src/quadspi.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPI
&lt;ul&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwmd/ds/spi/master.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/xwds/spim.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/Core/Src/spi.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPI Flash
&lt;ul&gt;
&lt;li&gt;大小：&lt;strong&gt;8MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwcd/perpheral/spi/flash/w25qxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/xwds/w25q64jv.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPI LCD
&lt;ul&gt;
&lt;li&gt;分辨率：160x80&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwcd/perpheral/spi/lcd/st7735&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/xwds/st7735.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lua&#34;&gt;Lua&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;5.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/vm/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;已注册的驱动库：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/luamod/ds.c&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SOC: &lt;code&gt;stm32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; UART: &lt;code&gt;uart1&lt;/code&gt;, &lt;code&gt;uart3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; REPL&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行sd卡中的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fatfs&#34;&gt;FATFS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;0.14&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/filesystem/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统：路径以&lt;code&gt;&amp;quot;sd:/&amp;quot;&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;SD卡
&lt;ul&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/cubemx/Core/Src/sdmmc.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libc&#34;&gt;libc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/newlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准输入、输出/错误：重定向至&lt;strong&gt;USART1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;文件系统：位于SD卡内，从路径&lt;code&gt;sd:/&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;动态内存管理：由AXI-SRAM的内存池提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;电源管理&#34;&gt;电源管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/WeActMiniStm32H750/bm/stm32cube/xwac/xwds/pm.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 日志</title>
      <link>/docs/user-manual/xwlib/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/xwlib/log/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;XWOS提供了日志框架，用户可以输出带有等级的日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VERBOSE，等级1，冗长&lt;/li&gt;
&lt;li&gt;DEBUG，等级2，调试&lt;/li&gt;
&lt;li&gt;INFO，等级3，信息&lt;/li&gt;
&lt;li&gt;NOTICE，等级4，提醒&lt;/li&gt;
&lt;li&gt;WARNING，等级5，警告&lt;/li&gt;
&lt;li&gt;ERR，等级6，错误&lt;/li&gt;
&lt;li&gt;CRIT，等级7，危险&lt;/li&gt;
&lt;li&gt;EMERG，等级8，紧急&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户可以通过配置&lt;code&gt;XWLIBCFG_XWLOG_LEVEL&lt;/code&gt;来控制各种等级的日志是否输出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当等级大于等于&lt;code&gt;XWLIBCFG_XWLOG_LEVEL&lt;/code&gt;的日志才会输出，&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;XWLIBCFG_XWLOG_LEVEL&lt;/code&gt;配置为&lt;code&gt;0&lt;/code&gt;将关闭所有日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XWOS的日志框架需要用户在BSP中提供后端驱动接口，以决定日志最终输出到串口、SD卡、还是别的设备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当配置&lt;code&gt;SOCCFG_LOG&lt;/code&gt;为&lt;code&gt;1&lt;/code&gt;时，BSP中需要提供函数&lt;code&gt;soc_log_write()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当配置&lt;code&gt;BRDCFG_LOG&lt;/code&gt;为&lt;code&gt;1&lt;/code&gt;时，BSP中需要提供函数&lt;code&gt;board_log_write()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当配置&lt;code&gt;SOCCFG_LOG&lt;/code&gt;与配置&lt;code&gt;BRDCFG_LOG&lt;/code&gt;同时为&lt;code&gt;1&lt;/code&gt;时，&lt;code&gt;SOCCFG_LOG&lt;/code&gt;具有更高优先级；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/lib/xwlog.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: CRC</title>
      <link>/docs/user-manual/xwlib/crc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/xwlib/crc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;crc8&#34;&gt;CRC8&lt;/h2&gt;
&lt;h2 id=&#34;crc32&#34;&gt;CRC32&lt;/h2&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CRC8：文档未及时更新时，以头文件&lt;code&gt;xwos/lib/crc8.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;CRC32：文档未及时更新时，以头文件&lt;code&gt;xwos/lib/crc32.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SPI主机模式</title>
      <link>/docs/lua-manual/xwds/spi-master/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwds/spi-master/</guid>
      <description>
        
        
        &lt;h2 id=&#34;spi主机模式控制器对象&#34;&gt;SPI主机模式控制器对象&lt;/h2&gt;
&lt;p&gt;XWLUA不提供动态创建硬件的方法，硬件的创建与初始化都是在C语言中完成。因此，
XWLUA虚拟机只提供C语言的API，用于将硬件的对象注册到虚拟机中。&lt;/p&gt;
&lt;h2 id=&#34;c-api参考&#34;&gt;C API参考&lt;/h2&gt;
&lt;h4 id=&#34;xwlua_spim_register&#34;&gt;xwlua_spim_register&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_spim_register(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L,
                         &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name,
                         &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwds_spim &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; spim)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：注册SPI对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) SPI在虚拟机中的变量名&lt;/li&gt;
&lt;li&gt;参数spi：(输入) SPI对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwlua_open_brdlibs&lt;/span&gt;(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L)
{
        xwlua_spim_register(L, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;spi1m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;stm32cube_spi1m_cb);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwlua_spim_unregister&#34;&gt;xwlua_spim_unregister&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_spim_unregister(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：删除SPI对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) SPI在虚拟机中的变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwdsspim&#34;&gt;&lt;strong&gt;包：xwds.spim&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwdsspimxferspim-txd-rx-size-time&#34;&gt;xwds.spim.xfer(spim, txd, rx, size[, time])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：启动数据传输&lt;/li&gt;
&lt;li&gt;参数spim：(userdata, 输入)BSP中注册的SPI控制器&lt;/li&gt;
&lt;li&gt;参数txd：(string, 输入)待发送的字节数组，可为nil，表示只接收不发送&lt;/li&gt;
&lt;li&gt;参数rx：(boolean, 输入)是否接收数据&lt;/li&gt;
&lt;li&gt;参数size：(number, 输入)期望传输的字节数&lt;/li&gt;
&lt;li&gt;参数time：(number, 输入)期望等待的时间&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (number)实际传输的字节数, (string)接收到的数据}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT: 超时&lt;/li&gt;
&lt;li&gt;-EINTR: 等待被中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实际传输的字节数：&amp;lt;=期望传输的字节数&lt;/li&gt;
&lt;li&gt;接收到的数据：当rx为false时，此返回值不存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 打包{88, 87, 79, 83}&lt;/span&gt;
txd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;BBBB&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 发送打包数据，返回接收到的数据，期望等待时间2s&lt;/span&gt;
rc, size, rxd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwds.spim.xfer(spi1m, txd, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 内存池</title>
      <link>/docs/user-manual/mm/mempool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/mm/mempool/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;内存池是结合了内存切片分配器与伙伴算法分配器的算法。内存管理的基本单位为页，
一页内存为4096字节，页内存使用伙伴算法分配器管理。
内存池还使用对象缓存算法建立各种小尺寸的块：8字节、16字节、32字节、
64字节、96字节、128字节、160字节、192字节、256字节、320字节、384字节、
512字节、768字节、1024字节、2048字节。
当申请内存大于2048字节，直接分配页内存；当申请的内存小于等于2048字节，
就从尺寸最合适的对象缓存分配器中分配一块内存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持释放操作；&lt;/li&gt;
&lt;li&gt;支持大小不固定的内存申请操作；&lt;/li&gt;
&lt;li&gt;反复申请与释放不会造成内存碎片；&lt;/li&gt;
&lt;li&gt;小内存块不会浪费过多的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;代码复杂；&lt;/li&gt;
&lt;li&gt;申请与释放操作的所需要的时间不稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适用性：外接尺寸较大的SRAM或SDRAM的内存管理，C++和Lua虚拟机的对象池。&lt;/li&gt;
&lt;li&gt;上下文的安全性：在任何上下文（中断、中断底半部、线程）都是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 线程栅栏</title>
      <link>/docs/lua-manual/xwos/sync/br/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/sync/br/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwosbr&#34;&gt;&lt;strong&gt;包：xwos.br&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosbrnewnum&#34;&gt;&lt;code&gt;xwos.br.new(num)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个线程栅栏&lt;/li&gt;
&lt;li&gt;参数num：(number, 输入)线程槽的数量&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mybr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.br.new(&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类brsp&#34;&gt;&lt;strong&gt;类：brsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：线程栅栏对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspbmp&#34;&gt;&lt;code&gt;brsp:bmp()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个位图，位的数量与线程栅栏中的线程槽数量相等&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的位图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspnum&#34;&gt;&lt;code&gt;brsp:num()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取线程栅栏中线程槽（位）的数量&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspbindsel&#34;&gt;&lt;code&gt;brsp:bind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：绑定线程栅栏对象到信号选择器&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ECHRNG: 位置超出范围&lt;/li&gt;
&lt;li&gt;-EALREADY: 同步对象已经绑定到事件对象&lt;/li&gt;
&lt;li&gt;-EBUSY: 通道已经被其他同步对象独占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspunbindsel&#34;&gt;&lt;code&gt;brsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑线程栅栏对象&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspunbindsel-1&#34;&gt;&lt;code&gt;brsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑线程栅栏对象&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brspsyncpos-msk-time&#34;&gt;&lt;code&gt;brsp:sync(pos, msk, [time])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待并获取线程栅栏&lt;/li&gt;
&lt;li&gt;参数brsp：(userdata, 输入)类成员函数的this参数，线程栅栏对象的强引用指针&lt;/li&gt;
&lt;li&gt;可选参数time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ECHRNG：位置超出范围&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 线程栅栏</title>
      <link>/docs/user-manual/sync/br/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/br/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;XWOS的线程栅栏是用于协调多个线程并行工作的同步机制。当线程到达线程栅栏时会暂停运行
并等待，直到所有合作的线程都达到线程栅栏，所有线程从线程栅栏开始“同时”执行。&lt;/p&gt;
&lt;h2 id=&#34;线程栅栏的创建初始化与删除销毁&#34;&gt;线程栅栏的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;线程栅栏支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_br_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_br_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_br_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_br_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程栅栏在初始化/创建时，需要指定线程数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程栅栏的工作原理&#34;&gt;线程栅栏的工作原理&lt;/h2&gt;
&lt;p&gt;XWOS提供2个API：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_wait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_br &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; br);

xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_timedwait&lt;/span&gt;(&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwos_br &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; br, xwtm_t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; xwtm);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;只可在线程上下文中使用；&lt;/li&gt;
&lt;li&gt;每当一个线程到达栅栏，线程就会阻塞等待，线程栅栏中数量就会增加1；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_br_timedwait()&lt;/code&gt;还会设定一个超时时间，超时后线程被唤醒，并返回错误码-ETIMEDOUT；&lt;/li&gt;
&lt;li&gt;超时的参数&lt;code&gt;xwtm_t * xwtm&lt;/code&gt;用法可以参考&lt;a href=&#34;../../skd#%E8%B6%85%E6%97%B6%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BD%A2%E5%BC%8F&#34;&gt;超时API的统一形式&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;线程的阻塞状态可被中断，中断将返回&lt;code&gt;-EINTR&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当线程栅栏中线程数量达到线程栅栏初始化/创建时指定线程数量后，所有线程都被唤醒，开始“同时”执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑选择器&#34;&gt;绑定与解绑选择器&lt;/h2&gt;
&lt;p&gt;线程栅栏也时同步对象，也可以将绑定到一个特定的&lt;strong&gt;信号选择器&lt;/strong&gt;上。所有线程从线程栅栏开始“同时”执行时，
可向信号选择器发送一个&lt;strong&gt;选择信号&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定API：&lt;code&gt;xwos_br_bind()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解绑API：&lt;code&gt;xwos_br_unbind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考&lt;a href=&#34;../sel&#34;&gt;信号选择器&lt;/a&gt;的章节获取更多的信息。&lt;/p&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/br.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 野火Stm32H743 Pro开发板</title>
      <link>/docs/quick-guide/stm32/embedfirestm32h743/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/embedfirestm32h743/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;EmbedFireStm32H743.jpg&#34; alt=&#34;img&#34; title=&#34;EmbedFireStm32H743开发板&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCU: STM32H743XIHx&lt;/li&gt;
&lt;li&gt;SDRAM: 64MiB&lt;/li&gt;
&lt;li&gt;更多介绍: &lt;a href=&#34;http://doc.embedfire.com/products/link/zh/latest/stm32/ebf_stm32h743_pro/download/stm32h743_pro.html&#34;&gt;主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电路板目录：&lt;code&gt;xwbd/EmbedFireStm32H743&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译集成环境可参考：&lt;a href=&#34;../env&#34;&gt;开发环境搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/EmbedFireStm32H743.git&#34;&gt;https://gitee.com/xwos/EmbedFireStm32H743.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/EmbedFireStm32H743.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;导入工程到stm32cubeide&#34;&gt;导入工程到STM32CubeIDE&lt;/h2&gt;
&lt;p&gt;工程需放在STM32CubeIDE的工作目录内（即STM32CubeIDE启动时指定的目录）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置编译环境&#34;&gt;设置编译环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单**&amp;ldquo;Project &amp;ndash;&amp;gt; Properties &amp;ndash;&amp;gt; C/C++ Build &amp;ndash;&amp;gt; Environment&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;点击**&amp;ldquo;Restore Defaults&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;修改Debug配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Debug.png&#34; alt=&#34;img&#34; title=&#34;Debug配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Release配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Release.png&#34; alt=&#34;img&#34; title=&#34;Release配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量path设置&#34;&gt;环境变量&lt;strong&gt;PATH&lt;/strong&gt;设置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量
&lt;ul&gt;
&lt;li&gt;将STM32CubeIDE自带的工具链路径从PATH环境变量中删除；&lt;/li&gt;
&lt;li&gt;将XWMCU工具链的路径放置到PATH环境变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH.svg&#34; alt=&#34;img&#34; title=&#34;设置PATH&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx配置工程&#34;&gt;STM32CubeMX配置工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/EmbedFireStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为&lt;strong&gt;0&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;p&gt;打开菜单&lt;strong&gt;Run &amp;ndash;&amp;gt; Debug Configurations&amp;hellip;&lt;/strong&gt;，根据仿真器类型，选择调试配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;EmbedFireStm32H743-openocd-daplink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;DAPLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EmbedFireStm32H743-openocd-jlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EmbedFireStm32H743-stlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;STLink GDB Server&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Debug_Configurations.png&#34; alt=&#34;img&#34; title=&#34;调试配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试步骤&#34;&gt;调试步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;准备一张SD卡，格式化为FAT32文件系统；&lt;/li&gt;
&lt;li&gt;将文件夹&lt;code&gt;xwam/example/lua&lt;/code&gt;内的lua脚本，拷贝到SD卡内；&lt;/li&gt;
&lt;li&gt;将SD卡插入开发板；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;使用MiniUSB线连接电路板上的USB-232接口与PC；&lt;/li&gt;
&lt;li&gt;打开终端工具（windows可选putty、SecretCRT，Linux可选gtkterm、picocom、minicom）,
但先不要在终端工具中打开串口，否则MCU会进入下载模式；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;上电，并在STM32CubeIDE中启动调试，等待MCU运行到初始断点；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在终端工具中打开串口，参数：1M波特率/8位数据/1位停止位/无奇偶校验；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;开始单步调试或连续运行调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试技巧&#34;&gt;调试技巧&lt;/h3&gt;
&lt;h4 id=&#34;关闭dcache&#34;&gt;关闭DCache&lt;/h4&gt;
&lt;p&gt;ARMv7-m7内核的MCU带有Cache，常常会对定位程序BUG带来困扰。
将下面的宏开关注释掉或定义改为0后可关闭Cache：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* xwbd/EmbedFireStm32H743/bm/stm32cube/cfg.h */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_DCACHE             1
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_ICACHE             1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行过程&#34;&gt;运行过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../../lua-manual/xwlua-repl.png&#34; alt=&#34;img&#34; title=&#34;XWLUA交互式解释器&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序入口：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/main/main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动流程：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_main()&lt;/code&gt;创建一个主线程&lt;code&gt;main_task()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;依次调用各个&lt;strong&gt;玄武模块&lt;/strong&gt;的&lt;code&gt;xxx_start()&lt;/code&gt;函数完成对各个模块加载；&lt;/li&gt;
&lt;li&gt;开始并行执行各个模块中创建的线程；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;XWOS中有很多示例，可帮助用户快速了解API的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程
&lt;ul&gt;
&lt;li&gt;创建线程：&lt;code&gt;xwam/example/thread/create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程睡眠：&lt;code&gt;xwam/example/thread/sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时器：&lt;code&gt;xwam/example/timer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步
&lt;ul&gt;
&lt;li&gt;信号量：&lt;code&gt;xwam/example/sync/semaphore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件量：&lt;code&gt;xwam/example/sync/condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件标志：&lt;code&gt;xwam/example/sync/flg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程栅栏：&lt;code&gt;xwam/example/sync/br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信号选择器：&lt;code&gt;xwam/example/sync/sel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁
&lt;ul&gt;
&lt;li&gt;中断管理：&lt;code&gt;xwam/example/lock/cpuirq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自旋锁：&lt;code&gt;xwam/example/lock/spinlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;顺序锁：&lt;code&gt;xwam/example/lock/seqlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;互斥锁：&lt;code&gt;xwam/example/lock/mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;简单内存分配器：&lt;code&gt;xwam/example/mm/sma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存切片分配器：&lt;code&gt;xwam/example/mm/memslice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伙伴算法分配器：&lt;code&gt;xwam/example/mm/bma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池：只用于比较大的内存区域的管理，例如外接的SDRAM，
EmbedFireStm32H743工程已经为板载的SDRAM建立了内存池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;玄武C库
&lt;ul&gt;
&lt;li&gt;CRC：&lt;code&gt;xwam/example/xwlib/crc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个示例中都有一个启动函数&lt;code&gt;xxx_start()&lt;/code&gt;，可在&lt;code&gt;xwbd/EmbedFireStm32H743/bm/main/main.c&lt;/code&gt;文件中
的主线程&lt;code&gt;main_task()&lt;/code&gt;启动示例，但最好一次只启动一个示例，避免日志冲突。&lt;/p&gt;
&lt;p&gt;实验过程中最好将Lua虚拟机关闭，防止竞争串口导致输出混乱。方法是将
配置文件&lt;code&gt;xwbd/EmbedFireStm32H743/cfg/xwem.h&lt;/code&gt;中的配置&lt;code&gt;XWEMCFG_vm_lua&lt;/code&gt;改为0。&lt;/p&gt;
&lt;h2 id=&#34;系统集成的原理&#34;&gt;系统集成的原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有移植的第三方组件、驱动包、示例代码等都是以&lt;strong&gt;玄武模块&lt;/strong&gt;独立编译成静态库**.a**，
之后再将它们链接成**ELF**文件，再由**ELF**生成**bin**、**hex**和**smot**文件；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个独立的子工程并进行独立编译，设计上借鉴了安卓系统的&lt;strong&gt;Android.mk&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;中都有一个&lt;code&gt;xwmo.mk&lt;/code&gt;文件，其中定义的&lt;strong&gt;编译参数&lt;/strong&gt;、&lt;strong&gt;头文件路径&lt;/strong&gt;等
&lt;strong&gt;只&lt;/strong&gt;对&lt;strong&gt;当前&lt;/strong&gt;的&lt;strong&gt;玄武模块&lt;/strong&gt;生效；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个封闭的包，外部一般不能直接引用内部头文件，需要封装对外可见的
&lt;strong&gt;类型&lt;/strong&gt;以及&lt;strong&gt;接口函数&lt;/strong&gt;，并统一放在专门的&lt;strong&gt;API头文件&lt;/strong&gt;内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API头文件&lt;/strong&gt;通常以&lt;strong&gt;mif.h&lt;/strong&gt;作为文件名，含义是&lt;strong&gt;模块接口(Module InterFace)&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XWOS内已经包含了大量&lt;strong&gt;玄武模块&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd&lt;/code&gt;：外设芯片的驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwam&lt;/code&gt;：示例与应用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd&lt;/code&gt;：中间件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwem&lt;/code&gt;：第三方开源软件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;玄武模块&lt;/strong&gt;的具体信息可以参考&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;用户手册-构建系统-玄武模块&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码启动流程&#34;&gt;代码启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;：初始化时钟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm32cube_init()&lt;/code&gt;：初始化内存管理、cache、GPIO、DMA等基础设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;：初始化其他设备、启动其他子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;bsp&#34;&gt;BSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32Cube模块：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/EmbedFireStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX生成源码目录：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配XWOS的源码：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中断向量表：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/IVT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;中断向量表是使用命令自动生成的；&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/EmbedFireStm32H743/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端UART
&lt;ul&gt;
&lt;li&gt;设备：USART1&lt;/li&gt;
&lt;li&gt;参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;驱动框架 —— 设备栈：&lt;code&gt;xwmd/ds/uart/dma.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac/xwds/uart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/Core/Src/usart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意：HAL库中的驱动存在BUG，XWOS中所提供的代码已修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QSPI Flash
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0x90000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;32MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/Core/Src/quadspi.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SDRAM
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0xD0000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;64MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/Core/Src/fmc.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池
&lt;ul&gt;
&lt;li&gt;头文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/mif.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存池对象：&lt;code&gt;newlibac_mempool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lua&#34;&gt;Lua&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;5.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/vm/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;已注册的驱动库：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/luamod/ds.c&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SOC: &lt;code&gt;stm32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; UART: &lt;code&gt;uart1&lt;/code&gt;, &lt;code&gt;uart5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; REPL&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行sd卡中的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fatfs&#34;&gt;FATFS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;0.14&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/filesystem/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统：路径以&lt;code&gt;&amp;quot;sd:/&amp;quot;&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;SD卡
&lt;ul&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/cubemx/Core/Src/sdmmc.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libc&#34;&gt;libc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac/newlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准输入、输出/错误：重定向至&lt;strong&gt;USART1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;文件系统：位于SD卡内，从路径&lt;code&gt;sd:/&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;动态内存管理：由SDRAM的内存池提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;电源管理&#34;&gt;电源管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/EmbedFireStm32H743/bm/stm32cube/xwac/xwds/pm.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: IIC主机模式</title>
      <link>/docs/lua-manual/xwds/iic-master/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwds/iic-master/</guid>
      <description>
        
        
        &lt;h2 id=&#34;iic主机模式控制器对象&#34;&gt;IIC主机模式控制器对象&lt;/h2&gt;
&lt;p&gt;XWLUA不提供动态创建硬件的方法，硬件的创建与初始化都是在C语言中完成。因此，
XWLUA虚拟机只提供C语言的API，用于将硬件的对象注册到虚拟机中。&lt;/p&gt;
&lt;h2 id=&#34;c-api参考&#34;&gt;C API参考&lt;/h2&gt;
&lt;h4 id=&#34;xwlua_i2cm_register&#34;&gt;xwlua_i2cm_register&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_i2cm_register(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L,
                         &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name,
                         &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; xwds_i2cm &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; i2cm)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：注册I2C对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) I2C在虚拟机中的变量名&lt;/li&gt;
&lt;li&gt;参数i2c：(输入) I2C对象&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;xwlua_open_brdlibs&lt;/span&gt;(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L)
{
        xwlua_i2cm_register(L, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;i2c2m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;stm32cube_i2c2m_cb);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;xwlua_i2cm_unregister&#34;&gt;xwlua_i2cm_unregister&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;void&lt;/span&gt; xwlua_i2cm_unregister(lua_State &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; L, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简介：删除I2C对象&lt;/li&gt;
&lt;li&gt;参数L：(输入) 虚拟机&lt;/li&gt;
&lt;li&gt;参数name：(输入) I2C在虚拟机中的变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;类i2cm&#34;&gt;&lt;strong&gt;类：i2cm&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;i2cmxferaddr-start-stop-read-size-txd-time&#34;&gt;i2cm:xfer(addr, start, stop, read, size[, txd, time])&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：启动数据传输&lt;/li&gt;
&lt;li&gt;参数addr：(number, 输入)I2C外设的地址&lt;/li&gt;
&lt;li&gt;参数start：(boolean, 输入)是否产生&lt;strong&gt;Start&lt;/strong&gt;条件&lt;/li&gt;
&lt;li&gt;参数stop：(boolean, 输入)是否产生&lt;strong&gt;Stop&lt;/strong&gt;条件&lt;/li&gt;
&lt;li&gt;参数read：(boolean, 输入)方向是否为&lt;strong&gt;读&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参数size：(number, 输入)本次数据传输的的字节数&lt;/li&gt;
&lt;li&gt;参数txd：(string, 输入)待发送的字节数组&lt;/li&gt;
&lt;li&gt;参数time：(number, 输入)期望等待的时间&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (string)接收到的数据}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT: 超时&lt;/li&gt;
&lt;li&gt;-EINTR: 等待被中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 向EEPROM的0地址写入4字节数据&lt;/span&gt;
addr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x00&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 打包{地址, 88, 87, 79, 83}&lt;/span&gt;
txd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;BBBBB&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 写入地址和数据&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i2c2m:xfer(&lt;span style=&#34;color:#666&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;txd, txd, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 向EEPROM的0地址读出4字节数据&lt;/span&gt;
addr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x00&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 打包{0}&lt;/span&gt;
txd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; string.pack(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 写入地址&lt;/span&gt;
rc &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i2c2m:xfer(&lt;span style=&#34;color:#666&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;txd, txd, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;-- 读出数据&lt;/span&gt;
rc, rxd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; i2c2m:xfer(&lt;span style=&#34;color:#666&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2000000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 信号选择器</title>
      <link>/docs/lua-manual/xwos/sync/sel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/lua-manual/xwos/sync/sel/</guid>
      <description>
        
        
        &lt;h2 id=&#34;xwlua-api参考&#34;&gt;XWLUA API参考&lt;/h2&gt;
&lt;h3 id=&#34;包xwossel&#34;&gt;&lt;strong&gt;包：xwos.sel&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;xwosselnewnum&#34;&gt;&lt;code&gt;xwos.sel.new(num)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个信号选择器&lt;/li&gt;
&lt;li&gt;参数num：(number, 输入)信号槽的数量&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;mysel &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xwos.sel.new(&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类selsp&#34;&gt;&lt;strong&gt;类：selsp&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;说明：信号选择器对象强指针类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspbmp&#34;&gt;&lt;code&gt;selsp:bmp()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：新建一个位图，位的数量与信号选择器中的信号槽数量相等&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(userdata)新的位图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspnum&#34;&gt;&lt;code&gt;selsp:num()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：获取信号选择器中信号槽（位）的数量&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspbindsel&#34;&gt;&lt;code&gt;selsp:bind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：绑定信号选择器对象到信号选择器&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ECHRNG: 位置超出范围&lt;/li&gt;
&lt;li&gt;-EALREADY: 同步对象已经绑定到事件对象&lt;/li&gt;
&lt;li&gt;-EBUSY: 通道已经被其他同步对象独占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspunbindsel&#34;&gt;&lt;code&gt;selsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑信号选择器对象&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspunbindsel-1&#34;&gt;&lt;code&gt;selsp:unbind(sel)&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：从信号选择器上解绑信号选择器对象&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数sel：(userdata, 输入)信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;返回值：(number)错误码
&lt;ul&gt;
&lt;li&gt;0：成功&lt;/li&gt;
&lt;li&gt;-ENOTCONN: 同步对象没有绑定到事件对象上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selspwaitmsk-op&#34;&gt;&lt;code&gt;selsp:wait(msk, [op])&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简介：等待并获取信号选择器&lt;/li&gt;
&lt;li&gt;参数selsp：(userdata, 输入)类成员函数的this参数，信号选择器对象的强引用指针&lt;/li&gt;
&lt;li&gt;参数msk：(userdata, 输入)待触发的同步对象位图掩码&lt;/li&gt;
&lt;li&gt;可选参数op：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;t&amp;rdquo;：(string, 输入)尝试等待并获取事件标志，若事件标志的值小于等于0，立即返回，
不会等待；&lt;/li&gt;
&lt;li&gt;time：(number, 输入)期望的等待时间，超时后返回错误码-ETIMEDOUT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：{(number)错误码, (userdata)位图}
&lt;ul&gt;
&lt;li&gt;错误码
&lt;ul&gt;
&lt;li&gt;0：无错误&lt;/li&gt;
&lt;li&gt;-ETIMEDOUT：超时&lt;/li&gt;
&lt;li&gt;-EINTR：等待被中断&lt;/li&gt;
&lt;li&gt;-ENOTINTHD：不在线程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位图：已触发的同步对象位图掩码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 信号选择器</title>
      <link>/docs/user-manual/sync/sel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-manual/sync/sel/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;信号选择器类似于事件标志，使用位图来管理一组&lt;strong&gt;同步对象&lt;/strong&gt;。使得单一线程可以同时等待
一组不同的&lt;strong&gt;同步对象&lt;/strong&gt;，类似于POSIX中的&lt;code&gt;select()&lt;/code&gt;。
每个&lt;strong&gt;同步对象&lt;/strong&gt;在信号选择器位图中都绑定一个特定的&lt;strong&gt;位&lt;/strong&gt;，
当这些&lt;strong&gt;同步对象&lt;/strong&gt;发送&lt;strong&gt;选择信号&lt;/strong&gt;时，信号选择器位图中特定的&lt;strong&gt;位&lt;/strong&gt;被置1，
同时使得等待信号选择器的线程被唤醒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送信号&lt;/strong&gt;对于不同的&lt;strong&gt;同步对象&lt;/strong&gt;有不同解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量：指发布操作（V操作），API &lt;code&gt;xwos_sem_post()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;条件量：指广播操作，API &lt;code&gt;xwos_cond_broadcast()&lt;/code&gt;，注意，
单播&lt;code&gt;xwos_cond_unicast()&lt;/code&gt;不会向信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;事件标志：指事件标志位图中任何一位发生改变，对应于API：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_s1i()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_c0i()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1m()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos_flg_x1i()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程栅栏：指所有线程抵达栅栏处，并同时被唤醒；&lt;/li&gt;
&lt;li&gt;信号选择器：信号选择器本身也时同步对象，当任何绑定在信号选择器中的&lt;strong&gt;同步对象&lt;/strong&gt;向
信号选择器发送了&lt;strong&gt;选择信号&lt;/strong&gt;，信号选择器亦会向其父信号选择器发送&lt;strong&gt;选择信号&lt;/strong&gt;。
信号选择器之间可以依次绑定，形成传递链，将&lt;strong&gt;选择信号&lt;/strong&gt;在传递链上传递。但要注意，
信号选择器不可相互绑定形成循环链，否则会造成无限传递。&lt;/li&gt;
&lt;/ul&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 810px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/docs/user-manual/sync/sel/xwos-sel_hudcf9cb7156ebc4dfb2218a5a4fe7da02_94248_800x600_fill_catmullrom_smart1_3.png&#34; width=&#34;800&#34; height=&#34;600&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0 text-center&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
XWOS信号选择器示意图
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: xwos.tech / CC-BY&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;h2 id=&#34;信号选择器的创建初始化与删除销毁&#34;&gt;信号选择器的创建、初始化与删除、销毁&lt;/h2&gt;
&lt;p&gt;信号选择器支持静态初始化与销毁，动态创建与删除两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化与销毁
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态&lt;/strong&gt;是指用户预先定义对象，这些对象在编译时由编译器分配内存。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;xwos_sel_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;销毁：&lt;code&gt;xwos_sel_fini()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态创建与删除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态&lt;/strong&gt;是指程序在运行时，通过内存分配函数从某个内存区域上申请分配一块内存，
并把这块内存初始化为所需要的对象。使用完毕后，需要释放内存。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;xwos_sel_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;xwos_sel_delete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绑定与解绑&#34;&gt;绑定与解绑&lt;/h2&gt;
&lt;p&gt;XWOS中所有&lt;strong&gt;同步对象&lt;/strong&gt;（包括信号选择器本身）都带有两个相似的API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 绑定 */&lt;/span&gt;
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sem_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_flg_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_bind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sel_bind&lt;/span&gt;();

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* 解绑 */&lt;/span&gt;
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sem_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_cond_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_flg_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_br_unbind&lt;/span&gt;();
xwer_t &lt;span style=&#34;color:#00a000&#34;&gt;xwos_sel_unbind&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;同步对象&lt;/strong&gt;绑定操作又分为独占绑定与非独占绑定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占绑定：是指&lt;strong&gt;同步对象&lt;/strong&gt;一旦绑定了信号选择器位图中的某一位后，其他&lt;strong&gt;同步对象&lt;/strong&gt;
不可再绑定此位；&lt;/li&gt;
&lt;li&gt;非独占绑定：是指&lt;strong&gt;同步对象&lt;/strong&gt;一旦绑定了信号选择器位图中的某一位后，其他&lt;strong&gt;同步对象&lt;/strong&gt;
还可继续再绑定此位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同步对象&lt;/strong&gt;采用的绑定方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量：独占绑定&lt;/li&gt;
&lt;li&gt;条件量：非独占绑定&lt;/li&gt;
&lt;li&gt;事件标志：非独占绑定&lt;/li&gt;
&lt;li&gt;线程栅栏：非独占绑定&lt;/li&gt;
&lt;li&gt;信号选择器：非独占绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api参考&#34;&gt;API参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档未及时更新时，以头文件&lt;code&gt;xwos/osal/sync/sel.h&lt;/code&gt;中注释为准；&lt;/li&gt;
&lt;li&gt;API详细说明与示例：&lt;a href=&#34;TBD&#34;&gt;API手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 正点原子阿波罗Stm32H743开发板</title>
      <link>/docs/quick-guide/stm32/atkstm32h743/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/atkstm32h743/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;ATKStm32H743.jpg&#34; alt=&#34;img&#34; title=&#34;ATKStm32H743开发板&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCU: STM32H743IIT6&lt;/li&gt;
&lt;li&gt;SDRAM: 32MiB&lt;/li&gt;
&lt;li&gt;更多介绍: &lt;a href=&#34;http://www.openedv.com/docs/boards/stm32/zdyz_stm32h743_apollo.html&#34;&gt;主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电路板目录：&lt;code&gt;xwbd/ATKStm32H743&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译集成环境可参考：&lt;a href=&#34;../env&#34;&gt;开发环境搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/ATKStm32H743.git&#34;&gt;https://gitee.com/xwos/ATKStm32H743.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/ATKStm32H743.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;导入工程到stm32cubeide&#34;&gt;导入工程到STM32CubeIDE&lt;/h2&gt;
&lt;p&gt;工程需放在STM32CubeIDE的工作目录内（即STM32CubeIDE启动时指定的目录）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置编译环境&#34;&gt;设置编译环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单**&amp;ldquo;Project &amp;ndash;&amp;gt; Properties &amp;ndash;&amp;gt; C/C++ Build &amp;ndash;&amp;gt; Environment&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;点击**&amp;ldquo;Restore Defaults&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;修改Debug配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Debug.png&#34; alt=&#34;img&#34; title=&#34;Debug配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Release配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Release.png&#34; alt=&#34;img&#34; title=&#34;Release配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量path设置&#34;&gt;环境变量&lt;strong&gt;PATH&lt;/strong&gt;设置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量
&lt;ul&gt;
&lt;li&gt;将STM32CubeIDE自带的工具链路径从PATH环境变量中删除；&lt;/li&gt;
&lt;li&gt;将XWMCU工具链的路径放置到PATH环境变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH.svg&#34; alt=&#34;img&#34; title=&#34;设置PATH&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx配置工程&#34;&gt;STM32CubeMX配置工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/ATKStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为&lt;strong&gt;0&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;p&gt;打开菜单&lt;strong&gt;Run &amp;ndash;&amp;gt; Debug Configurations&amp;hellip;&lt;/strong&gt;，根据仿真器类型，选择调试配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32H743-openocd-daplink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;DAPLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32H743-openocd-jlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32H743-stlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;STLink GDB Server&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Debug_Configurations.png&#34; alt=&#34;img&#34; title=&#34;调试配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试步骤&#34;&gt;调试步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;准备一张SD卡，格式化为FAT32文件系统；&lt;/li&gt;
&lt;li&gt;将文件夹&lt;code&gt;xwam/example/lua&lt;/code&gt;内的lua脚本，拷贝到SD卡内；&lt;/li&gt;
&lt;li&gt;将SD卡插入开发板；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;使用MiniUSB线连接电路板上的USB-232接口与PC；&lt;/li&gt;
&lt;li&gt;打开终端工具（windows可选putty、SecretCRT，Linux可选gtkterm、picocom、minicom）,
但先不要在终端工具中打开串口，否则MCU会进入下载模式；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;上电，并在STM32CubeIDE中启动调试，等待MCU运行到初始断点；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在终端工具中打开串口，参数：1M波特率/8位数据/1位停止位/无奇偶校验；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;开始单步调试或连续运行调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试技巧&#34;&gt;调试技巧&lt;/h3&gt;
&lt;h4 id=&#34;关闭dcache&#34;&gt;关闭DCache&lt;/h4&gt;
&lt;p&gt;ARMv7-m7内核的MCU带有Cache，常常会对定位程序BUG带来困扰。
将下面的宏开关注释掉或定义改为0后可关闭Cache：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;/* xwbd/ATKStm32H743/bm/stm32cube/cfg.h */&lt;/span&gt;

&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_DCACHE             1
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define STM32CUBECFG_ICACHE             1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行过程&#34;&gt;运行过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../../lua-manual/xwlua-repl.png&#34; alt=&#34;img&#34; title=&#34;XWLUA交互式解释器&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序入口：&lt;code&gt;xwbd/ATKStm32H743/bm/main/main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动流程：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwos_main()&lt;/code&gt;创建一个主线程&lt;code&gt;main_task()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;依次调用各个&lt;strong&gt;玄武模块&lt;/strong&gt;的&lt;code&gt;xxx_start()&lt;/code&gt;函数完成对各个模块加载；&lt;/li&gt;
&lt;li&gt;开始并行执行各个模块中创建的线程；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;XWOS中有很多示例，可帮助用户快速了解API的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程
&lt;ul&gt;
&lt;li&gt;创建线程：&lt;code&gt;xwam/example/thread/create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程睡眠：&lt;code&gt;xwam/example/thread/sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时器：&lt;code&gt;xwam/example/timer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步
&lt;ul&gt;
&lt;li&gt;信号量：&lt;code&gt;xwam/example/sync/semaphore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件量：&lt;code&gt;xwam/example/sync/condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件标志：&lt;code&gt;xwam/example/sync/flg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程栅栏：&lt;code&gt;xwam/example/sync/br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信号选择器：&lt;code&gt;xwam/example/sync/sel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁
&lt;ul&gt;
&lt;li&gt;中断管理：&lt;code&gt;xwam/example/lock/cpuirq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自旋锁：&lt;code&gt;xwam/example/lock/spinlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;顺序锁：&lt;code&gt;xwam/example/lock/seqlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;互斥锁：&lt;code&gt;xwam/example/lock/mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;简单内存分配器：&lt;code&gt;xwam/example/mm/sma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存切片分配器：&lt;code&gt;xwam/example/mm/memslice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伙伴算法分配器：&lt;code&gt;xwam/example/mm/bma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池：只用于比较大的内存区域的管理，例如外接的SDRAM，
ATKStm32H743工程已经为板载的SDRAM建立了内存池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;玄武C库
&lt;ul&gt;
&lt;li&gt;CRC：&lt;code&gt;xwam/example/xwlib/crc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个示例中都有一个启动函数&lt;code&gt;xxx_start()&lt;/code&gt;，可在&lt;code&gt;xwbd/ATKStm32H743/bm/main/main.c&lt;/code&gt;文件中
的主线程&lt;code&gt;main_task()&lt;/code&gt;启动示例，但最好一次只启动一个示例，避免日志冲突。&lt;/p&gt;
&lt;p&gt;实验过程中最好将Lua虚拟机关闭，防止竞争串口导致输出混乱。方法是将
配置文件&lt;code&gt;xwbd/ATKStm32H743/cfg/xwem.h&lt;/code&gt;中的配置&lt;code&gt;XWEMCFG_vm_lua&lt;/code&gt;改为0。&lt;/p&gt;
&lt;h2 id=&#34;系统集成的原理&#34;&gt;系统集成的原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有移植的第三方组件、驱动包、示例代码等都是以&lt;strong&gt;玄武模块&lt;/strong&gt;独立编译成静态库**.a**，
之后再将它们链接成**ELF**文件，再由**ELF**生成**bin**、**hex**和**smot**文件；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个独立的子工程并进行独立编译，设计上借鉴了安卓系统的&lt;strong&gt;Android.mk&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;中都有一个&lt;code&gt;xwmo.mk&lt;/code&gt;文件，其中定义的&lt;strong&gt;编译参数&lt;/strong&gt;、&lt;strong&gt;头文件路径&lt;/strong&gt;等
&lt;strong&gt;只&lt;/strong&gt;对&lt;strong&gt;当前&lt;/strong&gt;的&lt;strong&gt;玄武模块&lt;/strong&gt;生效；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个封闭的包，外部一般不能直接引用内部头文件，需要封装对外可见的
&lt;strong&gt;类型&lt;/strong&gt;以及&lt;strong&gt;接口函数&lt;/strong&gt;，并统一放在专门的&lt;strong&gt;API头文件&lt;/strong&gt;内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API头文件&lt;/strong&gt;通常以&lt;strong&gt;mif.h&lt;/strong&gt;作为文件名，含义是&lt;strong&gt;模块接口(Module InterFace)&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XWOS内已经包含了大量&lt;strong&gt;玄武模块&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd&lt;/code&gt;：外设芯片的驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwam&lt;/code&gt;：示例与应用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd&lt;/code&gt;：中间件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwem&lt;/code&gt;：第三方开源软件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;玄武模块&lt;/strong&gt;的具体信息可以参考&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;用户手册-构建系统-玄武模块&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码启动流程&#34;&gt;代码启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;：初始化时钟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm32cube_init()&lt;/code&gt;：初始化内存管理、cache、GPIO、DMA等基础设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;：初始化其他设备、启动其他子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;bsp&#34;&gt;BSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32Cube模块：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/ATKStm32H743.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX生成源码目录：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配XWOS的源码：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中断向量表：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/IVT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;中断向量表是使用命令自动生成的；&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/ATKStm32H743/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端UART
&lt;ul&gt;
&lt;li&gt;设备：USART1&lt;/li&gt;
&lt;li&gt;参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;驱动框架 —— 设备栈：&lt;code&gt;xwmd/ds/uart/dma.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/xwds/uart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/usart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意：HAL库中的驱动存在BUG，XWOS中所提供的代码已修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QSPI Flash
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0x90000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;32MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/quadspi.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SDRAM
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0xC0000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;32MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/fmc.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池
&lt;ul&gt;
&lt;li&gt;头文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/mif.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存池对象：&lt;code&gt;sdram_mempool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPI
&lt;ul&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwmd/ds/spi/master.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/xwds/spim.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/spi.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I2C
&lt;ul&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwmd/ds/i2c/master.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/xwds/i2cm.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/i2c.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I2C EEPROM
&lt;ul&gt;
&lt;li&gt;大小：&lt;strong&gt;256B&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;设备栈驱动框架：&lt;code&gt;xwcd/perpheral/i2c/eeprom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/xwds/at24c02.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lua&#34;&gt;Lua&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;5.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/vm/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;已注册的驱动库：&lt;code&gt;xwbd/ATKStm32H743/bm/luamod/ds.c&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SOC: &lt;code&gt;stm32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; UART: &lt;code&gt;uart1&lt;/code&gt;, &lt;code&gt;uart2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I2C: &lt;code&gt;i2c2m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SPI: &lt;code&gt;spi1m&lt;/code&gt;, &lt;code&gt;spi2m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; REPL&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行sd卡中的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fatfs&#34;&gt;FATFS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本：&lt;strong&gt;0.14&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;code&gt;xwem/filesystem/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/fatfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统：路径以&lt;code&gt;&amp;quot;sd:/&amp;quot;&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;SD卡
&lt;ul&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/cubemx/Core/Src/sdmmc.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libc&#34;&gt;libc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/newlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准输入、输出/错误：重定向至&lt;strong&gt;USART1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;文件系统：位于SD卡内，从路径&lt;code&gt;sd:/&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;动态内存管理：由SDRAM的内存池提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;电源管理&#34;&gt;电源管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适配代码：&lt;code&gt;xwbd/ATKStm32H743/bm/stm32cube/xwac/xwds/pm.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 玄武内核模块</title>
      <link>/docs/quick-guide/xwko/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/xwko/</guid>
      <description>
        
        
        &lt;h2 id=&#34;安装编译工具&#34;&gt;安装编译工具&lt;/h2&gt;
&lt;h3 id=&#34;emacs&#34;&gt;emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用途：执行elisp脚本&lt;/li&gt;
&lt;li&gt;安装方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-add-repository ppa:kelleyk/emacs
sudo apt-get update
sudo apt install emacs27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bash&#34;&gt;bash&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用途：执行shell脚本&lt;/li&gt;
&lt;li&gt;安装方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo dpkg-reconfigure dash &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# 选择“否”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-essential&#34;&gt;build-essential&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用途：这是一个虚包，此包会通过依赖将相关的一系列工具(make, gcc, …)
全部安装到系统。&lt;/li&gt;
&lt;li&gt;安装方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt install build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;在linux内核中运行玄武内核模块&#34;&gt;在Linux内核中运行玄武内核模块&lt;/h2&gt;
&lt;p&gt;假定工作目录为 &lt;strong&gt;~&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;下载源码&#34;&gt;下载源码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; ~
git clone https://gitee.com/xwos/XWKO.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译&#34;&gt;编译&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; ~/XWKO/xwbd/pc
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;XwkoBuilding.png&#34; alt=&#34;img&#34; title=&#34;编译过程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行演示代码hixwos&#34;&gt;运行演示代码：hixwos&lt;/h3&gt;
&lt;p&gt;玄武内核模块中已经包含演示代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径：&lt;code&gt;xwam/example/hixwos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源文件：&lt;code&gt;xwmo.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;头文件：&lt;code&gt;mif.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译规则：&lt;code&gt;xwmo.mk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hixwos的运行流程&#34;&gt;hixwos的运行流程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;xwbd/pc/cfg/xwam.h&lt;/code&gt;中将宏开关&lt;code&gt;XWAMCFG_example_hixwos&lt;/code&gt;定义为&lt;code&gt;1&lt;/code&gt;即可；&lt;/li&gt;
&lt;li&gt;玄武内核模块安装到内核(&lt;code&gt;insmod&lt;/code&gt;)时，位于&lt;code&gt;xwbd/pc/bdl/board.c&lt;/code&gt;中
的&lt;code&gt;board_example_init()&lt;/code&gt;函数会调用&lt;code&gt;hixwos_init()&lt;/code&gt;完成初始化工作；&lt;/li&gt;
&lt;li&gt;玄武内核模块卸载(&lt;code&gt;rmmod&lt;/code&gt;)时，&lt;code&gt;board_example_exit()&lt;/code&gt;会调用&lt;code&gt;hixwos_exit()&lt;/code&gt;完成清理工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装模块&#34;&gt;安装模块&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; ~/XWKO/xwbd/pc
sudo insmod wkspc/xwos.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;查看玄武内核模块的输出&#34;&gt;查看玄武内核模块的输出&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;dmesg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此演示代码中创建了两个线程，Producer线程与Consumer线程，从log中可以看到
两个线程通过信号量进行同步，3秒钟后退出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;XwkoRunning.png&#34; alt=&#34;img&#34; title=&#34;运行过程&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;卸载模块&#34;&gt;卸载模块&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo rmmod xwos.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 正点原子Stm32F407核心板</title>
      <link>/docs/quick-guide/stm32/atkstm32f407core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-guide/stm32/atkstm32f407core/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;ATKStm32F407Core.jpg&#34; alt=&#34;img&#34; title=&#34;正点原子F407核心板&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCU: STM32F407ZET6&lt;/li&gt;
&lt;li&gt;SRAM: 1MiB&lt;/li&gt;
&lt;li&gt;更多介绍: &lt;a href=&#34;http://www.openedv.com/docs/boards/stm32/zdyz_stm32f407_mini_sysboard.html&#34;&gt;主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电路板目录：&lt;code&gt;xwbd/ATKStm32F407Core&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译集成环境可参考：&lt;a href=&#34;../env&#34;&gt;开发环境搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源码&#34;&gt;源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仓库：&lt;a href=&#34;https://gitee.com/xwos/ATKStm32F407Core.git&#34;&gt;https://gitee.com/xwos/ATKStm32F407Core.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone --recursive https://gitee.com/xwos/ATKStm32F407Core.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在已有的仓库中同步代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;导入工程到stm32cubeide&#34;&gt;导入工程到STM32CubeIDE&lt;/h2&gt;
&lt;p&gt;工程需放在STM32CubeIDE的工作目录内（即STM32CubeIDE启动时指定的目录），&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜单：&lt;strong&gt;File &amp;ndash;&amp;gt; Import&amp;hellip; &amp;ndash;&amp;gt; General &amp;ndash;&amp;gt; Projects from Folder or Archive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置编译环境&#34;&gt;设置编译环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开菜单**&amp;ldquo;Project &amp;ndash;&amp;gt; Properties &amp;ndash;&amp;gt; C/C++ Build &amp;ndash;&amp;gt; Environment&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;点击**&amp;ldquo;Restore Defaults&amp;rdquo;**；&lt;/li&gt;
&lt;li&gt;修改Debug配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Debug.png&#34; alt=&#34;img&#34; title=&#34;Debug配置&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Release配置的环境变量：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WKSPC&lt;/code&gt;:&lt;code&gt;../../../${ConfigName}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~D&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~V&lt;/code&gt;:&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH-Release.png&#34; alt=&#34;img&#34; title=&#34;Release配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量path设置&#34;&gt;环境变量&lt;strong&gt;PATH&lt;/strong&gt;设置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改Debug和Release两个配置的&lt;strong&gt;PATH&lt;/strong&gt;环境变量
&lt;ul&gt;
&lt;li&gt;将STM32CubeIDE自带的工具链路径从PATH环境变量中删除；&lt;/li&gt;
&lt;li&gt;将XWMCU工具链的路径放置到PATH环境变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Properties-C_C++_Build-Environment-PATH.svg&#34; alt=&#34;img&#34; title=&#34;设置PATH&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stm32cubemx配置工程&#34;&gt;STM32CubeMX配置工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/ATKStm32F407Core.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XWOS对中断优先级的要求：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;切换上下文的中断 &amp;lt;= 滴答定时器的中断 &amp;lt; 调度器服务中断
切换上下文的中断 &amp;lt; 其他中断 &amp;lt; 调度器服务中断
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;NVIC设置
&lt;ul&gt;
&lt;li&gt;设置3个抢占优先级位和1个子优先级位&lt;/li&gt;
&lt;li&gt;SVC中断设置成&lt;strong&gt;最高&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为0；&lt;/li&gt;
&lt;li&gt;PendSV中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;Systick中断设置成&lt;strong&gt;最低&lt;/strong&gt;优先级，即&lt;strong&gt;Preemption Priority&lt;/strong&gt;为7；&lt;/li&gt;
&lt;li&gt;系统Fault的优先级设置为0；&lt;/li&gt;
&lt;li&gt;其他中断的优先级只可在&lt;strong&gt;1~6&lt;/strong&gt;之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32-IRQ-Priority.svg&#34; alt=&#34;img&#34; title=&#34;中断优先级&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Build.png&#34; alt=&#34;img&#34; title=&#34;编译&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;
&lt;p&gt;打开菜单&lt;strong&gt;Run &amp;ndash;&amp;gt; Debug Configurations&amp;hellip;&lt;/strong&gt;，根据仿真器类型，选择调试配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32F407Core-openocd-daplink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;DAPLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32F407Core-openocd-jlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;openocd&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATKStm32F407Core-stlink&lt;/strong&gt;：&lt;strong&gt;gdb&lt;/strong&gt; + &lt;strong&gt;STLink GDB Server&lt;/strong&gt; + &lt;strong&gt;JLink调试器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../env/STM32CubeIDE-Debug_Configurations.png&#34; alt=&#34;img&#34; title=&#34;调试配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试步骤&#34;&gt;调试步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用MicroUSB线连接电路板上的USB-232接口与PC；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;ATKStm32F407Core-PCB.png&#34; alt=&#34;img&#34; title=&#34;正点原子F407核心板PCB&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入一张4GB左右的SD卡，并在之前格式化为FAT32文件系统；&lt;/li&gt;
&lt;li&gt;打开终端工具（windows可选putty、SecretCRT，Linux可选gtkterm、picocom、minicom）,
但先不要在终端工具中打开串口，否则MCU会进入下载模式；&lt;/li&gt;
&lt;li&gt;上电，STM32CubeIDE中启动调试，等待MCU运行到初始断点；&lt;/li&gt;
&lt;li&gt;在终端工具中打开串口，参数：1M波特率/8位数据/1位停止位/无奇偶校验；&lt;/li&gt;
&lt;li&gt;开始单步调试或连续运行调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试技巧&#34;&gt;调试技巧&lt;/h3&gt;
&lt;h4 id=&#34;复位系统&#34;&gt;复位系统&lt;/h4&gt;
&lt;p&gt;因为板子的调试接口是4线SWD，与调试器之间没有复位线连接，经常无法完成自动复位，
时常发生在下载完程序，等待MCU运行到初始断点处时。可按以下步骤处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在程序的初始化流程中设置一个断点，例如&lt;code&gt;xwos_main()&lt;/code&gt;函数内部；&lt;/li&gt;
&lt;li&gt;若MCU处于停止运行状态，需要让MCU处于运行状态：&lt;/li&gt;
&lt;li&gt;手动按一下板子上的复位按键，此时MCU可停在预设的断点处。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;XWOS中有很多示例，可帮助用户快速了解API的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程
&lt;ul&gt;
&lt;li&gt;创建线程：&lt;code&gt;xwam/example/thread/create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程睡眠：&lt;code&gt;xwam/example/thread/sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时器：&lt;code&gt;xwam/example/timer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步
&lt;ul&gt;
&lt;li&gt;信号量：&lt;code&gt;xwam/example/sync/sem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件量：&lt;code&gt;xwam/example/sync/cond&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件标志：&lt;code&gt;xwam/example/sync/flg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程栅栏：&lt;code&gt;xwam/example/sync/br&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信号选择器：&lt;code&gt;xwam/example/sync/sel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁
&lt;ul&gt;
&lt;li&gt;中断管理：&lt;code&gt;xwam/example/lock/cpuirq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自旋锁：&lt;code&gt;xwam/example/lock/spinlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;顺序锁：&lt;code&gt;xwam/example/lock/seqlock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;互斥锁：&lt;code&gt;xwam/example/lock/mtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;简单内存分配器：&lt;code&gt;xwam/example/mm/sma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存切片分配器：&lt;code&gt;xwam/example/mm/memslice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伙伴算法分配器：&lt;code&gt;xwam/example/mm/bma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池：只用于比较大的内存区域的管理，例如外接的SRAM。
ATKStm32F407Core工程已经为板载的SRAM建立了内存池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;玄武C库
&lt;ul&gt;
&lt;li&gt;CRC：&lt;code&gt;xwam/example/xwlib/crc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个示例中都有一个&lt;code&gt;xxx_start()&lt;/code&gt;函数，可在&lt;code&gt;xwbd/ATKStm32F407Core/bm/main/main.c&lt;/code&gt;文件中的
主线程&lt;code&gt;main_task()&lt;/code&gt;中调用这些函数启动示例，但最好一次只启动一个示例，避免冲突。&lt;/p&gt;
&lt;h2 id=&#34;系统集成的原理&#34;&gt;系统集成的原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有移植的第三方组件、驱动包、示例代码等都是以&lt;strong&gt;玄武模块&lt;/strong&gt;独立编译成静态库**.a**，
之后再将它们链接成**ELF**文件，再由**ELF**生成**bin**、**hex**和**smot**文件。&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个独立的子工程并进行独立编译，设计上借鉴了安卓系统的&lt;strong&gt;Android.mk&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;中都有一个&lt;code&gt;xwmo.mk&lt;/code&gt;文件，其中定义的&lt;strong&gt;编译参数&lt;/strong&gt;、&lt;strong&gt;头文件路径&lt;/strong&gt;等
&lt;strong&gt;只&lt;/strong&gt;对&lt;strong&gt;当前&lt;/strong&gt;的&lt;strong&gt;玄武模块&lt;/strong&gt;生效；&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;玄武模块&lt;/strong&gt;都是一个封闭的包，外部一般不能直接引用内部头文件，需要封装对外可见的
&lt;strong&gt;类型&lt;/strong&gt;以及&lt;strong&gt;接口函数&lt;/strong&gt;，并统一放在专门的&lt;strong&gt;API头文件&lt;/strong&gt;中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API头文件&lt;/strong&gt;通常以&lt;strong&gt;mif.h&lt;/strong&gt;作为文件名，含义是&lt;strong&gt;模块接口(Module InterFace)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XWOS内已经包含了大量&lt;strong&gt;玄武模块&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwcd&lt;/code&gt;：外设芯片的驱动；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwam&lt;/code&gt;：示例与应用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwmd&lt;/code&gt;：中间件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwem&lt;/code&gt;：第三方开源软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;玄武模块&lt;/strong&gt;的具体信息可以参考&lt;a href=&#34;../../../user-manual/build-system#%E7%8E%84%E6%AD%A6%E6%A8%A1%E5%9D%97&#34;&gt;用户手册-构建系统-玄武模块&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码启动流程&#34;&gt;代码启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../env/stm32-boot-flow.svg&#34; alt=&#34;img&#34; title=&#34;STM32启动流程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm32cube_lowlevel_init()&lt;/code&gt;：初始化时钟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stm32cube_init()&lt;/code&gt;：初始化内存管理、cache、GPIO、DMA等基础设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main_task()&lt;/code&gt;：初始化其他设备、启动其他子线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;bsp&#34;&gt;BSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32Cube模块：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX配置文件：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/ATKStm32F407Core.ioc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STM32CubeMX生成源码目录：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配XWOS的源码：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/xwac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中断向量表：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/IVT&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;中断向量表是使用命令自动生成的；&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;xwbs/util/el/stm32ivt/stm32ivt.el xwbd/ATKStm32F407Core/bm/stm32cube&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终端UART
&lt;ul&gt;
&lt;li&gt;设备：USART1&lt;/li&gt;
&lt;li&gt;参数：1M波特率/8位数据/1位停止位/无奇偶校验&lt;/li&gt;
&lt;li&gt;驱动
&lt;ul&gt;
&lt;li&gt;驱动框架 —— 设备栈：&lt;code&gt;xwmd/ds/uart/dma.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设备栈驱动：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/xwac/xwds/uart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HAL库驱动：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/Core/Src/usart.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意：HAL库中的驱动存在BUG，XWOS中所提供的代码已修复；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SRAM
&lt;ul&gt;
&lt;li&gt;映射地址：&lt;strong&gt;0x68000000&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大小：&lt;strong&gt;1MiB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/Core/Src/fsmc.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存池
&lt;ul&gt;
&lt;li&gt;头文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/mif.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwos/mm/mempool/allocator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存池对象：&lt;code&gt;sram_mempool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SD卡
&lt;ul&gt;
&lt;li&gt;驱动：&lt;code&gt;xwbd/ATKStm32F407Core/bm/stm32cube/cubemx/Core/Src/sdio.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
